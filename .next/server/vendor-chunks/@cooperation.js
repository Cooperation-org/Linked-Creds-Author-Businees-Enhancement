"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cooperation";
exports.ids = ["vendor-chunks/@cooperation"];
exports.modules = {

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialEngine: () => (/* reexport safe */ _models_CredentialEngine_js__WEBPACK_IMPORTED_MODULE_1__.CredentialEngine),\n/* harmony export */   GoogleDriveStorage: () => (/* reexport safe */ _models_GoogleDriveStorage_js__WEBPACK_IMPORTED_MODULE_0__.GoogleDriveStorage),\n/* harmony export */   Resume: () => (/* reexport safe */ _models_Resume_js__WEBPACK_IMPORTED_MODULE_4__.Resume),\n/* harmony export */   ResumeVC: () => (/* reexport safe */ _models_ResumeVC_js__WEBPACK_IMPORTED_MODULE_5__.ResumeVC),\n/* harmony export */   StorageHandler: () => (/* reexport safe */ _models_Resume_js__WEBPACK_IMPORTED_MODULE_4__.StorageHandler),\n/* harmony export */   createAndSignVerifiablePresentation: () => (/* reexport safe */ _utils_presentation_js__WEBPACK_IMPORTED_MODULE_3__.createAndSignVerifiablePresentation),\n/* harmony export */   extractGoogleDriveFileId: () => (/* reexport safe */ _utils_google_js__WEBPACK_IMPORTED_MODULE_2__.extractGoogleDriveFileId),\n/* harmony export */   generateViewLink: () => (/* reexport safe */ _utils_google_js__WEBPACK_IMPORTED_MODULE_2__.generateViewLink),\n/* harmony export */   getVCWithRecommendations: () => (/* reexport safe */ _utils_google_js__WEBPACK_IMPORTED_MODULE_2__.getVCWithRecommendations),\n/* harmony export */   resumeFolderTypes: () => (/* reexport safe */ _models_Resume_js__WEBPACK_IMPORTED_MODULE_4__.resumeFolderTypes),\n/* harmony export */   saveToGoogleDrive: () => (/* reexport safe */ _utils_google_js__WEBPACK_IMPORTED_MODULE_2__.saveToGoogleDrive),\n/* harmony export */   uploadToGoogleDrive: () => (/* reexport safe */ _utils_google_js__WEBPACK_IMPORTED_MODULE_2__.uploadToGoogleDrive)\n/* harmony export */ });\n/* harmony import */ var _models_GoogleDriveStorage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/GoogleDriveStorage.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/models/GoogleDriveStorage.js\");\n/* harmony import */ var _models_CredentialEngine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/CredentialEngine.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/models/CredentialEngine.js\");\n/* harmony import */ var _utils_google_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/google.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/google.js\");\n/* harmony import */ var _utils_presentation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/presentation.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/presentation.js\");\n/* harmony import */ var _models_Resume_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./models/Resume.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/models/Resume.js\");\n/* harmony import */ var _models_ResumeVC_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./models/ResumeVC.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/models/ResumeVC.js\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvb3BlcmF0aW9uL3ZjLXN0b3JhZ2UvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0M7QUFDRjtBQUNYO0FBQ007QUFDTDtBQUNFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0Bjb29wZXJhdGlvbi92Yy1zdG9yYWdlL2Rpc3QvaW5kZXguanM/NmRmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL21vZGVscy9Hb29nbGVEcml2ZVN0b3JhZ2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tb2RlbHMvQ3JlZGVudGlhbEVuZ2luZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzL2dvb2dsZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzL3ByZXNlbnRhdGlvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL21vZGVscy9SZXN1bWUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tb2RlbHMvUmVzdW1lVkMuanMnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/models/CredentialEngine.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/models/CredentialEngine.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialEngine: () => (/* binding */ CredentialEngine)\n/* harmony export */ });\n/* harmony import */ var _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @digitalbazaar/ed25519-verification-key-2020 */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js\");\n/* harmony import */ var _digitalbazaar_ed25519_signature_2020__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @digitalbazaar/ed25519-signature-2020 */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-signature-2020/lib/index.js\");\n/* harmony import */ var _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @digitalbazaar/vc */ \"(ssr)/./node_modules/@digitalbazaar/vc/lib/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _utils_credential_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/credential.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/credential.js\");\n/* harmony import */ var _utils_digitalbazaar_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/digitalbazaar.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/digitalbazaar.js\");\n/* harmony import */ var _utils_google_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/google.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/google.js\");\n\n\n\n\n\n\n\n/**\n * Class representing the Credential Engine.\n * @class CredentialEngine\n * @classdesc Credential Engine class to create DIDs and VCs.\n * @method createDID - Create a new DID with Digital Bazaar's Ed25519VerificationKey2020 key pair.\n * @method createWalletDID - Create a new DID with user metamask address as controller.\n * @method signVC - Sign a Verifiable Credential (VC).\n * @method verifyCredential - Verify a Verifiable Credential (VC).\n * @method createPresentation - Create a Verifiable Presentation (VP).\n * @method signPresentation - Sign a Verifiable Presentation (VP).\n */\nclass CredentialEngine {\n    storage;\n    keyPair;\n    constructor(storage) {\n        this.storage = storage;\n    }\n    async getKeyPair(vc) {\n        // Fetch all stored key pairs\n        const keyPairs = await this.storage.getAllFilesByType('KEYPAIRs');\n        if (!keyPairs || keyPairs.length === 0) {\n            throw new Error('No key pairs found in storage.');\n        }\n        // Extract UUID from VC ID\n        const vcIdParts = vc.id.split(':');\n        if (vcIdParts.length < 3) {\n            throw new Error('Invalid Verifiable Credential ID format.');\n        }\n        const uuidFromVC = vcIdParts[2];\n        // Match UUID with key pair files\n        const matchingKeyPairFile = keyPairs.find((key) => {\n            const [uuidPart] = key.name.split('_');\n            return uuidPart === uuidFromVC;\n        });\n        if (!matchingKeyPairFile) {\n            throw new Error('No matching key pair found for the Verifiable Credential ID.');\n        }\n        // Return the key pair content\n        const key = matchingKeyPairFile.content;\n        this.keyPair = key;\n        return key;\n    }\n    generateKeyPair = async (address) => {\n        const keyPair = await _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_0__.Ed25519VerificationKey2020.generate();\n        const a = address || keyPair.publicKeyMultibase;\n        keyPair.controller = `did:key:${a}`;\n        keyPair.id = `${keyPair.controller}#${a}`;\n        keyPair.revoked = false;\n        return keyPair;\n    };\n    async verifyCreds(creds) {\n        await Promise.all(creds.map((cred) => {\n            const res = this.verifyCredential(cred);\n            if (!res)\n                return false;\n        }));\n        return true;\n    }\n    /**\n     * Create a new DID with Digital Bazaar's Ed25519VerificationKey2020 key pair.\n     * @returns {Promise<{didDocument: object, keyPair: object}>} The created DID document and key pair.\n     * @throws Will throw an error if DID creation fails.\n     */\n    async createDID() {\n        try {\n            const keyPair = await this.generateKeyPair();\n            // const keyFile = await saveToGoogleDrive({\n            // \tstorage: this.storage,\n            // \tdata: keyPair,\n            // \ttype: 'KEYPAIR',\n            // });\n            const didDocument = await (0,_utils_credential_js__WEBPACK_IMPORTED_MODULE_3__.generateDIDSchema)(keyPair);\n            return { didDocument, keyPair };\n        }\n        catch (error) {\n            console.error('Error creating DID:', error);\n            throw error;\n        }\n    }\n    async findKeysAndDIDs() {\n        const keyPairs = (await this.storage.getAllFilesByType('KEYPAIRs'));\n        const DIDs = (await this.storage.getAllFilesByType('DIDs'));\n        if (DIDs.length === 0 || keyPairs.length === 0)\n            return null;\n        const keyPair = keyPairs[0].data;\n        const didDocument = DIDs[0].data.didDocument;\n        return {\n            didDocument,\n            keyPair,\n        };\n    }\n    /**\n     * Create a new DID with user metamask address as controller\n     * @param walletrAddress\n     * @returns {Promise<{didDocument: object, keyPair: object}>} The created DID document and key pair.\n     * @throws Will throw an error if DID creation fails.\n     */\n    async createWalletDID(walletrAddress) {\n        try {\n            const keyPair = await this.generateKeyPair(walletrAddress);\n            const keyFile = await (0,_utils_google_js__WEBPACK_IMPORTED_MODULE_5__.saveToGoogleDrive)({\n                storage: this.storage,\n                data: keyPair,\n                type: 'KEYPAIR',\n            });\n            console.log('🚀 ~ CredentialEngine ~ createWalletDID ~ keyFile:', keyFile);\n            const didDocument = await (0,_utils_credential_js__WEBPACK_IMPORTED_MODULE_3__.generateDIDSchema)(keyPair);\n            return { didDocument, keyPair };\n        }\n        catch (error) {\n            console.error('Error creating DID:', error);\n            throw error;\n        }\n    }\n    /**\n     * Sign a Verifiable Credential (VC)\n     * @param {'VC' | 'RECOMMENDATION'} type - The signature type.\n     * @param {string} issuerId - The ID of the issuer [currently we put it as the did id]\n     * @param {KeyPair} keyPair - The key pair to use for signing.\n     * @param {FormDataI | RecommendationFormDataI} formData - The form data to include in the VC.\n     * @param {string} VCId - The ID of the credential when the type is RECOMMENDATION\n     * @returns {Promise<Credential>} The signed VC.\n     * @throws Will throw an error if VC signing fails.\n     */\n    async signVC({ data, type, keyPair, issuerId, vcFileId }) {\n        let credential = (0,_utils_credential_js__WEBPACK_IMPORTED_MODULE_3__.generateUnsignedVC)({ formData: data, issuerDid: issuerId });\n        if (type == 'RECOMMENDATION' && vcFileId) {\n            console.log('WOW');\n            credential = (0,_utils_credential_js__WEBPACK_IMPORTED_MODULE_3__.generateUnsignedRecommendation)({\n                vcId: vcFileId,\n                recommendation: data,\n                issuerDid: issuerId,\n            });\n        }\n        try {\n            console.log('🚀 ~ CredentialEngine ~ signVC ~ credential:', credential);\n            if (!credential)\n                throw new Error('Invalid credential type');\n            const suite = new _digitalbazaar_ed25519_signature_2020__WEBPACK_IMPORTED_MODULE_1__.Ed25519Signature2020({ key: keyPair, verificationMethod: keyPair.id });\n            console.log('before');\n            const signedVC = await _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__.issue({ credential, suite, documentLoader: _utils_digitalbazaar_js__WEBPACK_IMPORTED_MODULE_4__.customDocumentLoader });\n            return signedVC;\n        }\n        catch (error) {\n            console.error('Error signing VC:', error);\n            throw error;\n        }\n    }\n    /**\n     * Verify a Verifiable Credential (VC)\n     * @param {object} credential - The Verifiable Credential to verify.\n     * @returns {Promise<boolean>} The verification result.\n     * @throws Will throw an error if VC verification fails.\n     */\n    async verifyCredential(credential) {\n        try {\n            const keyPair = await (0,_utils_credential_js__WEBPACK_IMPORTED_MODULE_3__.extractKeyPairFromCredential)(credential);\n            const suite = new _digitalbazaar_ed25519_signature_2020__WEBPACK_IMPORTED_MODULE_1__.Ed25519Signature2020({\n                key: keyPair,\n                verificationMethod: keyPair.id,\n            });\n            const result = await _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__.verifyCredential({\n                credential,\n                suite,\n                documentLoader: _utils_digitalbazaar_js__WEBPACK_IMPORTED_MODULE_4__.customDocumentLoader,\n            });\n            console.log(JSON.stringify(result));\n            return result;\n        }\n        catch (error) {\n            console.error('Verification failed:', error);\n            throw error;\n        }\n    }\n    /**\n     * Create a Verifiable Presentation (VP)\n     * @param verifiableCredential\n     * @returns\n     */\n    async createPresentation(verifiableCredential) {\n        try {\n            const res = await this.verifyCreds(verifiableCredential);\n            if (!res)\n                throw new Error('Some credentials failed verification');\n            const id = `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`;\n            const keyPair = await this.getKeyPair(verifiableCredential[0]);\n            console.log('🚀 ~ CredentialEngine ~ createPresentation ~ keyPair:', keyPair);\n            const VP = await _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__.createPresentation({ verifiableCredential, id, holder: keyPair.controller });\n            return VP;\n        }\n        catch (error) {\n            console.error('Error creating presentation:', error);\n            throw error;\n        }\n    }\n    /**\n     * Sign a Verifiable Presentation (VP)\n     * @param presentation\n     * @returns\n     */\n    async signPresentation(presentation) {\n        try {\n            // Wrap the keyPair into an Ed25519VerificationKey2020 that includes the signer method\n            const signingKey = new _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_0__.Ed25519VerificationKey2020({\n                id: this.keyPair.id,\n                controller: this.keyPair.controller,\n                type: this.keyPair.type,\n                publicKeyMultibase: this.keyPair.publicKeyMultibase,\n                privateKeyMultibase: this.keyPair.privateKeyMultibase,\n            });\n            // Create the Ed25519Signature2020 suite with the wrapped key that includes the signer\n            const suite = new _digitalbazaar_ed25519_signature_2020__WEBPACK_IMPORTED_MODULE_1__.Ed25519Signature2020({\n                key: signingKey,\n                verificationMethod: this.keyPair.id,\n            });\n            // Sign the presentation\n            const signedVP = await _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__.signPresentation({\n                presentation,\n                suite,\n                documentLoader: _utils_digitalbazaar_js__WEBPACK_IMPORTED_MODULE_4__.customDocumentLoader,\n                challenge: '', // Provide the challenge if required\n            });\n            return signedVP;\n        }\n        catch (error) {\n            console.error('Error signing presentation:', error);\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvb3BlcmF0aW9uL3ZjLXN0b3JhZ2UvZGlzdC9tb2RlbHMvQ3JlZGVudGlhbEVuZ2luZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUEwRjtBQUNiO0FBQ25DO0FBQ047QUFDMEc7QUFDN0U7QUFDVjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9HQUEwQjtBQUN4RDtBQUNBLHdDQUF3QyxFQUFFO0FBQzFDLHdCQUF3QixtQkFBbUIsR0FBRyxFQUFFO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUyxxQ0FBcUMsR0FBRztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsc0NBQXNDLHVFQUFpQjtBQUN2RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVMscUNBQXFDLEdBQUc7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxtRUFBaUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0NBQXNDLHVFQUFpQjtBQUN2RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUJBQXlCO0FBQ3hDLGVBQWUsUUFBUTtBQUN2QixlQUFlLFNBQVM7QUFDeEIsZUFBZSxxQ0FBcUM7QUFDcEQsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixxQkFBcUI7QUFDdEM7QUFDQTtBQUNBLG1CQUFtQix5Q0FBeUM7QUFDNUQseUJBQXlCLHdFQUFrQixHQUFHLHFDQUFxQztBQUNuRjtBQUNBO0FBQ0EseUJBQXlCLG9GQUE4QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix1RkFBb0IsR0FBRyw4Q0FBOEM7QUFDbkc7QUFDQSxtQ0FBbUMsb0RBQVUsR0FBRyxtQ0FBbUMseUVBQW9CLEVBQUU7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msa0ZBQTRCO0FBQzlELDhCQUE4Qix1RkFBb0I7QUFDbEQ7QUFDQTtBQUNBLGFBQWE7QUFDYixpQ0FBaUMsK0RBQXFCO0FBQ3REO0FBQ0E7QUFDQSxnQ0FBZ0MseUVBQW9CO0FBQ3BELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0RBQU0sR0FBRztBQUM1QztBQUNBO0FBQ0EsNkJBQTZCLGlFQUF1QixHQUFHLHNEQUFzRDtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0dBQTBCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw4QkFBOEIsdUZBQW9CO0FBQ2xEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxtQ0FBbUMsK0RBQXFCO0FBQ3hEO0FBQ0E7QUFDQSxnQ0FBZ0MseUVBQW9CO0FBQ3BEO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGNvb3BlcmF0aW9uL3ZjLXN0b3JhZ2UvZGlzdC9tb2RlbHMvQ3JlZGVudGlhbEVuZ2luZS5qcz8wZTNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkMjU1MTlWZXJpZmljYXRpb25LZXkyMDIwIH0gZnJvbSAnQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS12ZXJpZmljYXRpb24ta2V5LTIwMjAnO1xuaW1wb3J0IHsgRWQyNTUxOVNpZ25hdHVyZTIwMjAgfSBmcm9tICdAZGlnaXRhbGJhemFhci9lZDI1NTE5LXNpZ25hdHVyZS0yMDIwJztcbmltcG9ydCAqIGFzIGRiVmMgZnJvbSAnQGRpZ2l0YWxiYXphYXIvdmMnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBleHRyYWN0S2V5UGFpckZyb21DcmVkZW50aWFsLCBnZW5lcmF0ZURJRFNjaGVtYSwgZ2VuZXJhdGVVbnNpZ25lZFJlY29tbWVuZGF0aW9uLCBnZW5lcmF0ZVVuc2lnbmVkVkMsIH0gZnJvbSAnLi4vdXRpbHMvY3JlZGVudGlhbC5qcyc7XG5pbXBvcnQgeyBjdXN0b21Eb2N1bWVudExvYWRlciB9IGZyb20gJy4uL3V0aWxzL2RpZ2l0YWxiYXphYXIuanMnO1xuaW1wb3J0IHsgc2F2ZVRvR29vZ2xlRHJpdmUgfSBmcm9tICcuLi91dGlscy9nb29nbGUuanMnO1xuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgdGhlIENyZWRlbnRpYWwgRW5naW5lLlxuICogQGNsYXNzIENyZWRlbnRpYWxFbmdpbmVcbiAqIEBjbGFzc2Rlc2MgQ3JlZGVudGlhbCBFbmdpbmUgY2xhc3MgdG8gY3JlYXRlIERJRHMgYW5kIFZDcy5cbiAqIEBtZXRob2QgY3JlYXRlRElEIC0gQ3JlYXRlIGEgbmV3IERJRCB3aXRoIERpZ2l0YWwgQmF6YWFyJ3MgRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjAga2V5IHBhaXIuXG4gKiBAbWV0aG9kIGNyZWF0ZVdhbGxldERJRCAtIENyZWF0ZSBhIG5ldyBESUQgd2l0aCB1c2VyIG1ldGFtYXNrIGFkZHJlc3MgYXMgY29udHJvbGxlci5cbiAqIEBtZXRob2Qgc2lnblZDIC0gU2lnbiBhIFZlcmlmaWFibGUgQ3JlZGVudGlhbCAoVkMpLlxuICogQG1ldGhvZCB2ZXJpZnlDcmVkZW50aWFsIC0gVmVyaWZ5IGEgVmVyaWZpYWJsZSBDcmVkZW50aWFsIChWQykuXG4gKiBAbWV0aG9kIGNyZWF0ZVByZXNlbnRhdGlvbiAtIENyZWF0ZSBhIFZlcmlmaWFibGUgUHJlc2VudGF0aW9uIChWUCkuXG4gKiBAbWV0aG9kIHNpZ25QcmVzZW50YXRpb24gLSBTaWduIGEgVmVyaWZpYWJsZSBQcmVzZW50YXRpb24gKFZQKS5cbiAqL1xuZXhwb3J0IGNsYXNzIENyZWRlbnRpYWxFbmdpbmUge1xuICAgIHN0b3JhZ2U7XG4gICAga2V5UGFpcjtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlKSB7XG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgfVxuICAgIGFzeW5jIGdldEtleVBhaXIodmMpIHtcbiAgICAgICAgLy8gRmV0Y2ggYWxsIHN0b3JlZCBrZXkgcGFpcnNcbiAgICAgICAgY29uc3Qga2V5UGFpcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2UuZ2V0QWxsRmlsZXNCeVR5cGUoJ0tFWVBBSVJzJyk7XG4gICAgICAgIGlmICgha2V5UGFpcnMgfHwga2V5UGFpcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGtleSBwYWlycyBmb3VuZCBpbiBzdG9yYWdlLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4dHJhY3QgVVVJRCBmcm9tIFZDIElEXG4gICAgICAgIGNvbnN0IHZjSWRQYXJ0cyA9IHZjLmlkLnNwbGl0KCc6Jyk7XG4gICAgICAgIGlmICh2Y0lkUGFydHMubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFZlcmlmaWFibGUgQ3JlZGVudGlhbCBJRCBmb3JtYXQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXVpZEZyb21WQyA9IHZjSWRQYXJ0c1syXTtcbiAgICAgICAgLy8gTWF0Y2ggVVVJRCB3aXRoIGtleSBwYWlyIGZpbGVzXG4gICAgICAgIGNvbnN0IG1hdGNoaW5nS2V5UGFpckZpbGUgPSBrZXlQYWlycy5maW5kKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFt1dWlkUGFydF0gPSBrZXkubmFtZS5zcGxpdCgnXycpO1xuICAgICAgICAgICAgcmV0dXJuIHV1aWRQYXJ0ID09PSB1dWlkRnJvbVZDO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFtYXRjaGluZ0tleVBhaXJGaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1hdGNoaW5nIGtleSBwYWlyIGZvdW5kIGZvciB0aGUgVmVyaWZpYWJsZSBDcmVkZW50aWFsIElELicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiB0aGUga2V5IHBhaXIgY29udGVudFxuICAgICAgICBjb25zdCBrZXkgPSBtYXRjaGluZ0tleVBhaXJGaWxlLmNvbnRlbnQ7XG4gICAgICAgIHRoaXMua2V5UGFpciA9IGtleTtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgZ2VuZXJhdGVLZXlQYWlyID0gYXN5bmMgKGFkZHJlc3MpID0+IHtcbiAgICAgICAgY29uc3Qga2V5UGFpciA9IGF3YWl0IEVkMjU1MTlWZXJpZmljYXRpb25LZXkyMDIwLmdlbmVyYXRlKCk7XG4gICAgICAgIGNvbnN0IGEgPSBhZGRyZXNzIHx8IGtleVBhaXIucHVibGljS2V5TXVsdGliYXNlO1xuICAgICAgICBrZXlQYWlyLmNvbnRyb2xsZXIgPSBgZGlkOmtleToke2F9YDtcbiAgICAgICAga2V5UGFpci5pZCA9IGAke2tleVBhaXIuY29udHJvbGxlcn0jJHthfWA7XG4gICAgICAgIGtleVBhaXIucmV2b2tlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4ga2V5UGFpcjtcbiAgICB9O1xuICAgIGFzeW5jIHZlcmlmeUNyZWRzKGNyZWRzKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGNyZWRzLm1hcCgoY3JlZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gdGhpcy52ZXJpZnlDcmVkZW50aWFsKGNyZWQpO1xuICAgICAgICAgICAgaWYgKCFyZXMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRElEIHdpdGggRGlnaXRhbCBCYXphYXIncyBFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAyMCBrZXkgcGFpci5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7ZGlkRG9jdW1lbnQ6IG9iamVjdCwga2V5UGFpcjogb2JqZWN0fT59IFRoZSBjcmVhdGVkIERJRCBkb2N1bWVudCBhbmQga2V5IHBhaXIuXG4gICAgICogQHRocm93cyBXaWxsIHRocm93IGFuIGVycm9yIGlmIERJRCBjcmVhdGlvbiBmYWlscy5cbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVESUQoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBrZXlQYWlyID0gYXdhaXQgdGhpcy5nZW5lcmF0ZUtleVBhaXIoKTtcbiAgICAgICAgICAgIC8vIGNvbnN0IGtleUZpbGUgPSBhd2FpdCBzYXZlVG9Hb29nbGVEcml2ZSh7XG4gICAgICAgICAgICAvLyBcdHN0b3JhZ2U6IHRoaXMuc3RvcmFnZSxcbiAgICAgICAgICAgIC8vIFx0ZGF0YToga2V5UGFpcixcbiAgICAgICAgICAgIC8vIFx0dHlwZTogJ0tFWVBBSVInLFxuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICBjb25zdCBkaWREb2N1bWVudCA9IGF3YWl0IGdlbmVyYXRlRElEU2NoZW1hKGtleVBhaXIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZGlkRG9jdW1lbnQsIGtleVBhaXIgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIERJRDonLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmaW5kS2V5c0FuZERJRHMoKSB7XG4gICAgICAgIGNvbnN0IGtleVBhaXJzID0gKGF3YWl0IHRoaXMuc3RvcmFnZS5nZXRBbGxGaWxlc0J5VHlwZSgnS0VZUEFJUnMnKSk7XG4gICAgICAgIGNvbnN0IERJRHMgPSAoYXdhaXQgdGhpcy5zdG9yYWdlLmdldEFsbEZpbGVzQnlUeXBlKCdESURzJykpO1xuICAgICAgICBpZiAoRElEcy5sZW5ndGggPT09IDAgfHwga2V5UGFpcnMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IGtleVBhaXIgPSBrZXlQYWlyc1swXS5kYXRhO1xuICAgICAgICBjb25zdCBkaWREb2N1bWVudCA9IERJRHNbMF0uZGF0YS5kaWREb2N1bWVudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpZERvY3VtZW50LFxuICAgICAgICAgICAga2V5UGFpcixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IERJRCB3aXRoIHVzZXIgbWV0YW1hc2sgYWRkcmVzcyBhcyBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHdhbGxldHJBZGRyZXNzXG4gICAgICogQHJldHVybnMge1Byb21pc2U8e2RpZERvY3VtZW50OiBvYmplY3QsIGtleVBhaXI6IG9iamVjdH0+fSBUaGUgY3JlYXRlZCBESUQgZG9jdW1lbnQgYW5kIGtleSBwYWlyLlxuICAgICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiBESUQgY3JlYXRpb24gZmFpbHMuXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlV2FsbGV0RElEKHdhbGxldHJBZGRyZXNzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBrZXlQYWlyID0gYXdhaXQgdGhpcy5nZW5lcmF0ZUtleVBhaXIod2FsbGV0ckFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3Qga2V5RmlsZSA9IGF3YWl0IHNhdmVUb0dvb2dsZURyaXZlKHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlOiB0aGlzLnN0b3JhZ2UsXG4gICAgICAgICAgICAgICAgZGF0YToga2V5UGFpcixcbiAgICAgICAgICAgICAgICB0eXBlOiAnS0VZUEFJUicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5qAIH4gQ3JlZGVudGlhbEVuZ2luZSB+IGNyZWF0ZVdhbGxldERJRCB+IGtleUZpbGU6Jywga2V5RmlsZSk7XG4gICAgICAgICAgICBjb25zdCBkaWREb2N1bWVudCA9IGF3YWl0IGdlbmVyYXRlRElEU2NoZW1hKGtleVBhaXIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZGlkRG9jdW1lbnQsIGtleVBhaXIgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIERJRDonLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaWduIGEgVmVyaWZpYWJsZSBDcmVkZW50aWFsIChWQylcbiAgICAgKiBAcGFyYW0geydWQycgfCAnUkVDT01NRU5EQVRJT04nfSB0eXBlIC0gVGhlIHNpZ25hdHVyZSB0eXBlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpc3N1ZXJJZCAtIFRoZSBJRCBvZiB0aGUgaXNzdWVyIFtjdXJyZW50bHkgd2UgcHV0IGl0IGFzIHRoZSBkaWQgaWRdXG4gICAgICogQHBhcmFtIHtLZXlQYWlyfSBrZXlQYWlyIC0gVGhlIGtleSBwYWlyIHRvIHVzZSBmb3Igc2lnbmluZy5cbiAgICAgKiBAcGFyYW0ge0Zvcm1EYXRhSSB8IFJlY29tbWVuZGF0aW9uRm9ybURhdGFJfSBmb3JtRGF0YSAtIFRoZSBmb3JtIGRhdGEgdG8gaW5jbHVkZSBpbiB0aGUgVkMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFZDSWQgLSBUaGUgSUQgb2YgdGhlIGNyZWRlbnRpYWwgd2hlbiB0aGUgdHlwZSBpcyBSRUNPTU1FTkRBVElPTlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPENyZWRlbnRpYWw+fSBUaGUgc2lnbmVkIFZDLlxuICAgICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiBWQyBzaWduaW5nIGZhaWxzLlxuICAgICAqL1xuICAgIGFzeW5jIHNpZ25WQyh7IGRhdGEsIHR5cGUsIGtleVBhaXIsIGlzc3VlcklkLCB2Y0ZpbGVJZCB9KSB7XG4gICAgICAgIGxldCBjcmVkZW50aWFsID0gZ2VuZXJhdGVVbnNpZ25lZFZDKHsgZm9ybURhdGE6IGRhdGEsIGlzc3VlckRpZDogaXNzdWVySWQgfSk7XG4gICAgICAgIGlmICh0eXBlID09ICdSRUNPTU1FTkRBVElPTicgJiYgdmNGaWxlSWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXT1cnKTtcbiAgICAgICAgICAgIGNyZWRlbnRpYWwgPSBnZW5lcmF0ZVVuc2lnbmVkUmVjb21tZW5kYXRpb24oe1xuICAgICAgICAgICAgICAgIHZjSWQ6IHZjRmlsZUlkLFxuICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uOiBkYXRhLFxuICAgICAgICAgICAgICAgIGlzc3VlckRpZDogaXNzdWVySWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ/CfmoAgfiBDcmVkZW50aWFsRW5naW5lIH4gc2lnblZDIH4gY3JlZGVudGlhbDonLCBjcmVkZW50aWFsKTtcbiAgICAgICAgICAgIGlmICghY3JlZGVudGlhbClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY3JlZGVudGlhbCB0eXBlJyk7XG4gICAgICAgICAgICBjb25zdCBzdWl0ZSA9IG5ldyBFZDI1NTE5U2lnbmF0dXJlMjAyMCh7IGtleToga2V5UGFpciwgdmVyaWZpY2F0aW9uTWV0aG9kOiBrZXlQYWlyLmlkIH0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2JlZm9yZScpO1xuICAgICAgICAgICAgY29uc3Qgc2lnbmVkVkMgPSBhd2FpdCBkYlZjLmlzc3VlKHsgY3JlZGVudGlhbCwgc3VpdGUsIGRvY3VtZW50TG9hZGVyOiBjdXN0b21Eb2N1bWVudExvYWRlciB9KTtcbiAgICAgICAgICAgIHJldHVybiBzaWduZWRWQztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNpZ25pbmcgVkM6JywgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVmVyaWZ5IGEgVmVyaWZpYWJsZSBDcmVkZW50aWFsIChWQylcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY3JlZGVudGlhbCAtIFRoZSBWZXJpZmlhYmxlIENyZWRlbnRpYWwgdG8gdmVyaWZ5LlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBUaGUgdmVyaWZpY2F0aW9uIHJlc3VsdC5cbiAgICAgKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgVkMgdmVyaWZpY2F0aW9uIGZhaWxzLlxuICAgICAqL1xuICAgIGFzeW5jIHZlcmlmeUNyZWRlbnRpYWwoY3JlZGVudGlhbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qga2V5UGFpciA9IGF3YWl0IGV4dHJhY3RLZXlQYWlyRnJvbUNyZWRlbnRpYWwoY3JlZGVudGlhbCk7XG4gICAgICAgICAgICBjb25zdCBzdWl0ZSA9IG5ldyBFZDI1NTE5U2lnbmF0dXJlMjAyMCh7XG4gICAgICAgICAgICAgICAga2V5OiBrZXlQYWlyLFxuICAgICAgICAgICAgICAgIHZlcmlmaWNhdGlvbk1ldGhvZDoga2V5UGFpci5pZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGJWYy52ZXJpZnlDcmVkZW50aWFsKHtcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsLFxuICAgICAgICAgICAgICAgIHN1aXRlLFxuICAgICAgICAgICAgICAgIGRvY3VtZW50TG9hZGVyOiBjdXN0b21Eb2N1bWVudExvYWRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVmVyaWZpY2F0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBWZXJpZmlhYmxlIFByZXNlbnRhdGlvbiAoVlApXG4gICAgICogQHBhcmFtIHZlcmlmaWFibGVDcmVkZW50aWFsXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVQcmVzZW50YXRpb24odmVyaWZpYWJsZUNyZWRlbnRpYWwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMudmVyaWZ5Q3JlZHModmVyaWZpYWJsZUNyZWRlbnRpYWwpO1xuICAgICAgICAgICAgaWYgKCFyZXMpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb21lIGNyZWRlbnRpYWxzIGZhaWxlZCB2ZXJpZmljYXRpb24nKTtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYHVybjp1dWlkOiR7dXVpZHY0KCl9YDtcbiAgICAgICAgICAgIGNvbnN0IGtleVBhaXIgPSBhd2FpdCB0aGlzLmdldEtleVBhaXIodmVyaWZpYWJsZUNyZWRlbnRpYWxbMF0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ/CfmoAgfiBDcmVkZW50aWFsRW5naW5lIH4gY3JlYXRlUHJlc2VudGF0aW9uIH4ga2V5UGFpcjonLCBrZXlQYWlyKTtcbiAgICAgICAgICAgIGNvbnN0IFZQID0gYXdhaXQgZGJWYy5jcmVhdGVQcmVzZW50YXRpb24oeyB2ZXJpZmlhYmxlQ3JlZGVudGlhbCwgaWQsIGhvbGRlcjoga2V5UGFpci5jb250cm9sbGVyIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFZQO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgcHJlc2VudGF0aW9uOicsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ24gYSBWZXJpZmlhYmxlIFByZXNlbnRhdGlvbiAoVlApXG4gICAgICogQHBhcmFtIHByZXNlbnRhdGlvblxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYXN5bmMgc2lnblByZXNlbnRhdGlvbihwcmVzZW50YXRpb24pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdyYXAgdGhlIGtleVBhaXIgaW50byBhbiBFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAyMCB0aGF0IGluY2x1ZGVzIHRoZSBzaWduZXIgbWV0aG9kXG4gICAgICAgICAgICBjb25zdCBzaWduaW5nS2V5ID0gbmV3IEVkMjU1MTlWZXJpZmljYXRpb25LZXkyMDIwKHtcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5rZXlQYWlyLmlkLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IHRoaXMua2V5UGFpci5jb250cm9sbGVyLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMua2V5UGFpci50eXBlLFxuICAgICAgICAgICAgICAgIHB1YmxpY0tleU11bHRpYmFzZTogdGhpcy5rZXlQYWlyLnB1YmxpY0tleU11bHRpYmFzZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlS2V5TXVsdGliYXNlOiB0aGlzLmtleVBhaXIucHJpdmF0ZUtleU11bHRpYmFzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBFZDI1NTE5U2lnbmF0dXJlMjAyMCBzdWl0ZSB3aXRoIHRoZSB3cmFwcGVkIGtleSB0aGF0IGluY2x1ZGVzIHRoZSBzaWduZXJcbiAgICAgICAgICAgIGNvbnN0IHN1aXRlID0gbmV3IEVkMjU1MTlTaWduYXR1cmUyMDIwKHtcbiAgICAgICAgICAgICAgICBrZXk6IHNpZ25pbmdLZXksXG4gICAgICAgICAgICAgICAgdmVyaWZpY2F0aW9uTWV0aG9kOiB0aGlzLmtleVBhaXIuaWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFNpZ24gdGhlIHByZXNlbnRhdGlvblxuICAgICAgICAgICAgY29uc3Qgc2lnbmVkVlAgPSBhd2FpdCBkYlZjLnNpZ25QcmVzZW50YXRpb24oe1xuICAgICAgICAgICAgICAgIHByZXNlbnRhdGlvbixcbiAgICAgICAgICAgICAgICBzdWl0ZSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudExvYWRlcjogY3VzdG9tRG9jdW1lbnRMb2FkZXIsXG4gICAgICAgICAgICAgICAgY2hhbGxlbmdlOiAnJywgLy8gUHJvdmlkZSB0aGUgY2hhbGxlbmdlIGlmIHJlcXVpcmVkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzaWduZWRWUDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNpZ25pbmcgcHJlc2VudGF0aW9uOicsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/models/CredentialEngine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/models/GoogleDriveStorage.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/models/GoogleDriveStorage.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleDriveStorage: () => (/* binding */ GoogleDriveStorage)\n/* harmony export */ });\n/**\n * @class GoogleDriveStorage\n * @description Class to interact with Google Drive API\n * @param accessToken - Access token to authenticate with Google Drive API\n * @method createFolder - Create a new folder in Google Drive\n * @method save - Save data to Google Drive\n * @method addCommentToFile - Add a comment to a file in Google Drive\n * @method addCommenterRoleToFile - Add commenter role to a file in Google Drive\n * @method retrieve - Retrieve a file from Google Drive\n * @method findFolders - Find folders in Google Drive\n * @method findLastFile - Find the last file in a folder\n * @method getAllVCs - Get all verifiable credentials from Google Drive\n * @method getAllSessions - Get all sessions from Google Drive\n * @method delete - Delete a file from Google Drive\n */\nclass GoogleDriveStorage {\n    accessToken;\n    folderCache = {};\n    fileIdsCache = null;\n    async updateFileIdsJson(newFileId) {\n        const constructUrl = () => {\n            const baseUrl = 'https://www.googleapis.com/drive/v3/files';\n            const queryParams = new URLSearchParams({\n                spaces: 'appDataFolder',\n                q: \"name='file_ids.json'\",\n                fields: 'files(id)',\n            });\n            return `${baseUrl}?${queryParams.toString()}`;\n        };\n        try {\n            // ✅ Fetch `file_ids.json` ID once per session (cached)\n            if (!this.fileIdsCache) {\n                const existingFile = await this.fetcher({\n                    method: 'GET',\n                    headers: {},\n                    url: constructUrl(),\n                });\n                if (existingFile.files.length > 0) {\n                    this.fileIdsCache = existingFile.files[0].id;\n                }\n                else {\n                    console.log('No existing file_ids.json found, creating a new one.');\n                    this.fileIdsCache = null;\n                }\n            }\n            let existingFileIds = [];\n            // ✅ Fetch existing file IDs **only if `file_ids.json` exists**\n            if (this.fileIdsCache) {\n                try {\n                    const fileContent = await this.fetcher({\n                        method: 'GET',\n                        headers: {},\n                        url: `https://www.googleapis.com/drive/v3/files/${this.fileIdsCache}?alt=media`,\n                    });\n                    existingFileIds = fileContent;\n                }\n                catch (error) {\n                    console.log('Error fetching existing file_ids.json content, creating new list.');\n                }\n            }\n            // ✅ Append the new file ID to the list\n            existingFileIds.push(newFileId);\n            console.log('File ID saved to appDataFolder.', this.fileIdsCache);\n        }\n        catch (error) {\n            console.error('Error updating file_ids.json:', error.message);\n            throw error;\n        }\n    }\n    constructor(accessToken) {\n        this.accessToken = accessToken;\n    }\n    async fetcher({ method, headers, body, url }) {\n        try {\n            const res = await fetch(url, {\n                method,\n                headers: {\n                    Authorization: `Bearer ${this.accessToken}`,\n                    ...headers,\n                },\n                body,\n            });\n            const contentType = res.headers.get('Content-Type') || '';\n            let data;\n            if (contentType.includes('application/json')) {\n                data = await res.json();\n            }\n            else {\n                const text = await res.text();\n                console.error('Unexpected Response Type:', text);\n                throw new Error(`Expected JSON response but got: ${contentType}`);\n            }\n            if (!res.ok) {\n                console.error('Error Response:', JSON.stringify(data));\n                throw new Error(data?.error?.message || 'Unknown error occurred');\n            }\n            return data;\n        }\n        catch (error) {\n            console.error('Error fetching data:', error.message || error);\n            throw error;\n        }\n    }\n    async getFileContent(fileId) {\n        const url = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`;\n        try {\n            const response = await this.fetcher({ method: 'GET', headers: {}, url });\n            return response;\n        }\n        catch (error) {\n            console.error(`Error fetching content for file ID: ${fileId}:`, error.message);\n            throw new Error(`Failed to fetch content for file ID: ${fileId}`);\n        }\n    }\n    async searchFiles(query) {\n        const result = await this.fetcher({\n            method: 'GET',\n            headers: {},\n            url: `https://www.googleapis.com/drive/v3/files?q=${encodeURIComponent(query)}&trashed=false&fields=files(id,name,mimeType,parents)`,\n        });\n        return result.files || [];\n    }\n    async createFolder({ folderName, parentFolderId }) {\n        if (!parentFolderId) {\n            throw new Error(`Parent folder ID must be provided when creating folder \"${folderName}\".`);\n        }\n        const metadata = {\n            name: folderName,\n            mimeType: 'application/vnd.google-apps.folder',\n            parents: [parentFolderId],\n        };\n        const folder = await this.fetcher({\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(metadata),\n            url: 'https://www.googleapis.com/drive/v3/files',\n        });\n        console.log(`Folder created: \"${folderName}\" with ID: ${folder.id}, Parent: ${parentFolderId}`);\n        await this.fetcher({\n            method: 'POST',\n            url: `https://www.googleapis.com/drive/v3/files/${folder.id}/permissions`,\n            headers: {},\n            body: JSON.stringify({ role: 'reader', type: 'anyone' }),\n        });\n        return folder;\n    }\n    async getMediaFolderId() {\n        if (this.folderCache['MEDIAs']) {\n            return this.folderCache['MEDIAs'];\n        }\n        const rootFolders = await this.findFolders();\n        let credentialsFolder = rootFolders.find((f) => f.name === 'Credentials');\n        if (!credentialsFolder) {\n            credentialsFolder = await this.createFolder({ folderName: 'Credentials', parentFolderId: 'root' });\n        }\n        const credentialsFolderId = credentialsFolder.id;\n        const subfolders = await this.findFolders(credentialsFolder.id);\n        let mediasFolder = subfolders.find((f) => f.name === 'MEDIAs');\n        if (!mediasFolder) {\n            mediasFolder = await this.createFolder({ folderName: 'MEDIAs', parentFolderId: credentialsFolderId });\n        }\n        const mediasFolderId = mediasFolder.id;\n        this.folderCache['MEDIAs'] = mediasFolderId;\n        return mediasFolderId;\n    }\n    async uploadBinaryFile({ file }) {\n        try {\n            const accessToken = this.accessToken; // Ensure access token is available\n            if (!accessToken) {\n                throw new Error('Missing Google OAuth access token.');\n            }\n            const folderId = await this.getMediaFolderId(); // Ensure folderId is correct\n            // ✅ Correct metadata for Google Drive API\n            const metadata = {\n                name: file.name,\n                mimeType: file.type,\n                parents: [folderId], // Store in the correct folder\n            };\n            // ✅ Create FormData for multipart upload\n            const formData = new FormData();\n            formData.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n            formData.append('file', file);\n            // ✅ Correct Google Drive Upload URL\n            const url = `https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,parents`;\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    Authorization: `Bearer ${accessToken}`, // ✅ Include valid OAuth token\n                },\n                body: formData,\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(`Google Drive Upload Error: ${data.error?.message || 'Unknown error'}`);\n            }\n            console.log('✅ File uploaded successfully:', data);\n            return data; // Returns the uploaded file ID and parents\n        }\n        catch (error) {\n            console.error('❌ Error uploading file to Google Drive:', error);\n            throw error;\n        }\n    }\n    async saveFile({ data, folderId }) {\n        console.log('🚀 ~ GoogleDriveStorage ~ saveFile ~ data:', data);\n        try {\n            if (!folderId) {\n                throw new Error('Folder ID is required to save a file.');\n            }\n            const fileMetadata = {\n                name: data.fileName || data.name + '.json' || 0 || 0,\n                parents: [folderId],\n                mimeType: data.mimeType || 'application/json',\n            };\n            const fileBlob = new Blob([JSON.stringify(data)], { type: 'application/json' });\n            const formData = new FormData();\n            formData.append('metadata', new Blob([JSON.stringify(fileMetadata)], { type: 'application/json' }));\n            formData.append('file', fileBlob);\n            const file = await this.fetcher({\n                method: 'POST',\n                headers: {},\n                body: formData,\n                url: `https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,parents`,\n            });\n            // Set public read permissions\n            await this.fetcher({\n                method: 'POST',\n                url: `https://www.googleapis.com/drive/v3/files/${file.id}/permissions`,\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    role: 'reader',\n                    type: 'anyone',\n                }),\n            });\n            console.log(`File uploaded successfully: ${file.id}`);\n            return file;\n        }\n        catch (error) {\n            console.error('Error in saveFile:', error);\n            throw error;\n        }\n    }\n    /**\n     * Get file from google drive by id\n     * @param id\n     * @returns file content\n     */\n    async retrieve(id) {\n        const dataUrl = `https://www.googleapis.com/drive/v3/files/${id}?alt=media`;\n        try {\n            const dataResponse = await fetch(dataUrl, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.accessToken}`,\n                },\n            });\n            if (!dataResponse.ok) {\n                const errorData = await dataResponse.json();\n                console.error(`Failed to retrieve file data for ID ${id}:`, errorData);\n                return null;\n            }\n            const contentType = dataResponse.headers.get('Content-Type');\n            let fileData;\n            if (contentType?.includes('application/json')) {\n                fileData = await dataResponse.json();\n            }\n            else if (contentType?.includes('image') ||\n                contentType?.includes('video') ||\n                contentType?.includes('audio') ||\n                contentType?.includes('application/octet-stream') ||\n                contentType?.includes('application/pdf') ||\n                contentType?.includes('application/msword') ||\n                contentType?.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||\n                contentType?.includes('application/vnd.ms-excel') ||\n                contentType?.includes('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')) {\n                fileData = await dataResponse.blob();\n            }\n            else {\n                fileData = await dataResponse.arrayBuffer();\n            }\n            return { data: fileData, id: id };\n        }\n        catch (error) {\n            console.error(`Error retrieving file with ID ${id}:`, error.message);\n            return null;\n        }\n    }\n    /**\n     * Get folder by folderId, if folderId == null you will have them all\n     * @param folderId [Optional]\n     * @returns\n     */\n    async findFolders(folderId) {\n        const cacheKey = folderId || 'root';\n        if (this.folderCache[cacheKey]) {\n            return this.folderCache[cacheKey];\n        }\n        const query = folderId\n            ? `'${folderId}' in parents and mimeType='application/vnd.google-apps.folder'`\n            : `'root' in parents and mimeType='application/vnd.google-apps.folder'`;\n        const folders = await this.searchFiles(query);\n        this.folderCache[cacheKey] = folders;\n        return folders;\n    }\n    /**\n     * Get all files content for the specified type ('KEYPAIRs' | 'VCs' | 'SESSIONs' | 'DIDs' | 'RECOMMENDATIONs')\n     * @param type\n     * @returns\n     */\n    async getAllFilesByType(type) {\n        try {\n            if (!this.folderCache['Credentials']) {\n                const rootFolders = await this.findFolders();\n                this.folderCache['Credentials'] = rootFolders;\n            }\n            const credentialsFolder = this.folderCache['Credentials'].find((f) => f.name === 'Credentials');\n            if (!credentialsFolder) {\n                console.error('Credentials folder not found.');\n                return [];\n            }\n            if (type === 'VCs') {\n                if (!this.folderCache['VCs']) {\n                    const vcSubfolder = await this.findFolders(credentialsFolder.id);\n                    const vcsFolder = vcSubfolder.find((f) => f.name === 'VCs');\n                    const vcSubFolders = await this.findFolders(vcsFolder.id);\n                    this.folderCache['VCs'] = vcSubFolders.filter((folder) => folder.name.startsWith('VC-'));\n                }\n                const vcSubfolders = this.folderCache['VCs'];\n                if (!vcSubfolders.length) {\n                    console.error(`No subfolders found for type: ${type}`);\n                    return [];\n                }\n                const allFilesNested = await Promise.all(vcSubfolders.map(async (folder) => await this.findFilesUnderFolder(folder.id)));\n                const allVcJsonFiles = allFilesNested.flat().filter((file) => file.mimeType === 'application/json');\n                const fileContentsResults = await Promise.allSettled(allVcJsonFiles.map((file) => this.retrieve(file.id)));\n                const validFileContents = fileContentsResults.filter((result) => result.status === 'fulfilled').map((result) => result.value);\n                return validFileContents.filter((file) => file.data.fileName !== 'RELATIONS');\n            }\n            if (!this.folderCache[type]) {\n                const subfolders = await this.findFolders(credentialsFolder.id);\n                const targetFolder = subfolders.find((f) => f.name === type);\n                this.folderCache[type] = targetFolder ? targetFolder.id : null;\n            }\n            const targetFolderId = this.folderCache[type];\n            if (!targetFolderId) {\n                console.error(`Folder for type ${type} not found.`);\n                return [];\n            }\n            const filesResponse = await this.fetcher({\n                method: 'GET',\n                headers: {},\n                url: `https://www.googleapis.com/drive/v3/files?q='${targetFolderId}' in parents and trashed=false&fields=files(id,name,mimeType)`,\n            });\n            const files = filesResponse.files || [];\n            const fileContents = await Promise.allSettled(files.map((file) => this.retrieve(file.id)));\n            console.log('🚀 ~ GoogleDriveStorage ~ getAllFilesByType ~ fileContents:', fileContents);\n            return fileContents.filter((res) => res.status === 'fulfilled').map((res) => res.value);\n        }\n        catch (error) {\n            console.error(`Error getting files of type ${type}:`, error);\n            return [];\n        }\n    }\n    /**\n     * Update the name of a file in Google Drive\n     * @param fileId - The ID of the file to update\n     * @param newFileName - The new name for the file\n     * @returns The updated file metadata, including the new name\n     */\n    async updateFileName(fileId, newFileName) {\n        try {\n            const metadata = { name: newFileName };\n            const updatedFile = await this.fetcher({\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(metadata),\n                url: `https://www.googleapis.com/drive/v3/files/${fileId}`,\n            });\n            console.log('File name updated successfully:', updatedFile.name);\n            return updatedFile;\n        }\n        catch (error) {\n            console.error('Error updating file name:', error.message);\n            throw error;\n        }\n    }\n    async findFileByName(name) {\n        const rootFolders = await this.findFolders();\n        const credentialsFolderId = rootFolders.find((f) => f.name === 'Credentials')?.id;\n        if (!credentialsFolderId)\n            throw new Error('Credentials folder not found');\n        const files = await this.searchFiles(`'${credentialsFolderId}' in parents and name='${name}'`);\n        return files[0];\n    }\n    async findFilesUnderFolder(folderId) {\n        if (!folderId)\n            throw new Error('Folder ID is required');\n        const files = await this.searchFiles(`'${folderId}' in parents`);\n        if (files.length === 0) {\n            console.log('No files found in the folder.');\n            return [];\n        }\n        const filesWithContent = await Promise.all(files.map(async (file) => {\n            try {\n                const content = await this.getFileContent(file.id);\n                return { ...file, content };\n            }\n            catch (error) {\n                console.error(`Error fetching content for file \"${file.name}\" (ID: ${file.id}):`, error);\n                return { ...file, content: null };\n            }\n        }));\n        return filesWithContent;\n    }\n    async updateFileData(fileId, data) {\n        try {\n            const updateUrl = `https://www.googleapis.com/drive/v3/files/${fileId}`;\n            const updatedFile = await this.fetcher({\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ name: data.fileName }),\n                url: updateUrl,\n            });\n            console.log('✅ File renamed successfully:', updatedFile);\n            return updatedFile;\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    async getFileParents(fileId) {\n        const file = await this.fetcher({\n            method: 'GET',\n            headers: {},\n            url: `https://www.googleapis.com/drive/v3/files/${fileId}?fields=parents`,\n        });\n        console.log('FILE: ', file);\n        return file.parents;\n    }\n    async updateRelationsFile({ relationsFileId, recommendationFileId }) {\n        const relationsFileContent = await this.retrieve(relationsFileId);\n        const relationsData = relationsFileContent.data.body ? JSON.parse(relationsFileContent.data.body) : relationsFileContent.data;\n        relationsData.recommendations.push(recommendationFileId);\n        const updatedContent = JSON.stringify(relationsData);\n        const updateResponse = await this.fetcher({\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' },\n            body: updatedContent,\n            url: `https://www.googleapis.com/upload/drive/v3/files/${relationsFileId}?uploadType=media`,\n        });\n        this.updateFileIdsJson(relationsFileId);\n        return updateResponse;\n    }\n    async createRelationsFile({ vcFolderId }) {\n        const files = await this.findFilesUnderFolder(vcFolderId);\n        const vcFile = files.find((file) => file.name === 'VC');\n        const vcContent = await this.getFileContent(vcFile.id);\n        console.log('🚀 ~ GoogleDriveStorage ~ createRelationsFile ~ vcContent:', vcContent);\n        const subject = JSON.parse(vcContent.body).credentialSubject;\n        console.log('🚀 ~ GoogleDriveStorage ~ createRelationsFile ~ subject:', subject);\n        const relationsFile = await this.saveFile({\n            data: {\n                fileName: 'RELATIONS',\n                mimeType: 'application/json',\n                body: JSON.stringify({\n                    vc: {\n                        fileId: vcContent.id,\n                        subject,\n                    },\n                    recommendations: [],\n                }),\n            },\n            folderId: vcFolderId,\n        });\n        await this.updateFileIdsJson(relationsFile.id);\n        return relationsFile;\n    }\n    async updateResumeRelation({ authorFolderId, draftFileId, signedFileId, }) {\n        try {\n            const relationFileName = 'relations.json';\n            // Step 1: Check if `relations.json` exists in RESUMES_AUTHOR/\n            const existingRelationFiles = await this.searchFiles(`name='${relationFileName}' and '${authorFolderId}' in parents`);\n            let relationFileId = null;\n            let existingRelations = {};\n            if (existingRelationFiles.length > 0) {\n                relationFileId = existingRelationFiles[0].id;\n                existingRelations = await this.getFileContent(relationFileId);\n            }\n            else {\n                console.log('relations.json does not exist. Will create a new one.');\n            }\n            // Step 2: Update relations object\n            existingRelations[draftFileId] = signedFileId;\n            // Step 3: Create or update the file on Drive\n            const fileBlob = new Blob([JSON.stringify(existingRelations, null, 2)], {\n                type: 'application/json',\n            });\n            const formData = new FormData();\n            const metadata = {\n                name: relationFileName,\n                parents: [authorFolderId],\n                mimeType: 'application/json',\n            };\n            formData.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n            formData.append('file', fileBlob);\n            let uploadedFile;\n            if (relationFileId) {\n                // Update existing file\n                uploadedFile = await this.fetcher({\n                    method: 'PATCH',\n                    headers: {},\n                    body: formData,\n                    url: `https://www.googleapis.com/upload/drive/v3/files/${relationFileId}?uploadType=multipart&fields=id,parents`,\n                });\n            }\n            else {\n                // Create new file\n                uploadedFile = await this.fetcher({\n                    method: 'POST',\n                    headers: {},\n                    body: formData,\n                    url: `https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,parents`,\n                });\n            }\n            console.log(`✅ Resume relation updated. File ID: ${uploadedFile.id}`);\n            return uploadedFile;\n        }\n        catch (error) {\n            console.error('❌ Failed to update resume relation:', error);\n            throw error;\n        }\n    }\n    /**\n     * Delete file by id\n     * @param id\n     * @returns\n     */\n    async delete(id) {\n        try {\n            const response = await this.fetcher({\n                method: 'DELETE',\n                headers: {},\n                url: `https://www.googleapis.com/drive/v3/files/${id}`,\n            });\n            console.log('File deleted:', response);\n            return response;\n        }\n        catch (error) {\n            console.error('Error deleting file:', error);\n            return null;\n        }\n    }\n    async update(fileId, data) {\n        const metadata = {\n            name: data.fileName || 'resume.json',\n            mimeType: 'application/json',\n        };\n        const uploadUrl = `https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=multipart`;\n        const formData = new FormData();\n        formData.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n        formData.append('file', new Blob([JSON.stringify(data.body)], { type: 'application/json' }));\n        try {\n            const response = await this.fetcher({\n                method: 'PATCH',\n                headers: {},\n                body: formData,\n                url: `${uploadUrl}&fields=id,name,mimeType`,\n            });\n            console.log('✅ File updated successfully:', response);\n            return response;\n        }\n        catch (error) {\n            console.error('❌ Error updating Google Drive file:', error);\n            throw error;\n        }\n    }\n    async getFileIdsFromAppDataFolder() {\n        try {\n            const constructUrl = () => {\n                const baseUrl = 'https://www.googleapis.com/drive/v3/files';\n                const queryParams = new URLSearchParams({\n                    spaces: 'appDataFolder',\n                    q: \"name='file_ids.json'\",\n                    fields: 'files(id)',\n                });\n                return `${baseUrl}?${queryParams.toString()}`;\n            };\n            // Step 1: Search for the file_ids.json file in the appDataFolder\n            const response = await this.fetcher({\n                method: 'GET',\n                headers: {},\n                url: constructUrl(),\n            });\n            console.log(':  GoogleDriveStorage  getFileIdsFromAppDataFolder  response', response);\n            // Step 2: Check if the file exists\n            if (!response.files || response.files.length === 0) {\n                console.log('No file_ids.json found in appDataFolder.');\n                return [];\n            }\n            // Step 3: Get the file ID of file_ids.json\n            const fileId = response.files[0].id;\n            console.log(':  GoogleDriveStorage  getFileIdsFromAppDataFolder  fileId', fileId);\n            // Step 4: Fetch the content of file_ids.json\n            const fileContent = await this.fetcher({\n                method: 'GET',\n                headers: {},\n                url: `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,\n            });\n            console.log(':  GoogleDriveStorage  getFileIdsFromAppDataFolder  fileContent', fileContent);\n            // Step 5: Parse the file content (array of file IDs)\n            const fileIds = fileContent;\n            console.log(':  GoogleDriveStorage  getFileIdsFromAppDataFolder  fileIds', fileIds);\n            return fileIds;\n        }\n        catch (error) {\n            console.error('Error fetching file IDs from appDataFolder:', error.message);\n            return [];\n        }\n    }\n    async getAllFilesData() {\n        try {\n            // Step 1: Get the file IDs from appDataFolder\n            const fileIds = await this.getFileIdsFromAppDataFolder();\n            if (fileIds.length === 0) {\n                console.log('No files found.');\n                return [];\n            }\n            // Step 2: Return the array of file IDs\n            return fileIds;\n        }\n        catch (error) {\n            console.error('Error fetching all files data:', error.message);\n            return [];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/models/GoogleDriveStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/models/Resume.js":
/*!********************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/models/Resume.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resume: () => (/* binding */ Resume),\n/* harmony export */   StorageHandler: () => (/* binding */ StorageHandler),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   resumeFolderTypes: () => (/* binding */ resumeFolderTypes)\n/* harmony export */ });\nconst resumeFolderTypes = {\n    root: 'RESUMES_AUTHOR',\n    nonSigned: 'NON_SIGNED_RESUMES',\n    signed: 'SIGNED_RESUMES',\n};\nclass StorageHandler {\n    storage;\n    folderCreationPromises = {};\n    createdFolders = {};\n    constructor(storage) {\n        this.storage = storage;\n    }\n    async getOrCreateFolder(folderName, parentId) {\n        const cacheKey = `${parentId}_${folderName}`;\n        // Check our local cache first (this is separate from the storage's cache)\n        if (this.createdFolders[cacheKey]) {\n            console.log(`Using cached folder ${folderName} (${this.createdFolders[cacheKey].id}) under ${parentId}`);\n            return this.createdFolders[cacheKey];\n        }\n        // If there's an existing promise for this folder, wait for it\n        if (this.folderCreationPromises[cacheKey]) {\n            console.log(`Waiting for existing folder creation: ${folderName} under ${parentId}`);\n            return this.folderCreationPromises[cacheKey];\n        }\n        // Create a new promise for this folder operation\n        this.folderCreationPromises[cacheKey] = (async () => {\n            try {\n                // Double-check if folder exists\n                console.log(`Searching for folder ${folderName} under ${parentId}`);\n                const folders = await this.storage.findFolders(parentId);\n                let folder = folders.find((f) => f.name === folderName);\n                if (folder) {\n                    console.log(`Found existing folder ${folderName} (${folder.id}) under ${parentId}`);\n                }\n                else {\n                    console.log(`Creating folder ${folderName} under ${parentId} (no existing folder found)`);\n                    folder = await this.storage.createFolder({\n                        folderName,\n                        parentFolderId: parentId,\n                    });\n                    console.log(`Created folder ${folderName} (${folder.id}) under ${parentId}`);\n                }\n                // Store in our local cache\n                this.createdFolders[cacheKey] = folder;\n                return folder;\n            }\n            catch (error) {\n                console.error(`Error in getOrCreateFolder(${folderName}, ${parentId}):`, error);\n                throw error;\n            }\n            finally {\n                // Clean up the promise after completion\n                delete this.folderCreationPromises[cacheKey];\n            }\n        })();\n        return this.folderCreationPromises[cacheKey];\n    }\n    async findFilesInFolder(folderName) {\n        const folders = await this.storage.findFolders();\n        const folder = folders.find((folder) => folder.name === folderName);\n        if (!folder) {\n            throw new Error(`${folderName} folder not found`);\n        }\n        return this.storage.findFilesUnderFolder(folder.id);\n    }\n}\nclass Resume extends StorageHandler {\n    constructor(storage) {\n        super(storage);\n    }\n    async saveResume({ resume, type }) {\n        try {\n            let rootFolder = await this.getOrCreateFolder(resumeFolderTypes.root, 'root');\n            console.log('🚀 ~ Resume ~ saveResume ~ rootFolder:', rootFolder);\n            // Get or create the subfolder\n            const subFolderName = type === 'sign' ? resumeFolderTypes.signed : resumeFolderTypes.nonSigned;\n            const subFolder = await this.getOrCreateFolder(subFolderName, rootFolder.id);\n            // Save the file in the subfolder\n            const savedResume = await this.storage.saveFile({\n                folderId: subFolder.id, // Ensure this points to the subfolder\n                data: resume,\n            });\n            return savedResume;\n        }\n        catch (error) {\n            throw new Error(`Error while saving ${type} resume: ${error.message}`);\n        }\n    }\n    async find() {\n        try {\n            const signedResumes = await this.getSignedResumes();\n            const nonSignedResumes = await this.getNonSignedResumes();\n            return {\n                signed: signedResumes,\n                nonSigned: nonSignedResumes,\n            };\n        }\n        catch (error) {\n            throw new Error('Error while fetching resume: ' + error.message);\n        }\n    }\n    async getSignedResumes() {\n        try {\n            // Find the root folder first\n            const rootFolder = await this.getOrCreateFolder(resumeFolderTypes.root, 'root');\n            // Find or create the signed resumes folder\n            const signedFolder = await this.getOrCreateFolder(resumeFolderTypes.signed, rootFolder.id);\n            // Retrieve all files from the signed folder\n            const files = await this.storage.findFilesUnderFolder(signedFolder.id);\n            return files;\n        }\n        catch (error) {\n            throw new Error('Error while fetching signed resumes: ' + error.message);\n        }\n    }\n    async getNonSignedResumes() {\n        try {\n            // Find the root folder first\n            const rootFolder = await this.getOrCreateFolder(resumeFolderTypes.root, 'root');\n            // Find or create the non-signed resumes folder\n            const nonSignedFolder = await this.getOrCreateFolder(resumeFolderTypes.nonSigned, rootFolder.id);\n            // Retrieve all files from the non-signed folder\n            const files = await this.storage.findFilesUnderFolder(nonSignedFolder.id);\n            return files;\n        }\n        catch (error) {\n            throw new Error('Error while fetching non-signed resumes: ' + error.message);\n        }\n    }\n    async saveResumeDraft(data, signedResumeId) {\n        try {\n            const fileName = `FinalDraft_${signedResumeId}.json`;\n            // 1. Find or create root and NON_SIGNED_RESUMES folder\n            const rootFolder = await this.getOrCreateFolder(resumeFolderTypes.root, 'root');\n            const nonSignedFolder = await this.getOrCreateFolder(resumeFolderTypes.nonSigned, rootFolder.id);\n            const dataWithFileName = {\n                ...data,\n                fileName: `FinalDraft_${signedResumeId}.json`,\n            };\n            // Save the file\n            const savedDraft = await this.storage.saveFile({\n                data: dataWithFileName,\n                folderId: nonSignedFolder.id,\n            });\n            console.log(`✅ Draft saved as ${fileName}`);\n            return savedDraft;\n        }\n        catch (error) {\n            console.error('❌ Error saving resume draft:', error);\n            throw new Error('Failed to save resume draft: ' + error.message);\n        }\n    }\n    isResumeFolderExist() { }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Resume);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/models/Resume.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/models/ResumeVC.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/models/ResumeVC.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResumeVC: () => (/* binding */ ResumeVC)\n/* harmony export */ });\n/* harmony import */ var _digitalbazaar_ed25519_signature_2020__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @digitalbazaar/ed25519-signature-2020 */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-signature-2020/lib/index.js\");\n/* harmony import */ var _utils_digitalbazaar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/digitalbazaar.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/digitalbazaar.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @digitalbazaar/vc */ \"(ssr)/./node_modules/@digitalbazaar/vc/lib/index.js\");\n/* harmony import */ var _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @digitalbazaar/ed25519-verification-key-2020 */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js\");\n/* harmony import */ var _utils_credential_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/credential.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/credential.js\");\n/* harmony import */ var _utils_context_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/context.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/context.js\");\n\n\n\n\n\n\n\nclass ResumeVC {\n    async sign({ formData, issuerDid, keyPair }) {\n        const unsignedCredential = this.generateUnsignedCredential({ formData, issuerDid });\n        const suite = new _digitalbazaar_ed25519_signature_2020__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature2020({\n            key: new _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_3__.Ed25519VerificationKey2020(keyPair), // Ensure proper initialization\n            verificationMethod: keyPair.id,\n        });\n        try {\n            const signedVC = await _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__.issue({\n                credential: unsignedCredential,\n                suite,\n                documentLoader: _utils_digitalbazaar_js__WEBPACK_IMPORTED_MODULE_1__.customDocumentLoader,\n            });\n            console.log('Signed VC:', signedVC);\n        }\n        catch (error) {\n            console.error('Error signing VC:', error.message);\n            if (error.details) {\n                console.error('Error details:', JSON.stringify(error.details, null, 2));\n            }\n            throw error;\n        }\n        return unsignedCredential;\n    }\n    generateUnsignedCredential({ formData, issuerDid }) {\n        const unsignedResumeVC = {\n            '@context': ['https://www.w3.org/2018/credentials/v1', _utils_context_js__WEBPACK_IMPORTED_MODULE_5__.inlineResumeContext['@context']],\n            id: `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n            type: ['VerifiableCredential', 'LERRSCredential'],\n            issuer: issuerDid,\n            issuanceDate: new Date().toISOString(),\n            credentialSubject: {\n                type: 'Resume',\n                person: {\n                    name: {\n                        formattedName: formData.name || '',\n                    },\n                    primaryLanguage: 'en',\n                    contact: {\n                        fullName: formData.contact.fullName || '',\n                        email: formData.contact.email || '',\n                        phone: formData.contact.phone || '',\n                        location: {\n                            street: formData.contact.location.street || '',\n                            city: formData.contact.location.city || '',\n                            state: formData.contact.location.state || '',\n                            country: formData.contact.location.country || '',\n                            postalCode: formData.contact.location.postalCode || '',\n                        },\n                        socialLinks: {\n                            linkedin: formData.contact.socialLinks.linkedin || '',\n                            github: formData.contact.socialLinks.github || '',\n                            portfolio: formData.contact.socialLinks.portfolio || '',\n                            twitter: formData.contact.socialLinks.twitter || '',\n                        },\n                    },\n                },\n                narrative: {\n                    text: formData.summary || '',\n                },\n                employmentHistory: formData.experience.items.map((exp) => ({\n                    id: exp.id ? `urn:uuid${exp.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`, // Ensure each entry has an ID\n                    organization: {\n                        tradeName: exp.company || '',\n                    },\n                    title: exp.title || '',\n                    description: exp.description || '',\n                    duration: exp.duration || '',\n                    startDate: exp.startDate || '',\n                    endDate: exp.endDate || '',\n                    stillEmployed: exp.stillEmployed || false,\n                    verificationStatus: exp.verificationStatus || 'unverified',\n                    credentialLink: exp.credentialLink || null,\n                    verifiedCredentials: exp.verifiedCredentials || [],\n                })),\n                educationAndLearning: formData.education.items.map((edu) => ({\n                    id: edu.id ? `urn:uuid${edu.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n                    institution: edu.institution || '',\n                    degree: edu.degree || '',\n                    fieldOfStudy: edu.fieldOfStudy || '',\n                    duration: edu.duration || '',\n                    startDate: edu.startDate || '',\n                    endDate: edu.endDate || '',\n                    verificationStatus: edu.verificationStatus || 'unverified',\n                    credentialLink: edu.credentialLink || null,\n                    verifiedCredentials: edu.verifiedCredentials || [],\n                })),\n                skills: formData.skills.items.map((skill) => ({\n                    id: skill.id ? `urn:uuid${skill.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n                    name: skill.name || '',\n                    verificationStatus: skill.verificationStatus || 'unverified',\n                    credentialLink: skill.credentialLink || null,\n                    verifiedCredentials: skill.verifiedCredentials || [],\n                })),\n                certifications: formData.certifications.items.map((cert) => ({\n                    id: cert.id ? `urn:uuid:${cert.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n                    name: cert.name || '',\n                    issuer: cert.issuer || '',\n                    date: cert.date || '',\n                    url: cert.url || '',\n                    verificationStatus: cert.verificationStatus || 'unverified',\n                    credentialLink: cert.credentialLink || null,\n                    verifiedCredentials: cert.verifiedCredentials || [],\n                })),\n                projects: formData.projects.items.map((proj) => ({\n                    id: proj.id ? `urn:uuid${proj.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n                    name: proj.name || '',\n                    description: proj.description || '',\n                    url: proj.url || '',\n                    duration: proj.duration || '',\n                    startDate: proj.startDate || '',\n                    endDate: proj.endDate || '',\n                    verificationStatus: proj.verificationStatus || 'unverified',\n                    credentialLink: proj.credentialLink || null,\n                    verifiedCredentials: proj.verifiedCredentials || [],\n                })),\n                professionalAffiliations: formData.professionalAffiliations.items.map((aff) => ({\n                    id: aff.id ? `urn:uuid:${aff.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n                    name: aff.name || '',\n                    organization: aff.organization || '',\n                    startDate: aff.startDate || '',\n                    endDate: aff.endDate || '',\n                    activeAffiliation: aff.activeAffiliation || false,\n                    duration: aff.duration || '',\n                    verificationStatus: aff.verificationStatus || 'unverified',\n                    credentialLink: aff.credentialLink || '',\n                    selectedCredentials: aff.selectedCredentials || [],\n                })),\n                volunteerWork: formData.volunteerWork.items.map((vol) => ({\n                    id: vol.id ? `urn:uuid:${vol.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n                    role: vol.role || '',\n                    organization: vol.organization || '',\n                    location: vol.location || '',\n                    startDate: vol.startDate || '',\n                    endDate: vol.endDate || '',\n                    currentlyVolunteering: vol.currentlyVolunteering || false,\n                    description: vol.description || '',\n                    duration: vol.duration || '',\n                    verificationStatus: vol.verificationStatus || 'unverified',\n                    credentialLink: vol.credentialLink || '',\n                    selectedCredentials: vol.selectedCredentials || [],\n                })),\n                hobbiesAndInterests: formData.hobbiesAndInterests || [],\n                languages: formData.languages.items.map((lang) => ({\n                    id: lang.id ? `urn:uuid:${lang.id}` : `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])()}`,\n                    name: lang.name || '',\n                    proficiency: lang.proficiency || '',\n                })),\n            },\n        };\n        console.log('🚀 ~ ResumeVC ~ generateUnsignedCredential ~ unsignedResumeVC:', JSON.stringify(unsignedResumeVC));\n        return unsignedResumeVC;\n    }\n    generateKeyPair = async (address) => {\n        // Generate the key pair using the library's method\n        const keyPair = await _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_3__.Ed25519VerificationKey2020.generate();\n        // Configure key pair attributes\n        const a = address || keyPair.publicKeyMultibase;\n        keyPair.controller = `did:key:${a}`;\n        keyPair.id = `${keyPair.controller}#${a}`;\n        keyPair.revoked = false;\n        // The `signer` is already provided by the `Ed25519VerificationKey2020` instance\n        return keyPair;\n    };\n    /**\n     * Create a new DID with Digital Bazaar's Ed25519VerificationKey2020 key pair.\n     * @returns {Promise<{didDocument: object, keyPair: object}>} The created DID document and key pair.\n     * @throws Will throw an error if DID creation fails.\n     */\n    async createDID({ keyPair }) {\n        try {\n            const didDocument = await (0,_utils_credential_js__WEBPACK_IMPORTED_MODULE_4__.generateDIDSchema)(keyPair);\n            return didDocument;\n        }\n        catch (error) {\n            console.error('Error creating DID:', error);\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/models/ResumeVC.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/context.js":
/*!********************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/utils/context.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inlineResumeContext: () => (/* binding */ inlineResumeContext),\n/* harmony export */   localED25519Context: () => (/* binding */ localED25519Context),\n/* harmony export */   localOBContext: () => (/* binding */ localOBContext)\n/* harmony export */ });\nconst inlineResumeContext = {\n    '@context': {\n        '@vocab': 'https://schema.hropenstandards.org/4.4/',\n        // Basic details\n        name: 'https://schema.org/name',\n        formattedName: 'https://schema.org/formattedName',\n        primaryLanguage: 'https://schema.org/primaryLanguage',\n        // Narrative\n        narrative: 'https://schema.org/narrative',\n        text: 'https://schema.org/text',\n        // Contact Information\n        contact: 'https://schema.org/ContactPoint',\n        email: 'https://schema.org/email',\n        phone: 'https://schema.org/telephone',\n        location: 'https://schema.org/address',\n        street: 'https://schema.org/streetAddress',\n        city: 'https://schema.org/addressLocality',\n        state: 'https://schema.org/addressRegion',\n        country: 'https://schema.org/addressCountry',\n        postalCode: 'https://schema.org/postalCode',\n        socialLinks: {\n            '@id': 'https://schema.org/URL',\n            '@container': '@set',\n        },\n        linkedin: 'https://schema.org/sameAs',\n        github: 'https://schema.org/sameAs',\n        portfolio: 'https://schema.org/url',\n        twitter: 'https://schema.org/sameAs',\n        // Experience & Employment History\n        experience: {\n            '@id': 'https://schema.org/WorkExperience',\n            '@container': '@list',\n        },\n        employmentHistory: {\n            '@id': 'https://schema.org/employmentHistory',\n            '@container': '@list',\n        },\n        company: 'https://schema.org/worksFor',\n        position: 'https://schema.org/jobTitle',\n        description: 'https://schema.org/description',\n        startDate: 'https://schema.org/startDate',\n        endDate: 'https://schema.org/endDate',\n        stillEmployed: 'https://schema.org/Boolean',\n        duration: 'https://schema.org/temporalCoverage',\n        // Skills\n        skills: {\n            '@id': 'https://schema.org/skills',\n            '@container': '@list',\n        },\n        // Education\n        educationAndLearning: {\n            '@id': 'https://schema.org/EducationalOccupationalProgram',\n            '@container': '@list',\n        },\n        degree: 'https://schema.org/educationalCredentialAwarded',\n        fieldOfStudy: 'https://schema.org/studyField',\n        institution: 'https://schema.org/educationalInstitution',\n        year: 'https://schema.org/year',\n        // Awards\n        awards: {\n            '@id': 'https://schema.org/Achievement',\n            '@container': '@list',\n        },\n        title: 'https://schema.org/name',\n        issuer: 'https://schema.org/issuer',\n        date: 'https://schema.org/dateReceived',\n        // Publications\n        publications: {\n            '@id': 'https://schema.org/CreativeWork',\n            '@container': '@list',\n        },\n        publisher: 'https://schema.org/publisher',\n        url: 'https://schema.org/url',\n        // Certifications\n        certifications: {\n            '@id': 'https://schema.org/EducationalOccupationalCredential',\n            '@container': '@list',\n        },\n        // Professional Affiliations\n        professionalAffiliations: {\n            '@id': 'https://schema.org/OrganizationRole',\n            '@container': '@list',\n        },\n        organization: 'https://schema.org/memberOf',\n        role: 'https://schema.org/jobTitle',\n        activeAffiliation: 'https://schema.org/Boolean',\n        // Volunteer Work\n        volunteerWork: {\n            '@id': 'https://schema.org/VolunteerRole',\n            '@container': '@list',\n        },\n        currentlyVolunteering: 'https://schema.org/Boolean',\n        // Hobbies and Interests\n        hobbiesAndInterests: {\n            '@id': 'https://schema.org/knowsAbout',\n            '@container': '@set',\n        },\n        // Languages\n        languages: {\n            '@id': 'https://schema.org/knowsLanguage',\n            '@container': '@list',\n        },\n        language: 'https://schema.org/inLanguage',\n        proficiency: 'https://schema.org/proficiencyLevel',\n        // Testimonials\n        testimonials: {\n            '@id': 'https://schema.org/Review',\n            '@container': '@list',\n        },\n        author: 'https://schema.org/author',\n        // Projects\n        projects: {\n            '@id': 'https://schema.org/Project',\n            '@container': '@list',\n        },\n        // Issuance Information\n        issuanceDate: 'https://schema.org/issuanceDate',\n        credentialSubject: 'https://schema.org/credentialSubject',\n        person: 'https://schema.org/Person',\n        Resume: 'https://schema.hropenstandards.org/4.4#Resume',\n    },\n};\nconst localOBContext = {\n    '@context': {\n        '@protected': true,\n        id: '@id',\n        type: '@type',\n        OpenBadgeCredential: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#OpenBadgeCredential',\n        },\n        Achievement: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Achievement',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                achievementType: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#achievementType',\n                },\n                alignment: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#alignment',\n                    '@container': '@set',\n                },\n                creator: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#creator',\n                },\n                creditsAvailable: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#creditsAvailable',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#float',\n                },\n                criteria: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Criteria',\n                    '@type': '@id',\n                },\n                fieldOfStudy: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#fieldOfStudy',\n                },\n                humanCode: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#humanCode',\n                },\n                image: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#image',\n                    '@type': '@id',\n                },\n                otherIdentifier: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#otherIdentifier',\n                    '@container': '@set',\n                },\n                related: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#related',\n                    '@container': '@set',\n                },\n                resultDescription: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#resultDescription',\n                    '@container': '@set',\n                },\n                specialization: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#specialization',\n                },\n                tag: {\n                    '@id': 'https://schema.org/keywords',\n                    '@container': '@set',\n                },\n                version: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#version',\n                },\n                inLanguage: {\n                    '@id': 'https://schema.org/inLanguage',\n                },\n            },\n        },\n        AchievementCredential: {\n            '@id': 'OpenBadgeCredential',\n        },\n        AchievementSubject: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#AchievementSubject',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                achievement: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#achievement',\n                },\n                activityEndDate: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#activityEndDate',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#date',\n                },\n                activityStartDate: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#activityStartDate',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#date',\n                },\n                creditsEarned: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#creditsEarned',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#float',\n                },\n                identifier: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#identifier',\n                    '@container': '@set',\n                },\n                image: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#image',\n                    '@type': '@id',\n                },\n                licenseNumber: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#licenseNumber',\n                },\n                result: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#result',\n                    '@container': '@set',\n                },\n                role: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#role',\n                },\n                source: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#source',\n                    '@type': '@id',\n                },\n                term: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#term',\n                },\n            },\n        },\n        Address: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Address',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                addressCountry: {\n                    '@id': 'https://schema.org/addressCountry',\n                },\n                addressCountryCode: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#CountryCode',\n                },\n                addressLocality: {\n                    '@id': 'https://schema.org/addressLocality',\n                },\n                addressRegion: {\n                    '@id': 'https://schema.org/addressRegion',\n                },\n                geo: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#GeoCoordinates',\n                },\n                postOfficeBoxNumber: {\n                    '@id': 'https://schema.org/postOfficeBoxNumber',\n                },\n                postalCode: {\n                    '@id': 'https://schema.org/postalCode',\n                },\n                streetAddress: {\n                    '@id': 'https://schema.org/streetAddress',\n                },\n            },\n        },\n        Alignment: {\n            '@id': 'https://schema.org/AlignmentObject',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                targetCode: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#targetCode',\n                },\n                targetDescription: {\n                    '@id': 'https://schema.org/targetDescription',\n                },\n                targetFramework: {\n                    '@id': 'https://schema.org/targetFramework',\n                },\n                targetName: {\n                    '@id': 'https://schema.org/targetName',\n                },\n                targetType: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#targetType',\n                },\n                targetUrl: {\n                    '@id': 'https://schema.org/targetUrl',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#anyURI',\n                },\n            },\n        },\n        Criteria: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Criteria',\n        },\n        EndorsementCredential: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#EndorsementCredential',\n        },\n        EndorsementSubject: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#EndorsementSubject',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                endorsementComment: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#endorsementComment',\n                },\n            },\n        },\n        Evidence: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Evidence',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                audience: {\n                    '@id': 'https://schema.org/audience',\n                },\n                genre: {\n                    '@id': 'https://schema.org/genre',\n                },\n            },\n        },\n        GeoCoordinates: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#GeoCoordinates',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                latitude: {\n                    '@id': 'https://schema.org/latitude',\n                },\n                longitude: {\n                    '@id': 'https://schema.org/longitude',\n                },\n            },\n        },\n        IdentifierEntry: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#IdentifierEntry',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                identifier: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#identifier',\n                },\n                identifierType: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#identifierType',\n                },\n            },\n        },\n        IdentityObject: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#IdentityObject',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                hashed: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#hashed',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#boolean',\n                },\n                identityHash: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#identityHash',\n                },\n                identityType: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#identityType',\n                },\n                salt: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#salt',\n                },\n            },\n        },\n        Image: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Image',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                caption: {\n                    '@id': 'https://schema.org/caption',\n                },\n            },\n        },\n        Profile: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Profile',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                additionalName: {\n                    '@id': 'https://schema.org/additionalName',\n                },\n                address: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#address',\n                    '@type': '@id',\n                },\n                dateOfBirth: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#dateOfBirth',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#date',\n                },\n                email: {\n                    '@id': 'https://schema.org/email',\n                },\n                familyName: {\n                    '@id': 'https://schema.org/familyName',\n                },\n                familyNamePrefix: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#familyNamePrefix',\n                },\n                givenName: {\n                    '@id': 'https://schema.org/givenName',\n                },\n                honorificPrefix: {\n                    '@id': 'https://schema.org/honorificPrefix',\n                },\n                honorificSuffix: {\n                    '@id': 'https://schema.org/honorificSuffix',\n                },\n                image: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#image',\n                    '@type': '@id',\n                },\n                otherIdentifier: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#otherIdentifier',\n                    '@container': '@set',\n                },\n                parentOrg: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#parentOrg',\n                    '@type': '@id',\n                },\n                patronymicName: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#patronymicName',\n                },\n                phone: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#phone',\n                },\n                official: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#official',\n                },\n            },\n        },\n        Related: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Related',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                version: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#version',\n                },\n                inLanguage: {\n                    '@id': 'https://schema.org/inLanguage',\n                },\n            },\n        },\n        Result: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#Result',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                achievedLevel: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#achievedLevel',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#anyURI',\n                },\n                resultDescription: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#resultDescription',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#anyURI',\n                },\n                status: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#status',\n                },\n                value: {\n                    '@id': 'https://schema.org/value',\n                },\n            },\n        },\n        ResultDescription: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#ResultDescription',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                allowedValue: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#allowedValue',\n                    '@container': '@list',\n                },\n                requiredLevel: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#requiredLevel',\n                    '@type': 'https://www.w3.org/2001/XMLSchema#anyURI',\n                },\n                requiredValue: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#requiredValue',\n                },\n                resultType: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#resultType',\n                },\n                rubricCriterionLevel: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#rubricCriterionLevel',\n                    '@container': '@set',\n                },\n                valueMax: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#valueMax',\n                },\n                valueMin: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#valueMin',\n                },\n            },\n        },\n        RubricCriterionLevel: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#RubricCriterionLevel',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                level: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#level',\n                },\n                points: {\n                    '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#points',\n                },\n            },\n        },\n        alignment: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#alignment',\n            '@container': '@set',\n        },\n        description: {\n            '@id': 'https://schema.org/description',\n        },\n        endorsement: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#endorsement',\n            '@container': '@set',\n        },\n        image: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#image',\n            '@type': '@id',\n        },\n        inLanguage: {\n            '@id': 'https://schema.org/inLanguage',\n        },\n        name: {\n            '@id': 'https://schema.org/name',\n        },\n        narrative: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#narrative',\n        },\n        url: {\n            '@id': 'https://schema.org/url',\n            '@type': 'https://www.w3.org/2001/XMLSchema#anyURI',\n        },\n        awardedDate: {\n            '@id': 'https://purl.imsglobal.org/spec/vc/ob/vocab.html#awardedDate',\n            '@type': 'xsd:dateTime',\n        },\n    },\n};\nconst localED25519Context = {\n    '@context': {\n        id: '@id',\n        type: '@type',\n        '@protected': true,\n        proof: {\n            '@id': 'https://w3id.org/security#proof',\n            '@type': '@id',\n            '@container': '@graph',\n        },\n        Ed25519VerificationKey2020: {\n            '@id': 'https://w3id.org/security#Ed25519VerificationKey2020',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                controller: {\n                    '@id': 'https://w3id.org/security#controller',\n                    '@type': '@id',\n                },\n                revoked: {\n                    '@id': 'https://w3id.org/security#revoked',\n                    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n                },\n                publicKeyMultibase: {\n                    '@id': 'https://w3id.org/security#publicKeyMultibase',\n                    '@type': 'https://w3id.org/security#multibase',\n                },\n            },\n        },\n        Ed25519Signature2020: {\n            '@id': 'https://w3id.org/security#Ed25519Signature2020',\n            '@context': {\n                '@protected': true,\n                id: '@id',\n                type: '@type',\n                challenge: 'https://w3id.org/security#challenge',\n                created: {\n                    '@id': 'http://purl.org/dc/terms/created',\n                    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n                },\n                domain: 'https://w3id.org/security#domain',\n                expires: {\n                    '@id': 'https://w3id.org/security#expiration',\n                    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime',\n                },\n                nonce: 'https://w3id.org/security#nonce',\n                proofPurpose: {\n                    '@id': 'https://w3id.org/security#proofPurpose',\n                    '@type': '@vocab',\n                    '@context': {\n                        '@protected': true,\n                        id: '@id',\n                        type: '@type',\n                        assertionMethod: {\n                            '@id': 'https://w3id.org/security#assertionMethod',\n                            '@type': '@id',\n                            '@container': '@set',\n                        },\n                        authentication: {\n                            '@id': 'https://w3id.org/security#authenticationMethod',\n                            '@type': '@id',\n                            '@container': '@set',\n                        },\n                        capabilityInvocation: {\n                            '@id': 'https://w3id.org/security#capabilityInvocationMethod',\n                            '@type': '@id',\n                            '@container': '@set',\n                        },\n                        capabilityDelegation: {\n                            '@id': 'https://w3id.org/security#capabilityDelegationMethod',\n                            '@type': '@id',\n                            '@container': '@set',\n                        },\n                        keyAgreement: {\n                            '@id': 'https://w3id.org/security#keyAgreementMethod',\n                            '@type': '@id',\n                            '@container': '@set',\n                        },\n                    },\n                },\n                proofValue: {\n                    '@id': 'https://w3id.org/security#proofValue',\n                    '@type': 'https://w3id.org/security#multibase',\n                },\n                verificationMethod: {\n                    '@id': 'https://w3id.org/security#verificationMethod',\n                    '@type': '@id',\n                },\n            },\n        },\n    },\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/credential.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/utils/credential.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractKeyPairFromCredential: () => (/* binding */ extractKeyPairFromCredential),\n/* harmony export */   generateDIDSchema: () => (/* binding */ generateDIDSchema),\n/* harmony export */   generateUnsignedRecommendation: () => (/* binding */ generateUnsignedRecommendation),\n/* harmony export */   generateUnsignedVC: () => (/* binding */ generateUnsignedVC)\n/* harmony export */ });\n/* harmony import */ var _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @digitalbazaar/ed25519-verification-key-2020 */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js */ \"(ssr)/./node_modules/crypto-js/index.js\");\n\n\n\n/**\n * Utility function to generate a hashed ID for a credential.\n * Excludes the `id` field when hashing.\n * @param {object} credential - The credential object to hash.\n * @returns {string} The generated hashed ID.\n */\nfunction generateHashedId(credential) {\n    // Exclude the `id` field from the hash\n    const credentialWithoutId = { ...credential, id: undefined };\n    const serialized = JSON.stringify(credentialWithoutId);\n    return crypto_js__WEBPACK_IMPORTED_MODULE_1__.SHA256(serialized).toString(crypto_js__WEBPACK_IMPORTED_MODULE_1__.enc.Hex);\n}\n/**\n * Create a DID document using the provided key pair.\n * @param {KeyPair} keyPair - The key pair used to create the DID document.\n * @returns {Promise<DidDocument>} The created DID document.\n * @throws Will throw an error if the DID document generation fails.\n */\nconst generateDIDSchema = async (keyPair) => {\n    try {\n        const DID = keyPair.controller;\n        return {\n            '@context': ['https://www.w3.org/ns/did/v1'],\n            id: DID,\n            publicKey: [\n                {\n                    id: keyPair.id,\n                    type: 'Ed25519VerificationKey2020',\n                    controller: DID,\n                    publicKeyMultibase: keyPair.publicKeyMultibase,\n                },\n            ],\n            authentication: [keyPair.id],\n            assertionMethod: [keyPair.id],\n            capabilityDelegation: [keyPair.id],\n            capabilityInvocation: [keyPair.id],\n            keyAgreement: [\n                {\n                    id: `${keyPair.id}-keyAgreement`,\n                    type: 'X25519KeyAgreementKey2020',\n                    controller: DID,\n                    publicKeyMultibase: keyPair.publicKeyMultibase,\n                },\n            ],\n        };\n    }\n    catch (error) {\n        console.error('Error creating DID document:', error);\n        throw error;\n    }\n};\n/**\n * Generate an unsigned Verifiable Credential (VC).\n * Hashes the credential to create a unique ID.\n * @param {FormDataI} params\n * @param {string} params.FormData - The form dta to include in the VC.\n * @param {string} params.issuerDid - The DID of the issuer.\n * @returns {Credential} The created unsigned VC.\n * @throws Will throw an error if the VC creation fails or if issuance date exceeds expiration date.\n */\nfunction generateUnsignedVC({ formData, issuerDid }) {\n    const issuanceDate = new Date().toISOString();\n    if (issuanceDate > formData.expirationDate)\n        throw new Error('issuanceDate cannot be after expirationDate');\n    const unsignedCredential = {\n        '@context': [\n            'https://www.w3.org/2018/credentials/v1',\n            'https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json',\n            {\n                duration: 'https://schema.org/duration',\n                fullName: 'https://schema.org/name',\n                portfolio: 'https://schema.org/portfolio',\n                evidenceLink: 'https://schema.org/evidenceLink',\n                evidenceDescription: 'https://schema.org/evidenceDescription',\n                credentialType: 'https://schema.org/credentialType',\n            },\n        ],\n        id: '', // Will be set after hashing\n        type: ['VerifiableCredential', 'OpenBadgeCredential'],\n        issuer: {\n            id: issuerDid,\n            type: ['Profile'],\n        },\n        issuanceDate,\n        expirationDate: formData.expirationDate,\n        credentialSubject: {\n            type: ['AchievementSubject'],\n            name: formData.fullName,\n            portfolio: formData.portfolio.map((item) => ({\n                '@type': 'schema:CreativeWork',\n                name: item.name,\n                url: item.url,\n            })),\n            evidenceLink: formData.evidenceLink,\n            evidenceDescription: formData.achievementDescription,\n            duration: formData.duration,\n            credentialType: formData.credentialType,\n            achievement: [\n                {\n                    id: `urn:uuid:${(0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])()}`,\n                    type: ['Achievement'],\n                    criteria: {\n                        narrative: formData.criteriaNarrative,\n                    },\n                    description: formData.achievementDescription,\n                    name: formData.achievementName,\n                    image: formData.evidenceLink\n                        ? {\n                            id: formData.evidenceLink,\n                            type: 'Image',\n                        }\n                        : undefined,\n                },\n            ],\n        },\n    };\n    // Generate the hashed ID\n    unsignedCredential.id = 'urn:' + generateHashedId(unsignedCredential);\n    return unsignedCredential;\n}\n/**\n * Generate an unsigned Recommendation Credential.\n * Uses the hash of the VC to set the `id` for consistency.\n * @param {object} params\n * @param {VerifiableCredential} params.vc - The Verifiable Credential to base the recommendation on.\n * @param {RecommendationFormDataI} params.recommendation - The recommendation form data.\n * @param {string} params.issuerDid - The DID of the issuer.\n * @returns {RecommendationCredential} The created unsigned Recommendation Credential.\n * @throws Will throw an error if the recommendation creation fails or if issuance date exceeds expiration date.\n */\nfunction generateUnsignedRecommendation({ vcId, recommendation, issuerDid, }) {\n    const issuanceDate = new Date().toISOString();\n    if (issuanceDate > recommendation.expirationDate)\n        throw new Error('issuanceDate cannot be after expirationDate');\n    const unsignedRecommendation = {\n        '@context': [\n            'https://www.w3.org/2018/credentials/v1',\n            'https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json',\n            {\n                howKnow: 'https://schema.org/howKnow',\n                recommendationText: 'https://schema.org/recommendationText',\n                qualifications: 'https://schema.org/qualifications',\n                explainAnswer: 'https://schema.org/explainAnswer',\n                portfolio: 'https://schema.org/portfolio',\n            },\n        ],\n        id: `urn:${generateHashedId({ id: vcId })}`,\n        type: ['VerifiableCredential', 'https://schema.org/RecommendationCredential'],\n        issuer: {\n            id: issuerDid,\n            type: ['Profile'],\n        },\n        issuanceDate,\n        expirationDate: recommendation.expirationDate,\n        credentialSubject: {\n            name: recommendation.fullName,\n            howKnow: recommendation.howKnow,\n            recommendationText: recommendation.recommendationText,\n            qualifications: recommendation.qualifications,\n            explainAnswer: recommendation.explainAnswer,\n            portfolio: recommendation.portfolio.map((item) => ({\n                name: item.name,\n                url: item.url,\n            })),\n        },\n    };\n    return unsignedRecommendation;\n}\n/**\n * Extracts the keypair from a Verifiable Credential\n * @param {Object} credential - The signed Verifiable Credential\n * @returns {Ed25519VerificationKey2020} keyPair - The generated keypair object\n */\nasync function extractKeyPairFromCredential(credential) {\n    const verificationMethod = credential.proof.verificationMethod;\n    const issuer = credential.issuer.id;\n    // Example of extracting the public key from the DID fragment (verification method)\n    const publicKeyMultibase = verificationMethod.split('#')[1];\n    // Generate the keypair using Ed25519VerificationKey2020\n    const keyPair = await _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_0__.Ed25519VerificationKey2020.from({\n        id: verificationMethod,\n        controller: issuer,\n        publicKeyMultibase: publicKeyMultibase,\n    });\n    return keyPair;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/credential.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/digitalbazaar.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/utils/digitalbazaar.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customDocumentLoader: () => (/* binding */ customDocumentLoader)\n/* harmony export */ });\n/* harmony import */ var _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @digitalbazaar/ed25519-verification-key-2020 */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js\");\n/* harmony import */ var _digitalbazaar_did_method_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @digitalbazaar/did-method-key */ \"(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/index.js\");\n/* harmony import */ var _digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @digitalbazaar/vc */ \"(ssr)/./node_modules/@digitalbazaar/vc/lib/index.js\");\n/* harmony import */ var _utils_context_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/context.js */ \"(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/context.js\");\n\n\n\n\n// Initialize the DID method key driver\nconst didKeyDriverInstance = (0,_digitalbazaar_did_method_key__WEBPACK_IMPORTED_MODULE_1__.driver)();\ndidKeyDriverInstance.use({\n    multibaseMultikeyHeader: 'z6Mk',\n    fromMultibase: _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_0__.Ed25519VerificationKey2020.from,\n});\n// Custom document loader\nconst customDocumentLoader = async (url) => {\n    // Context map for local contexts\n    const contextMap = {\n        'https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json': _utils_context_js__WEBPACK_IMPORTED_MODULE_3__.localOBContext,\n        'https://w3id.org/security/suites/ed25519-2020/v1': _utils_context_js__WEBPACK_IMPORTED_MODULE_3__.localED25519Context,\n    };\n    // Return local context if it matches the URL\n    if (contextMap[url]) {\n        return {\n            contextUrl: null,\n            documentUrl: url,\n            document: contextMap[url],\n        };\n    }\n    // Handle did:key resolution\n    if (url.startsWith('did:key:')) {\n        const didDocument = await didKeyDriverInstance.get({ did: url });\n        return {\n            contextUrl: null,\n            documentUrl: url,\n            document: didDocument,\n        };\n    }\n    // Fallback to the default document loader for unknown URLs\n    return (0,_digitalbazaar_vc__WEBPACK_IMPORTED_MODULE_2__.defaultDocumentLoader)(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvb3BlcmF0aW9uL3ZjLXN0b3JhZ2UvZGlzdC91dGlscy9kaWdpdGFsYmF6YWFyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBGO0FBQ25CO0FBQ2I7QUFDZ0I7QUFDMUU7QUFDQSw2QkFBNkIscUVBQVk7QUFDekM7QUFDQTtBQUNBLG1CQUFtQixvR0FBMEI7QUFDN0MsQ0FBQztBQUNEO0FBQ087QUFDUDtBQUNBO0FBQ0Esc0VBQXNFLDZEQUFjO0FBQ3BGLDREQUE0RCxrRUFBbUI7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxVQUFVO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx3RUFBcUI7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGNvb3BlcmF0aW9uL3ZjLXN0b3JhZ2UvZGlzdC91dGlscy9kaWdpdGFsYmF6YWFyLmpzPzRmMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjAgfSBmcm9tICdAZGlnaXRhbGJhemFhci9lZDI1NTE5LXZlcmlmaWNhdGlvbi1rZXktMjAyMCc7XG5pbXBvcnQgeyBkcml2ZXIgYXMgZGlkS2V5RHJpdmVyIH0gZnJvbSAnQGRpZ2l0YWxiYXphYXIvZGlkLW1ldGhvZC1rZXknO1xuaW1wb3J0IHsgZGVmYXVsdERvY3VtZW50TG9hZGVyIH0gZnJvbSAnQGRpZ2l0YWxiYXphYXIvdmMnO1xuaW1wb3J0IHsgbG9jYWxPQkNvbnRleHQsIGxvY2FsRUQyNTUxOUNvbnRleHQgfSBmcm9tICcuLi91dGlscy9jb250ZXh0LmpzJztcbi8vIEluaXRpYWxpemUgdGhlIERJRCBtZXRob2Qga2V5IGRyaXZlclxuY29uc3QgZGlkS2V5RHJpdmVySW5zdGFuY2UgPSBkaWRLZXlEcml2ZXIoKTtcbmRpZEtleURyaXZlckluc3RhbmNlLnVzZSh7XG4gICAgbXVsdGliYXNlTXVsdGlrZXlIZWFkZXI6ICd6Nk1rJyxcbiAgICBmcm9tTXVsdGliYXNlOiBFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAyMC5mcm9tLFxufSk7XG4vLyBDdXN0b20gZG9jdW1lbnQgbG9hZGVyXG5leHBvcnQgY29uc3QgY3VzdG9tRG9jdW1lbnRMb2FkZXIgPSBhc3luYyAodXJsKSA9PiB7XG4gICAgLy8gQ29udGV4dCBtYXAgZm9yIGxvY2FsIGNvbnRleHRzXG4gICAgY29uc3QgY29udGV4dE1hcCA9IHtcbiAgICAgICAgJ2h0dHBzOi8vcHVybC5pbXNnbG9iYWwub3JnL3NwZWMvb2IvdjNwMC9jb250ZXh0LTMuMC4zLmpzb24nOiBsb2NhbE9CQ29udGV4dCxcbiAgICAgICAgJ2h0dHBzOi8vdzNpZC5vcmcvc2VjdXJpdHkvc3VpdGVzL2VkMjU1MTktMjAyMC92MSc6IGxvY2FsRUQyNTUxOUNvbnRleHQsXG4gICAgfTtcbiAgICAvLyBSZXR1cm4gbG9jYWwgY29udGV4dCBpZiBpdCBtYXRjaGVzIHRoZSBVUkxcbiAgICBpZiAoY29udGV4dE1hcFt1cmxdKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250ZXh0VXJsOiBudWxsLFxuICAgICAgICAgICAgZG9jdW1lbnRVcmw6IHVybCxcbiAgICAgICAgICAgIGRvY3VtZW50OiBjb250ZXh0TWFwW3VybF0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEhhbmRsZSBkaWQ6a2V5IHJlc29sdXRpb25cbiAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJ2RpZDprZXk6JykpIHtcbiAgICAgICAgY29uc3QgZGlkRG9jdW1lbnQgPSBhd2FpdCBkaWRLZXlEcml2ZXJJbnN0YW5jZS5nZXQoeyBkaWQ6IHVybCB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRleHRVcmw6IG51bGwsXG4gICAgICAgICAgICBkb2N1bWVudFVybDogdXJsLFxuICAgICAgICAgICAgZG9jdW1lbnQ6IGRpZERvY3VtZW50LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBGYWxsYmFjayB0byB0aGUgZGVmYXVsdCBkb2N1bWVudCBsb2FkZXIgZm9yIHVua25vd24gVVJMc1xuICAgIHJldHVybiBkZWZhdWx0RG9jdW1lbnRMb2FkZXIodXJsKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/digitalbazaar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/google.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/utils/google.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractGoogleDriveFileId: () => (/* binding */ extractGoogleDriveFileId),\n/* harmony export */   generateViewLink: () => (/* binding */ generateViewLink),\n/* harmony export */   getVCWithRecommendations: () => (/* binding */ getVCWithRecommendations),\n/* harmony export */   saveToGoogleDrive: () => (/* binding */ saveToGoogleDrive),\n/* harmony export */   uploadToGoogleDrive: () => (/* binding */ uploadToGoogleDrive)\n/* harmony export */ });\nconst getVCWithRecommendations = async ({ vcId, storage }) => {\n    try {\n        const vcFolderId = await storage.getFileParents(vcId);\n        const files = await storage.findFilesUnderFolder(vcFolderId);\n        const relationsFile = files.find((f) => f.name === 'RELATIONS');\n        const relationsContent = await storage.retrieve(relationsFile.id);\n        const relationsData = relationsContent.data.body ? JSON.parse(relationsContent.data.body) : relationsContent.data;\n        const recommendationIds = relationsData.recommendations || [];\n        const vc = await storage.retrieve(vcId);\n        return { vc: vc, recommendationIds, relationsFileId: relationsFile.id };\n    }\n    catch (error) {\n        console.error('Error getting VC with recommendations:', error);\n        throw error;\n    }\n};\n/**\n * Save data to Google Drive in the specified folder type.\n * @param {object} data - The data to save.\n * @param {FileType} data.type - The type of data being saved.\n * @returns {Promise<object>} - The file object saved to Google Drive.\n * @param {string} data.vcId - Optional unique identifier for the VC to link the recommendations.\n * @throws Will throw an error if the save operation fails.\n */\nasync function saveToGoogleDrive({ storage, data, type }) {\n    try {\n        const fileData = {\n            fileName: type === 'VC' ? 'VC' : `${type}-${Date.now()}`,\n            mimeType: 'application/json',\n            body: JSON.stringify(data),\n        };\n        // Get all root folders\n        const rootFolders = await storage.findFolders();\n        // Find or create the \"Credentials\" folder\n        let credentialsFolder = rootFolders.find((f) => f.name === 'Credentials');\n        let credentialsFolderId;\n        if (!credentialsFolder) {\n            credentialsFolder = await storage.createFolder({ folderName: 'Credentials', parentFolderId: 'root' });\n        }\n        credentialsFolderId = credentialsFolder.id;\n        // Get subfolders within the \"Credentials\" folder\n        const subfolders = await storage.findFolders(credentialsFolderId);\n        // Find or create the specific subfolder (DIDs or VCs)\n        let typeFolder = subfolders.find((f) => f.name === `${type}s`);\n        let typeFolderId;\n        if (!typeFolder) {\n            typeFolder = await storage.createFolder({ folderName: `${type}s`, parentFolderId: credentialsFolderId });\n        }\n        typeFolderId = typeFolder.id;\n        if (type === 'VC') {\n            // save the data in Credentials/VCs/VC-timestamp/vc.json\n            const vcFolder = await storage.createFolder({ folderName: `${fileData.fileName}-${Date.now()}`, parentFolderId: typeFolderId });\n            const file = await storage.saveFile({ data: fileData, folderId: vcFolder.id });\n            return file;\n        }\n        // Save the file in the specific subfolder\n        const file = await storage.saveFile({ data: fileData, folderId: typeFolderId });\n        return file;\n    }\n    catch (error) {\n        console.error('Error saving to Google Drive:', error);\n        throw error;\n    }\n}\n/**\n * Upload any type of file to Google Drive in the Credentials/MEDIAs folder.\n * @param {GoogleDriveStorage} storage - The GoogleDriveStorage instance.\n * @param {File} file - The file to upload.\n * @param {string} folderName - The name of the folder where the file will be saved (default is 'MEDIAs').\n * @returns {Promise<{ id: string }>} - The uploaded file object.\n * @throws Will throw an error if the upload operation fails.\n */\nasync function uploadToGoogleDrive(storage, file, folderName = 'MEDIAs') {\n    try {\n        const rootFolders = await storage.findFolders();\n        let credentialsFolder = rootFolders.find((f) => f.name === 'Credentials');\n        if (!credentialsFolder) {\n            console.log('Creating Credentials folder...');\n            credentialsFolder = await storage.createFolder({ folderName: 'Credentials', parentFolderId: 'root' });\n        }\n        const credentialsFolderId = credentialsFolder.id;\n        const subfolders = await storage.findFolders(credentialsFolder.id);\n        let mediasFolder = subfolders.find((f) => f.name === 'MEDIAs');\n        if (!mediasFolder) {\n            mediasFolder = await storage.createFolder({ folderName: 'MEDIAs', parentFolderId: credentialsFolderId });\n        }\n        const mediasFolderId = mediasFolder.id;\n        // Prepare the image file data\n        const fileMetaData = {\n            fileName: file.name,\n            mimeType: file.type,\n            body: file,\n        };\n        // SaveFile the image in the \"MEDIAs\" folder\n        const uploadedImage = await storage.saveFile({\n            data: fileMetaData,\n            folderId: mediasFolderId,\n        });\n        return uploadedImage;\n    }\n    catch (error) {\n        console.error('Error uploading image to Google Drive:', error);\n        throw error;\n    }\n}\nfunction generateViewLink(fileId) {\n    if (!fileId) {\n        throw new Error('File ID is required to generate a view link.');\n    }\n    // Construct the view URL based on the file ID\n    return `https://drive.google.com/file/d/${fileId}/view`;\n}\nfunction extractGoogleDriveFileId(url) {\n    const regex = /\\/d\\/([a-zA-Z0-9_-]+)\\//;\n    const match = url.match(regex);\n    if (match && match[1]) {\n        return match[1]; // Return the file ID\n    }\n    else {\n        console.error('Invalid Google Drive URL: File ID not found.');\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/google.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/presentation.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@cooperation/vc-storage/dist/utils/presentation.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAndSignVerifiablePresentation: () => (/* binding */ createAndSignVerifiablePresentation)\n/* harmony export */ });\n/**\n * Create and sign a Verifiable Presentation (VP) from a given Verifiable Credential (VC) file and any associated recommendations.\n * @param {string} accessTokens - The access tokens for the user.\n * @param {string} vcFileId - The ID of the Verifiable Credential (VC) file in Google Drive.\n * @returns {Promise<{ signedPresentation: object } | null>} - The signed Verifiable Presentation (VP) or null if an error occurs.\n * @throws Will throw an error if the VC is not found, a matching key pair cannot be located, or any part of the signing process fails.\n */\nconst createAndSignVerifiablePresentation = async (accessTokens, vcFileId) => {\n    if (!accessTokens || !vcFileId) {\n        console.error('Invalid input: Access tokens and VC file ID are required.');\n        return null;\n    }\n    try {\n        // const storage = new GoogleDriveStorage(accessTokens);\n        // const engine = new CredentialEngine(accessTokens);\n        // // Fetch Verifiable Credential (VC)\n        // const verifiableCredential = await storage.retrieve(vcFileId);\n        // if (!verifiableCredential) {\n        // \tthrow new Error('Verifiable Credential not found.');\n        // }\n        // // Fetch VC comments (potential recommendations)\n        // const verifiableCredentialComments = await storage.getFileComments(vcFileId);\n        // let recommendations: object[] = [];\n        // // Extract recommendations from comments if present\n        // if (verifiableCredentialComments.length > 0) {\n        // \tfor (const comment of verifiableCredentialComments) {\n        // \t\tconsole.log('🚀 ~ createAndSignVerifiablePresentation ~ comment', comment);\n        // \t\tconst recommendationFile = await storage.retrieve(extractGoogleDriveFileId(comment.content));\n        // \t\tconsole.log('🚀 ~ createAndSignVerifiablePresentation ~ recommendationFile', recommendationFile);\n        // \t\tif (recommendationFile) {\n        // \t\t\trecommendations.push(recommendationFile);\n        // \t\t}\n        // \t}\n        // }\n        // // Create Verifiable Presentation (VP) with the retrieved VC\n        // const presentation = await engine.createPresentation([verifiableCredential.data, ...recommendations]); //! do not edit the array order!!\n        // // Use the key pair to sign the presentation\n        // const signedPresentation = await engine.signPresentation(presentation);\n        // return {};\n    }\n    catch (error) {\n        console.error('Error during Verifiable Presentation creation and signing:', error);\n        return null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvb3BlcmF0aW9uL3ZjLXN0b3JhZ2UvZGlzdC91dGlscy9wcmVzZW50YXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsVUFBVSw2QkFBNkIsU0FBUztBQUM3RDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrSEFBa0g7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0Bjb29wZXJhdGlvbi92Yy1zdG9yYWdlL2Rpc3QvdXRpbHMvcHJlc2VudGF0aW9uLmpzP2RjMmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGUgYW5kIHNpZ24gYSBWZXJpZmlhYmxlIFByZXNlbnRhdGlvbiAoVlApIGZyb20gYSBnaXZlbiBWZXJpZmlhYmxlIENyZWRlbnRpYWwgKFZDKSBmaWxlIGFuZCBhbnkgYXNzb2NpYXRlZCByZWNvbW1lbmRhdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWNjZXNzVG9rZW5zIC0gVGhlIGFjY2VzcyB0b2tlbnMgZm9yIHRoZSB1c2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IHZjRmlsZUlkIC0gVGhlIElEIG9mIHRoZSBWZXJpZmlhYmxlIENyZWRlbnRpYWwgKFZDKSBmaWxlIGluIEdvb2dsZSBEcml2ZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPHsgc2lnbmVkUHJlc2VudGF0aW9uOiBvYmplY3QgfSB8IG51bGw+fSAtIFRoZSBzaWduZWQgVmVyaWZpYWJsZSBQcmVzZW50YXRpb24gKFZQKSBvciBudWxsIGlmIGFuIGVycm9yIG9jY3Vycy5cbiAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgVkMgaXMgbm90IGZvdW5kLCBhIG1hdGNoaW5nIGtleSBwYWlyIGNhbm5vdCBiZSBsb2NhdGVkLCBvciBhbnkgcGFydCBvZiB0aGUgc2lnbmluZyBwcm9jZXNzIGZhaWxzLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlQW5kU2lnblZlcmlmaWFibGVQcmVzZW50YXRpb24gPSBhc3luYyAoYWNjZXNzVG9rZW5zLCB2Y0ZpbGVJZCkgPT4ge1xuICAgIGlmICghYWNjZXNzVG9rZW5zIHx8ICF2Y0ZpbGVJZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGlucHV0OiBBY2Nlc3MgdG9rZW5zIGFuZCBWQyBmaWxlIElEIGFyZSByZXF1aXJlZC4nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIGNvbnN0IHN0b3JhZ2UgPSBuZXcgR29vZ2xlRHJpdmVTdG9yYWdlKGFjY2Vzc1Rva2Vucyk7XG4gICAgICAgIC8vIGNvbnN0IGVuZ2luZSA9IG5ldyBDcmVkZW50aWFsRW5naW5lKGFjY2Vzc1Rva2Vucyk7XG4gICAgICAgIC8vIC8vIEZldGNoIFZlcmlmaWFibGUgQ3JlZGVudGlhbCAoVkMpXG4gICAgICAgIC8vIGNvbnN0IHZlcmlmaWFibGVDcmVkZW50aWFsID0gYXdhaXQgc3RvcmFnZS5yZXRyaWV2ZSh2Y0ZpbGVJZCk7XG4gICAgICAgIC8vIGlmICghdmVyaWZpYWJsZUNyZWRlbnRpYWwpIHtcbiAgICAgICAgLy8gXHR0aHJvdyBuZXcgRXJyb3IoJ1ZlcmlmaWFibGUgQ3JlZGVudGlhbCBub3QgZm91bmQuJyk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gLy8gRmV0Y2ggVkMgY29tbWVudHMgKHBvdGVudGlhbCByZWNvbW1lbmRhdGlvbnMpXG4gICAgICAgIC8vIGNvbnN0IHZlcmlmaWFibGVDcmVkZW50aWFsQ29tbWVudHMgPSBhd2FpdCBzdG9yYWdlLmdldEZpbGVDb21tZW50cyh2Y0ZpbGVJZCk7XG4gICAgICAgIC8vIGxldCByZWNvbW1lbmRhdGlvbnM6IG9iamVjdFtdID0gW107XG4gICAgICAgIC8vIC8vIEV4dHJhY3QgcmVjb21tZW5kYXRpb25zIGZyb20gY29tbWVudHMgaWYgcHJlc2VudFxuICAgICAgICAvLyBpZiAodmVyaWZpYWJsZUNyZWRlbnRpYWxDb21tZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFx0Zm9yIChjb25zdCBjb21tZW50IG9mIHZlcmlmaWFibGVDcmVkZW50aWFsQ29tbWVudHMpIHtcbiAgICAgICAgLy8gXHRcdGNvbnNvbGUubG9nKCfwn5qAIH4gY3JlYXRlQW5kU2lnblZlcmlmaWFibGVQcmVzZW50YXRpb24gfiBjb21tZW50JywgY29tbWVudCk7XG4gICAgICAgIC8vIFx0XHRjb25zdCByZWNvbW1lbmRhdGlvbkZpbGUgPSBhd2FpdCBzdG9yYWdlLnJldHJpZXZlKGV4dHJhY3RHb29nbGVEcml2ZUZpbGVJZChjb21tZW50LmNvbnRlbnQpKTtcbiAgICAgICAgLy8gXHRcdGNvbnNvbGUubG9nKCfwn5qAIH4gY3JlYXRlQW5kU2lnblZlcmlmaWFibGVQcmVzZW50YXRpb24gfiByZWNvbW1lbmRhdGlvbkZpbGUnLCByZWNvbW1lbmRhdGlvbkZpbGUpO1xuICAgICAgICAvLyBcdFx0aWYgKHJlY29tbWVuZGF0aW9uRmlsZSkge1xuICAgICAgICAvLyBcdFx0XHRyZWNvbW1lbmRhdGlvbnMucHVzaChyZWNvbW1lbmRhdGlvbkZpbGUpO1xuICAgICAgICAvLyBcdFx0fVxuICAgICAgICAvLyBcdH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyAvLyBDcmVhdGUgVmVyaWZpYWJsZSBQcmVzZW50YXRpb24gKFZQKSB3aXRoIHRoZSByZXRyaWV2ZWQgVkNcbiAgICAgICAgLy8gY29uc3QgcHJlc2VudGF0aW9uID0gYXdhaXQgZW5naW5lLmNyZWF0ZVByZXNlbnRhdGlvbihbdmVyaWZpYWJsZUNyZWRlbnRpYWwuZGF0YSwgLi4ucmVjb21tZW5kYXRpb25zXSk7IC8vISBkbyBub3QgZWRpdCB0aGUgYXJyYXkgb3JkZXIhIVxuICAgICAgICAvLyAvLyBVc2UgdGhlIGtleSBwYWlyIHRvIHNpZ24gdGhlIHByZXNlbnRhdGlvblxuICAgICAgICAvLyBjb25zdCBzaWduZWRQcmVzZW50YXRpb24gPSBhd2FpdCBlbmdpbmUuc2lnblByZXNlbnRhdGlvbihwcmVzZW50YXRpb24pO1xuICAgICAgICAvLyByZXR1cm4ge307XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgVmVyaWZpYWJsZSBQcmVzZW50YXRpb24gY3JlYXRpb24gYW5kIHNpZ25pbmc6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cooperation/vc-storage/dist/utils/presentation.js\n");

/***/ })

};
;