/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsonld-signatures";
exports.ids = ["vendor-chunks/jsonld-signatures"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/ProofSet.js":
/*!********************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/ProofSet.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/jsonld-signatures/lib/constants.js\");\nconst jsonld = __webpack_require__(/*! jsonld */ \"(ssr)/./node_modules/jsonld/lib/index.js\");\nconst {extendContextLoader, strictDocumentLoader} = __webpack_require__(/*! ./documentLoader */ \"(ssr)/./node_modules/jsonld-signatures/lib/documentLoader.js\");\nconst {serializeError} = __webpack_require__(/*! serialize-error */ \"(ssr)/./node_modules/serialize-error/index.js\");\n\nmodule.exports = class ProofSet {\n  /**\n   * Adds a Linked Data proof to a document. If the document contains other\n   * proofs, the new proof will be appended to the existing set of proofs.\n   *\n   * Important note: This method assumes that the term `proof` in the given\n   * document has the same definition as the `https://w3id.org/security/v2`\n   * JSON-LD @context.\n   *\n   * @param document {object} - JSON-LD Document to be signed.\n   * @param options {object} Options hashmap.\n   *\n   * A `suite` option is required:\n   *\n   * @param options.suite {LinkedDataSignature} a signature suite instance\n   *   that will create the proof.\n   *\n   * A `purpose` option is required:\n   *\n   * @param options.purpose {ProofPurpose} a proof purpose instance that will\n   *   augment the proof with information describing its intended purpose.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [documentLoader] {function} a custom document loader,\n   *   `Promise<RemoteDocument> documentLoader(url)`.\n   *\n   * @return {Promise<object>} resolves with the signed document, with\n   *   the signature in the top-level `proof` property.\n   */\n  async add(document, {suite, purpose, documentLoader} = {}) {\n    if(!suite) {\n      throw new TypeError('\"options.suite\" is required.');\n    }\n    if(!purpose) {\n      throw new TypeError('\"options.purpose\" is required.');\n    }\n\n    if(documentLoader) {\n      documentLoader = extendContextLoader(documentLoader);\n    } else {\n      documentLoader = strictDocumentLoader;\n    }\n\n    // shallow copy document to allow removal of existing proofs\n    const input = {...document};\n    delete input.proof;\n\n    // get existing proof set, if any\n    const proofSet = _getProofs({document});\n\n    // create the new proof\n    const proof = await suite.createProof({\n      document: input, purpose, proofSet, documentLoader\n    });\n\n    jsonld.addValue(document, 'proof', proof);\n\n    return document;\n  }\n\n  /**\n   * Derives a new Linked Data document with a new `proof` from an existing\n   * document with an existing proof set.\n   *\n   * Important note: This method assumes that the term `proof` in the given\n   * document has the same definition as the `https://w3id.org/security/v2`\n   * JSON-LD @context.\n   *\n   * @param document {object} - JSON-LD Document from which to derive a proof.\n   * @param options {object} Options hashmap.\n   *\n   * A `suite` option is required:\n   *\n   * @param options.suite {LinkedDataSignature} a signature suite instance\n   *   that will derive the new document and new `proof`.\n   *\n   * A `purpose` option is required:\n   *\n   * @param options.purpose {ProofPurpose} a proof purpose instance that will\n   *   augment the proof with information describing its intended purpose.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [documentLoader] {function} a custom document loader,\n   *   `Promise<RemoteDocument> documentLoader(url)`.\n   *\n   * @return {Promise<object>} resolves with the new document, with a new\n   *   top-level `proof` property.\n   */\n  async derive(document, {suite, purpose, documentLoader} = {}) {\n    if(!suite) {\n      throw new TypeError('\"options.suite\" is required.');\n    }\n    if(!purpose) {\n      throw new TypeError('\"options.purpose\" is required.');\n    }\n\n    if(documentLoader) {\n      documentLoader = extendContextLoader(documentLoader);\n    } else {\n      documentLoader = strictDocumentLoader;\n    }\n\n    // shallow copy document to allow removal of existing proofs\n    const input = {...document};\n    delete input.proof;\n\n    // get existing proof set, if any\n    const proofSet = _getProofs({document});\n\n    // create the new document and proof\n    const newDocument = await suite.derive({\n      document: input, purpose, proofSet, documentLoader\n    });\n\n    return newDocument;\n  }\n\n  /**\n   * Verifies Linked Data proof(s) on a document. The proofs to be verified\n   * must match the given proof purpose.\n   *\n   * Important note: This method assumes that the term `proof` in the given\n   * document has the same definition as the `https://w3id.org/security/v2`\n   * JSON-LD @context.\n   *\n   * @param {object} document - The JSON-LD document with one or more proofs to\n   *   be verified.\n   *\n   * @param {LinkedDataSignature|LinkedDataSignature[]} suite -\n   *   Acceptable signature suite instances for verifying the proof(s).\n   *\n   * @param {ProofPurpose} purpose - A proof purpose instance that will\n   *   match proofs to be verified and ensure they were created according to\n   *   the appropriate purpose.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param {function} [documentLoader]  a custom document loader,\n   *   `Promise<RemoteDocument> documentLoader(url)`.\n   *\n   * @return {Promise<{verified: boolean, results: Array, error: *}>} resolves\n   *   with an object with a `verified`boolean property that is `true` if at\n   *   least one proof matching the given purpose and suite verifies and `false`\n   *   otherwise; a `results` property with an array of detailed results;\n   *   if `false` an `error` property will be present.\n   */\n  async verify(document, {suite, purpose, documentLoader} = {}) {\n    if(!suite) {\n      throw new TypeError('\"options.suite\" is required.');\n    }\n    if(!purpose) {\n      throw new TypeError('\"options.purpose\" is required.');\n    }\n    const suites = Array.isArray(suite) ? suite : [suite];\n    if(suites.length === 0) {\n      throw new TypeError('At least one suite is required.');\n    }\n\n    if(documentLoader) {\n      documentLoader = extendContextLoader(documentLoader);\n    } else {\n      documentLoader = strictDocumentLoader;\n    }\n\n    try {\n      // shallow copy to allow for removal of proof set prior to canonize\n      document = {...document};\n\n      // get proofs from document\n      const proofSet = _getProofs({document});\n      if(proofSet.length === 0) {\n        // no possible matches\n        throw new Error('No matching proofs found in the given document.');\n      }\n      // clear proofs from shallow copy\n      delete document.proof;\n\n      // verify proofs\n      const results = await _verify(\n        {document, suites, proofSet, purpose, documentLoader});\n      if(results.length === 0) {\n        const error = new Error(\n          'Did not verify any proofs; insufficient proofs matched the ' +\n          'acceptable suite(s) and required purpose(s).');\n        error.name = 'NotFoundError';\n        throw error;\n      }\n\n      // combine results\n      const verified = results.some(r => r.verified);\n      if(!verified) {\n        const errors = [].concat(\n          ...results.filter(r => r.error).map(r => r.error));\n        const result = {verified, results};\n        if(errors.length > 0) {\n          result.error = errors;\n        }\n        return result;\n      }\n      return {verified, results};\n    } catch(error) {\n      _makeSerializable(error);\n      return {verified: false, error};\n    }\n  }\n};\n\nfunction _getProofs({document}) {\n  // handle document preprocessing to find proofs\n  let proofSet;\n  proofSet = jsonld.getValues(document, 'proof');\n\n  // shallow copy proofs and add document context or SECURITY_CONTEXT_URL\n  const context = document['@context'] || constants.SECURITY_CONTEXT_URL;\n  proofSet = proofSet.map(proof => {\n    const {cryptosuite} = proof;\n    // JCS Data Integrity Suites require unmodified proofs\n    if(cryptosuite?.includes?.('-jcs-')) {\n      return proof;\n    }\n    return {'@context': context, ...proof};\n  });\n\n  return proofSet;\n}\n\nasync function _verify({\n  document, suites, proofSet, purpose, documentLoader\n}) {\n  // map each purpose to at least one proof to verify\n  const purposes = Array.isArray(purpose) ? purpose : [purpose];\n  const purposeToProofs = new Map();\n  const proofToSuite = new Map();\n  const suiteMatchQueue = new Map();\n  await Promise.all(purposes.map(purpose => _matchProofSet({\n    purposeToProofs, proofToSuite, purpose, proofSet, suites,\n    suiteMatchQueue, document, documentLoader\n  })));\n\n  // every purpose must have at least one matching proof or verify will fail\n  if(purposeToProofs.size < purposes.length) {\n    // insufficient proofs to verify, so don't bother verifying any\n    return [];\n  }\n\n  // verify every proof in `proofToSuite`; these proofs matched a purpose\n  const verifyResults = new Map();\n  await Promise.all([...proofToSuite.entries()].map(async ([proof, suite]) => {\n    let result;\n    try {\n      // create backwards-compatible deferred proof purpose to capture\n      // verification method from old-style suites\n      let vm;\n      const purpose = {\n        async validate(proof, {verificationMethod}) {\n          vm = verificationMethod;\n          return {valid: true};\n        }\n      };\n      const {verified, verificationMethod, error} = await suite.verifyProof(\n        {proof, document, purpose, proofSet, documentLoader});\n      if(!vm) {\n        vm = verificationMethod;\n      }\n      result = {proof, verified, verificationMethod: vm, error};\n    } catch(error) {\n      result = {proof, verified: false, error};\n    }\n\n    if(result.error) {\n      // ensure error is serializable\n      _makeSerializable(result.error);\n    }\n\n    verifyResults.set(proof, result);\n  }));\n\n  // validate proof against each purpose that matched it\n  await Promise.all([...purposeToProofs.entries()].map(\n    async ([purpose, proofs]) => {\n      for(const proof of proofs) {\n        const result = verifyResults.get(proof);\n        if(!result.verified) {\n          // if proof was not verified, so not bother validating purpose\n          continue;\n        }\n\n        // validate purpose\n        const {verificationMethod} = result;\n        const suite = proofToSuite.get(proof);\n        let purposeResult;\n        try {\n          purposeResult = await purpose.validate(proof, {\n            document, suite, verificationMethod, documentLoader\n          });\n        } catch(error) {\n          purposeResult = {valid: false, error};\n        }\n\n        // add `purposeResult` to verification result regardless of validity\n        // to ensure that all purposes are represented\n        if(result.purposeResult) {\n          if(Array.isArray(result.purposeResult)) {\n            result.purposeResult.push(purposeResult);\n          } else {\n            result.purposeResult = [result.purposeResult, purposeResult];\n          }\n        } else {\n          result.purposeResult = purposeResult;\n        }\n\n        if(!purposeResult.valid) {\n          // ensure error is serializable\n          _makeSerializable(purposeResult.error);\n\n          // if no top level error set yet, set it\n          if(!result.error) {\n            result.verified = false;\n            result.error = purposeResult.error;\n          }\n        }\n      }\n    }));\n\n  return [...verifyResults.values()];\n}\n\n// add a `toJSON` method to an error which allows for errors in validation\n// reports to be serialized properly by `JSON.stringify`.\nfunction _makeSerializable(error) {\n  Object.defineProperty(error, 'toJSON', {\n    value: function() {\n      return serializeError(this);\n    },\n    configurable: true,\n    writable: true\n  });\n}\n\nasync function _matchProofSet({\n  purposeToProofs, proofToSuite, purpose, proofSet, suites,\n  suiteMatchQueue, document, documentLoader\n}) {\n  for(const proof of proofSet) {\n    // first check if the proof matches the purpose; if it doesn't continue\n    if(!await purpose.match(proof, {document, documentLoader})) {\n      continue;\n    }\n\n    // next, find the suite that can verify the proof; if found, `matched`\n    // will be set to `true` and the proof will be added to `purposeToProofs`\n    // and `proofToSuite` to be processed -- otherwise it will not be; if\n    // no proofs are added for a given purpose, an exception will be thrown\n    let matched = false;\n    for(const s of suites) {\n      // `matchingProofs` is a map of promises that resolve to whether a\n      // proof matches a suite; multiple purposes and suites may be checked\n      // in parallel so a promise queue is used to prevent duplicate work\n      let matchingProofs = suiteMatchQueue.get(s);\n      if(!matchingProofs) {\n        suiteMatchQueue.set(s, matchingProofs = new Map());\n      }\n      let promise = matchingProofs.get(proof);\n      if(!promise) {\n        promise = s.matchProof({proof, document, documentLoader});\n        matchingProofs.set(proof, promise);\n      }\n      if(await promise) {\n        // found the matching suite for the proof; there should only be one\n        // suite that can verify a particular proof; add the proof to the\n        // map of proofs to be verified along with the matching suite\n        matched = true;\n        proofToSuite.set(proof, s);\n        break;\n      }\n    }\n\n    if(matched) {\n      // note proof was a match for the purpose and an acceptable suite; it\n      // will need to be verified by the suite and then validated against the\n      // purpose\n      const matches = purposeToProofs.get(purpose);\n      if(matches) {\n        matches.push(proof);\n      } else {\n        purposeToProofs.set(purpose, [proof]);\n      }\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/ProofSet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/VerificationError.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/VerificationError.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n/**\n * Used as an umbrella wrapper around multiple verification errors.\n */\nclass VerificationError extends Error {\n  /**\n   * @param {Error|Error[]} errors\n   */\n  constructor(errors) {\n    super('Verification error(s).');\n\n    this.name = 'VerificationError';\n    this.errors = [].concat(errors);\n  }\n}\nmodule.exports = VerificationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL1ZlcmlmaWNhdGlvbkVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL1ZlcmlmaWNhdGlvbkVycm9yLmpzPzMwYWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjAgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZWQgYXMgYW4gdW1icmVsbGEgd3JhcHBlciBhcm91bmQgbXVsdGlwbGUgdmVyaWZpY2F0aW9uIGVycm9ycy5cbiAqL1xuY2xhc3MgVmVyaWZpY2F0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Vycm9yfEVycm9yW119IGVycm9yc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZXJyb3JzKSB7XG4gICAgc3VwZXIoJ1ZlcmlmaWNhdGlvbiBlcnJvcihzKS4nKTtcblxuICAgIHRoaXMubmFtZSA9ICdWZXJpZmljYXRpb25FcnJvcic7XG4gICAgdGhpcy5lcnJvcnMgPSBbXS5jb25jYXQoZXJyb3JzKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBWZXJpZmljYXRpb25FcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/VerificationError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/constants.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2017-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst {\n  constants: securityConstants\n} = __webpack_require__(/*! @digitalbazaar/security-context */ \"(ssr)/./node_modules/@digitalbazaar/security-context/dist/context.esm.js\");\n\nmodule.exports = {\n  SECURITY_CONTEXT_URL: securityConstants.SECURITY_CONTEXT_V2_URL,\n  SECURITY_CONTEXT_V1_URL: securityConstants.SECURITY_CONTEXT_V1_URL,\n  SECURITY_CONTEXT_V2_URL: securityConstants.SECURITY_CONTEXT_V2_URL,\n  SECURITY_PROOF_URL: 'https://w3id.org/security#proof',\n  SECURITY_SIGNATURE_URL: 'https://w3id.org/security#signature'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYjtBQUNBO0FBQ0EsRUFBRSxFQUFFLG1CQUFPLENBQUMsaUhBQWlDOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ubGQtc2lnbmF0dXJlcy9saWIvY29uc3RhbnRzLmpzP2U1YmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctMjAyMyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHtcbiAgY29uc3RhbnRzOiBzZWN1cml0eUNvbnN0YW50c1xufSA9IHJlcXVpcmUoJ0BkaWdpdGFsYmF6YWFyL3NlY3VyaXR5LWNvbnRleHQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFNFQ1VSSVRZX0NPTlRFWFRfVVJMOiBzZWN1cml0eUNvbnN0YW50cy5TRUNVUklUWV9DT05URVhUX1YyX1VSTCxcbiAgU0VDVVJJVFlfQ09OVEVYVF9WMV9VUkw6IHNlY3VyaXR5Q29uc3RhbnRzLlNFQ1VSSVRZX0NPTlRFWFRfVjFfVVJMLFxuICBTRUNVUklUWV9DT05URVhUX1YyX1VSTDogc2VjdXJpdHlDb25zdGFudHMuU0VDVVJJVFlfQ09OVEVYVF9WMl9VUkwsXG4gIFNFQ1VSSVRZX1BST09GX1VSTDogJ2h0dHBzOi8vdzNpZC5vcmcvc2VjdXJpdHkjcHJvb2YnLFxuICBTRUNVUklUWV9TSUdOQVRVUkVfVVJMOiAnaHR0cHM6Ly93M2lkLm9yZy9zZWN1cml0eSNzaWduYXR1cmUnXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/contexts.js":
/*!********************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/contexts.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2017-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/jsonld-signatures/lib/constants.js\");\nconst {contexts: securityContexts} = __webpack_require__(/*! @digitalbazaar/security-context */ \"(ssr)/./node_modules/@digitalbazaar/security-context/dist/context.esm.js\");\n\nmodule.exports = new Map([\n  [constants.SECURITY_CONTEXT_V1_URL,\n    securityContexts.get(constants.SECURITY_CONTEXT_V1_URL)],\n  [constants.SECURITY_CONTEXT_V2_URL,\n    securityContexts.get(constants.SECURITY_CONTEXT_V2_URL)]\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL2NvbnRleHRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLDRFQUFhO0FBQ3ZDLE9BQU8sNEJBQTRCLEVBQUUsbUJBQU8sQ0FBQyxpSEFBaUM7O0FBRTlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ubGQtc2lnbmF0dXJlcy9saWIvY29udGV4dHMuanM/MTMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNy0yMDIzIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IHtjb250ZXh0czogc2VjdXJpdHlDb250ZXh0c30gPSByZXF1aXJlKCdAZGlnaXRhbGJhemFhci9zZWN1cml0eS1jb250ZXh0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IE1hcChbXG4gIFtjb25zdGFudHMuU0VDVVJJVFlfQ09OVEVYVF9WMV9VUkwsXG4gICAgc2VjdXJpdHlDb250ZXh0cy5nZXQoY29uc3RhbnRzLlNFQ1VSSVRZX0NPTlRFWFRfVjFfVVJMKV0sXG4gIFtjb25zdGFudHMuU0VDVVJJVFlfQ09OVEVYVF9WMl9VUkwsXG4gICAgc2VjdXJpdHlDb250ZXh0cy5nZXQoY29uc3RhbnRzLlNFQ1VSSVRZX0NPTlRFWFRfVjJfVVJMKV1cbl0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/contexts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/documentLoader.js":
/*!**************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/documentLoader.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2018-2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n// load locally embedded contexts\nconst contexts = __webpack_require__(/*! ./contexts */ \"(ssr)/./node_modules/jsonld-signatures/lib/contexts.js\");\n\n/**\n * This is a utility module that provides a set of functions for using or\n * extending jsonld-signature's built-in JSON-LD document loader.\n * @see https://www.w3.org/TR/json-ld11-api/#loaddocumentcallback\n */\nconst api = {};\nmodule.exports = api;\n\napi.extendContextLoader = documentLoader => {\n  /**\n   * extendContextLoader extends another JSON-LD document loader.\n   * Given a document loader to extend, this method will return a\n   * new document loader that will first check for a URL in\n   * jsonld-signature's built-in context map and, if not found,\n   * it will fall back to using the passed document loader.\n   * This utility method can be used to ensure that any local,\n   * in-memory, immutable context documents provided by\n   * jsonld-signatures will be used prior to using another\n   * document loader to load other documents.\n   *\n   * @param {Function} documentLoader - A function that fetches a document.\n   * @see [node documentLoader example]{@link https://github.com/digitalbazaar/jsonld.js/blob/master/lib/documentLoaders/node.js}\n   * @see [xhr documentLoader example]{@link https://github.com/digitalbazaar/jsonld.js/blob/master/lib/documentLoaders/xhr.js}\n   *\n   * @returns {Function} A function that accepts a\n   * url then fetches a jsonld document.\n   */\n  return async url => {\n    const context = contexts.get(url);\n    if(context !== undefined) {\n      return {\n        contextUrl: null,\n        documentUrl: url,\n        document: context,\n        tag: 'static'\n      };\n    }\n    return documentLoader(url);\n  };\n};\n\napi.strictDocumentLoader = api.extendContextLoader(url => {\n  /**\n   * strictDocumentLoader extends extendContextLoader.\n   * ensuring no network calls are made so the only documents\n   * available are the built-in contexts.\n   * @see documentLoader.extendContextLoader\n   *\n   * @param {string} url - A valid url to a jsonld context.\n   *\n   * @throws {Error} Always throws an error if the\n   * url is not in the context map\n   * (i.e., not a URL for a locally available context document).\n   * @return {Object} A JSON-LD RemoteDocument\n   * that is a copy of a locally available context.\n   */\n  throw new Error(`${url} not found.`);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL2RvY3VtZW50TG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNhOztBQUViLDhCQUE4Qix3QkFBd0I7O0FBRXREO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsMEVBQVk7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2Qix3Q0FBd0M7QUFDeEMsdUNBQXVDO0FBQ3ZDO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQSxxQkFBcUIsS0FBSztBQUMxQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb25sZC1zaWduYXR1cmVzL2xpYi9kb2N1bWVudExvYWRlci5qcz8wZmU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE4LTIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKmVzbGludCBtYXgtbGVuOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlQ29tbWVudHNcIjogdHJ1ZSB9XSovXG5cbi8vIGxvYWQgbG9jYWxseSBlbWJlZGRlZCBjb250ZXh0c1xuY29uc3QgY29udGV4dHMgPSByZXF1aXJlKCcuL2NvbnRleHRzJyk7XG5cbi8qKlxuICogVGhpcyBpcyBhIHV0aWxpdHkgbW9kdWxlIHRoYXQgcHJvdmlkZXMgYSBzZXQgb2YgZnVuY3Rpb25zIGZvciB1c2luZyBvclxuICogZXh0ZW5kaW5nIGpzb25sZC1zaWduYXR1cmUncyBidWlsdC1pbiBKU09OLUxEIGRvY3VtZW50IGxvYWRlci5cbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL2pzb24tbGQxMS1hcGkvI2xvYWRkb2N1bWVudGNhbGxiYWNrXG4gKi9cbmNvbnN0IGFwaSA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBhcGk7XG5cbmFwaS5leHRlbmRDb250ZXh0TG9hZGVyID0gZG9jdW1lbnRMb2FkZXIgPT4ge1xuICAvKipcbiAgICogZXh0ZW5kQ29udGV4dExvYWRlciBleHRlbmRzIGFub3RoZXIgSlNPTi1MRCBkb2N1bWVudCBsb2FkZXIuXG4gICAqIEdpdmVuIGEgZG9jdW1lbnQgbG9hZGVyIHRvIGV4dGVuZCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYVxuICAgKiBuZXcgZG9jdW1lbnQgbG9hZGVyIHRoYXQgd2lsbCBmaXJzdCBjaGVjayBmb3IgYSBVUkwgaW5cbiAgICoganNvbmxkLXNpZ25hdHVyZSdzIGJ1aWx0LWluIGNvbnRleHQgbWFwIGFuZCwgaWYgbm90IGZvdW5kLFxuICAgKiBpdCB3aWxsIGZhbGwgYmFjayB0byB1c2luZyB0aGUgcGFzc2VkIGRvY3VtZW50IGxvYWRlci5cbiAgICogVGhpcyB1dGlsaXR5IG1ldGhvZCBjYW4gYmUgdXNlZCB0byBlbnN1cmUgdGhhdCBhbnkgbG9jYWwsXG4gICAqIGluLW1lbW9yeSwgaW1tdXRhYmxlIGNvbnRleHQgZG9jdW1lbnRzIHByb3ZpZGVkIGJ5XG4gICAqIGpzb25sZC1zaWduYXR1cmVzIHdpbGwgYmUgdXNlZCBwcmlvciB0byB1c2luZyBhbm90aGVyXG4gICAqIGRvY3VtZW50IGxvYWRlciB0byBsb2FkIG90aGVyIGRvY3VtZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZG9jdW1lbnRMb2FkZXIgLSBBIGZ1bmN0aW9uIHRoYXQgZmV0Y2hlcyBhIGRvY3VtZW50LlxuICAgKiBAc2VlIFtub2RlIGRvY3VtZW50TG9hZGVyIGV4YW1wbGVde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9kaWdpdGFsYmF6YWFyL2pzb25sZC5qcy9ibG9iL21hc3Rlci9saWIvZG9jdW1lbnRMb2FkZXJzL25vZGUuanN9XG4gICAqIEBzZWUgW3hociBkb2N1bWVudExvYWRlciBleGFtcGxlXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZGlnaXRhbGJhemFhci9qc29ubGQuanMvYmxvYi9tYXN0ZXIvbGliL2RvY3VtZW50TG9hZGVycy94aHIuanN9XG4gICAqXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYVxuICAgKiB1cmwgdGhlbiBmZXRjaGVzIGEganNvbmxkIGRvY3VtZW50LlxuICAgKi9cbiAgcmV0dXJuIGFzeW5jIHVybCA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbnRleHRzLmdldCh1cmwpO1xuICAgIGlmKGNvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGV4dFVybDogbnVsbCxcbiAgICAgICAgZG9jdW1lbnRVcmw6IHVybCxcbiAgICAgICAgZG9jdW1lbnQ6IGNvbnRleHQsXG4gICAgICAgIHRhZzogJ3N0YXRpYydcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudExvYWRlcih1cmwpO1xuICB9O1xufTtcblxuYXBpLnN0cmljdERvY3VtZW50TG9hZGVyID0gYXBpLmV4dGVuZENvbnRleHRMb2FkZXIodXJsID0+IHtcbiAgLyoqXG4gICAqIHN0cmljdERvY3VtZW50TG9hZGVyIGV4dGVuZHMgZXh0ZW5kQ29udGV4dExvYWRlci5cbiAgICogZW5zdXJpbmcgbm8gbmV0d29yayBjYWxscyBhcmUgbWFkZSBzbyB0aGUgb25seSBkb2N1bWVudHNcbiAgICogYXZhaWxhYmxlIGFyZSB0aGUgYnVpbHQtaW4gY29udGV4dHMuXG4gICAqIEBzZWUgZG9jdW1lbnRMb2FkZXIuZXh0ZW5kQ29udGV4dExvYWRlclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gQSB2YWxpZCB1cmwgdG8gYSBqc29ubGQgY29udGV4dC5cbiAgICpcbiAgICogQHRocm93cyB7RXJyb3J9IEFsd2F5cyB0aHJvd3MgYW4gZXJyb3IgaWYgdGhlXG4gICAqIHVybCBpcyBub3QgaW4gdGhlIGNvbnRleHQgbWFwXG4gICAqIChpLmUuLCBub3QgYSBVUkwgZm9yIGEgbG9jYWxseSBhdmFpbGFibGUgY29udGV4dCBkb2N1bWVudCkuXG4gICAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OLUxEIFJlbW90ZURvY3VtZW50XG4gICAqIHRoYXQgaXMgYSBjb3B5IG9mIGEgbG9jYWxseSBhdmFpbGFibGUgY29udGV4dC5cbiAgICovXG4gIHRocm93IG5ldyBFcnJvcihgJHt1cmx9IG5vdCBmb3VuZC5gKTtcbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/documentLoader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/jsonld-signatures.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/jsonld-signatures.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2010-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n/* Core API */\nconst api = {};\nmodule.exports = api;\n\n/* API Constants */\nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/jsonld-signatures/lib/constants.js\");\nObject.assign(api, constants);\n\n// TODO: support `ProofChain`\nconst ProofSet = __webpack_require__(/*! ./ProofSet */ \"(ssr)/./node_modules/jsonld-signatures/lib/ProofSet.js\");\nconst VerificationError = __webpack_require__(/*! ./VerificationError */ \"(ssr)/./node_modules/jsonld-signatures/lib/VerificationError.js\");\n\n/**\n * Derives a proof from the provided document, resulting in a new document\n * with a new `proof` on it as generated by the given cryptographic suite.\n *\n * @param {object} document - The JSON-LD document from which to derive a\n *   new proof.\n *\n * @param {object} options - Options hashmap.\n * @param {LinkedDataSignature} options.suite - The linked data signature\n *   cryptographic suite, containing private key material, with which to sign\n *   the document.\n *\n * @param {ProofPurpose} purpose - A proof purpose instance that will\n *   match proofs to be verified and ensure they were created according to\n *   the appropriate purpose.\n *\n * @param {function} documentLoader  - A secure document loader (it is\n *   recommended to use one that provides static known documents, instead of\n *   fetching from the web) for returning contexts, controller documents, keys,\n *   and other relevant URLs needed for the proof.\n *\n * Advanced optional parameters and overrides:\n *\n * @param {function} [options.expansionMap] - NOT SUPPORTED; do not use.\n * @param {boolean} [options.addSuiteContext=true] - Toggles the default\n *   behavior of each signature suite enforcing the presence of its own\n *   `@context` (if it is not present, it's added to the context list).\n *\n * @returns {Promise<object>} Resolves with signed document.\n */\napi.derive = async function derive(document, {\n  suite, purpose, documentLoader, addSuiteContext = true\n} = {}) {\n  if(typeof document !== 'object') {\n    throw new TypeError('The \"document\" parameter must be an object.');\n  }\n  // Ensure document contains the signature suite specific context URL\n  // or throw an error (in case an advanced user overrides the\n  // `addSuiteContext` flag to false).\n  suite.ensureSuiteContext({document, addSuiteContext});\n\n  try {\n    return await new ProofSet().derive(\n      document, {suite, purpose, documentLoader});\n  } catch(e) {\n    if(!documentLoader && e.name === 'jsonld.InvalidUrl') {\n      const {details: {url}} = e;\n      const err = new Error(\n        `A URL \"${url}\" could not be fetched; you need to pass ` +\n        '\"documentLoader\" or resolve the URL before calling \"derive\".');\n      err.cause = e;\n      throw err;\n    }\n    throw e;\n  }\n};\n\n/**\n * Cryptographically signs the provided document by adding a `proof` section,\n * based on the provided suite and proof purpose.\n *\n * @param {object} document - The JSON-LD document to be signed.\n *\n * @param {object} options - Options hashmap.\n * @param {LinkedDataSignature} options.suite - The linked data signature\n *   cryptographic suite with which to sign the document.\n *\n * @param {ProofPurpose} purpose - A proof purpose instance that will\n *   match proofs to be verified and ensure they were created according to\n *   the appropriate purpose.\n *\n * @param {function} documentLoader  - A secure document loader (it is\n *   recommended to use one that provides static known documents, instead of\n *   fetching from the web) for returning contexts, controller documents, keys,\n *   and other relevant URLs needed for the proof.\n *\n * Advanced optional parameters and overrides:\n *\n * @param {function} [options.expansionMap] - NOT SUPPORTED; do not use.\n * @param {boolean} [options.addSuiteContext=true] - Toggles the default\n *   behavior of each signature suite enforcing the presence of its own\n *   `@context` (if it is not present, it's added to the context list).\n *\n * @returns {Promise<object>} Resolves with signed document.\n */\napi.sign = async function sign(document, {\n  suite, purpose, documentLoader, expansionMap, addSuiteContext = true\n} = {}) {\n  if(expansionMap) {\n    throw new Error('\"expansionMap\" not supported.');\n  }\n  if(typeof document !== 'object') {\n    throw new TypeError('The \"document\" parameter must be an object.');\n  }\n  // Ensure document contains the signature suite specific context URL\n  // or throw an error (in case an advanced user overrides the `addSuiteContext`\n  // flag to false).\n  suite.ensureSuiteContext({document, addSuiteContext});\n\n  try {\n    return await new ProofSet().add(document, {suite, purpose, documentLoader});\n  } catch(e) {\n    if(!documentLoader && e.name === 'jsonld.InvalidUrl') {\n      const {details: {url}} = e;\n      const err = new Error(\n        `A URL \"${url}\" could not be fetched; you need to pass ` +\n        '\"documentLoader\" or resolve the URL before calling \"sign\".');\n      err.cause = e;\n      throw err;\n    }\n    throw e;\n  }\n};\n\n/**\n * Verifies the linked data signature on the provided document.\n *\n * @param {object} document - The JSON-LD document with one or more proofs to be\n *   verified.\n *\n * @param {object} options - The options to use.\n * @param {LinkedDataSignature|LinkedDataSignature[]} options.suite -\n *   Acceptable signature suite instances for verifying the proof(s).\n *\n * @param {ProofPurpose} purpose - A proof purpose instance that will\n *   match proofs to be verified and ensure they were created according to\n *   the appropriate purpose.\n *\n * Advanced optional parameters and overrides:\n *\n * @param {function} [options.documentLoader]  - A custom document loader,\n *   `Promise<RemoteDocument> documentLoader(url)`.\n * @param {function} [options.expansionMap] - NOT SUPPORTED; do not use.\n *\n * @return {Promise<{verified: boolean, results: Array,\n *   error: VerificationError}>}\n *   resolves with an object with a `verified` boolean property that is `true`\n *   if at least one proof matching the given purpose and suite verifies and\n *   `false` otherwise; a `results` property with an array of detailed results;\n *   if `false` an `error` property will be present, with `error.errors`\n *   containing all of the errors that occurred during the verification process.\n */\napi.verify = async function verify(document, {\n  suite, purpose, documentLoader, expansionMap\n} = {}) {\n  if(expansionMap) {\n    throw new Error('\"expansionMap\" not supported.');\n  }\n  if(typeof document !== 'object') {\n    throw new TypeError('The \"document\" parameter must be an object.');\n  }\n  const result = await new ProofSet().verify(\n    document, {suite, purpose, documentLoader});\n  const {error} = result;\n  if(error) {\n    if(!documentLoader && error.name === 'jsonld.InvalidUrl') {\n      const {details: {url}} = error;\n      const urlError = new Error(\n        `A URL \"${url}\" could not be fetched; you need to pass ` +\n        '\"documentLoader\" or resolve the URL before calling \"verify\".');\n      result.error = new VerificationError(urlError);\n    } else {\n      result.error = new VerificationError(error);\n    }\n  }\n  return result;\n};\n\n// expose suite classes\napi.suites = (__webpack_require__(/*! ./suites */ \"(ssr)/./node_modules/jsonld-signatures/lib/suites.js\").suites);\n\n// expose ProofPurpose classes to enable extensions\napi.purposes = (__webpack_require__(/*! ./purposes */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes.js\").purposes);\n\n// expose document loader helpers\nObject.assign(api, __webpack_require__(/*! ./documentLoader */ \"(ssr)/./node_modules/jsonld-signatures/lib/documentLoader.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/jsonld-signatures.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/purposes.js":
/*!********************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/purposes.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst api = {};\nmodule.exports = api;\n\n// TODO: only require dynamically as needed or according to build\napi.purposes = {\n  AssertionProofPurpose: __webpack_require__(/*! ./purposes/AssertionProofPurpose */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes/AssertionProofPurpose.js\"),\n  AuthenticationProofPurpose: __webpack_require__(/*! ./purposes/AuthenticationProofPurpose */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes/AuthenticationProofPurpose.js\"),\n  ControllerProofPurpose: __webpack_require__(/*! ./purposes/ControllerProofPurpose */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes/ControllerProofPurpose.js\"),\n  ProofPurpose: __webpack_require__(/*! ./purposes/ProofPurpose */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes/ProofPurpose.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3B1cnBvc2VzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLHNIQUFrQztBQUNuRSw4QkFBOEIsbUJBQU8sQ0FBQyxnSUFBdUM7QUFDN0UsMEJBQTBCLG1CQUFPLENBQUMsd0hBQW1DO0FBQ3JFLGdCQUFnQixtQkFBTyxDQUFDLG9HQUF5QjtBQUNqRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ubGQtc2lnbmF0dXJlcy9saWIvcHVycG9zZXMuanM/YmM3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxOCBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFwaSA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBhcGk7XG5cbi8vIFRPRE86IG9ubHkgcmVxdWlyZSBkeW5hbWljYWxseSBhcyBuZWVkZWQgb3IgYWNjb3JkaW5nIHRvIGJ1aWxkXG5hcGkucHVycG9zZXMgPSB7XG4gIEFzc2VydGlvblByb29mUHVycG9zZTogcmVxdWlyZSgnLi9wdXJwb3Nlcy9Bc3NlcnRpb25Qcm9vZlB1cnBvc2UnKSxcbiAgQXV0aGVudGljYXRpb25Qcm9vZlB1cnBvc2U6IHJlcXVpcmUoJy4vcHVycG9zZXMvQXV0aGVudGljYXRpb25Qcm9vZlB1cnBvc2UnKSxcbiAgQ29udHJvbGxlclByb29mUHVycG9zZTogcmVxdWlyZSgnLi9wdXJwb3Nlcy9Db250cm9sbGVyUHJvb2ZQdXJwb3NlJyksXG4gIFByb29mUHVycG9zZTogcmVxdWlyZSgnLi9wdXJwb3Nlcy9Qcm9vZlB1cnBvc2UnKVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/purposes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/purposes/AssertionProofPurpose.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/purposes/AssertionProofPurpose.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst ControllerProofPurpose = __webpack_require__(/*! ./ControllerProofPurpose */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes/ControllerProofPurpose.js\");\n\nmodule.exports = class AssertionProofPurpose extends ControllerProofPurpose {\n  constructor({\n    term = 'assertionMethod', controller,\n    date, maxTimestampDelta = Infinity} = {}) {\n    super({term, controller, date, maxTimestampDelta});\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3B1cnBvc2VzL0Fzc2VydGlvblByb29mUHVycG9zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYiwrQkFBK0IsbUJBQU8sQ0FBQywrR0FBMEI7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxJQUFJO0FBQzVDLFdBQVcsMENBQTBDO0FBQ3JEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3B1cnBvc2VzL0Fzc2VydGlvblByb29mUHVycG9zZS5qcz9kYmFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE4IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29udHJvbGxlclByb29mUHVycG9zZSA9IHJlcXVpcmUoJy4vQ29udHJvbGxlclByb29mUHVycG9zZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEFzc2VydGlvblByb29mUHVycG9zZSBleHRlbmRzIENvbnRyb2xsZXJQcm9vZlB1cnBvc2Uge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgdGVybSA9ICdhc3NlcnRpb25NZXRob2QnLCBjb250cm9sbGVyLFxuICAgIGRhdGUsIG1heFRpbWVzdGFtcERlbHRhID0gSW5maW5pdHl9ID0ge30pIHtcbiAgICBzdXBlcih7dGVybSwgY29udHJvbGxlciwgZGF0ZSwgbWF4VGltZXN0YW1wRGVsdGF9KTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/purposes/AssertionProofPurpose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/purposes/AuthenticationProofPurpose.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/purposes/AuthenticationProofPurpose.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst ControllerProofPurpose = __webpack_require__(/*! ./ControllerProofPurpose */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes/ControllerProofPurpose.js\");\n\nmodule.exports = class AuthenticationProofPurpose extends\n  ControllerProofPurpose {\n  constructor({\n    term = 'authentication', controller,\n    challenge, date, domain, maxTimestampDelta = Infinity} = {}) {\n    super({term, controller, date, maxTimestampDelta});\n    if(typeof challenge !== 'string') {\n      throw new TypeError('\"challenge\" must be a string.');\n    }\n    if(domain !== undefined && typeof domain !== 'string') {\n      throw new TypeError('\"domain\" must be a string.');\n    }\n    this.challenge = challenge;\n    this.domain = domain;\n  }\n\n  async validate(proof, {verificationMethod, documentLoader, expansionMap}) {\n    try {\n      // check challenge\n      if(proof.challenge !== this.challenge) {\n        throw new Error(\n          'The challenge is not as expected; ' +\n          `challenge=\"${proof.challenge}\", expected=\"${this.challenge}\"`);\n      }\n\n      // check domain\n      if(this.domain !== undefined) {\n        // `proof.domain` must equal `this.domain` OR if `proof.domain` is\n        // an array, the array must include `this.domain` as an element\n        const {domain} = proof;\n        if(!(domain === this.domain ||\n          (Array.isArray(domain) && domain.includes(this.domain)))) {\n          throw new Error(\n            'The domain is not as expected; ' +\n            `domain=${JSON.stringify(domain)}, ` +\n            `expected=${JSON.stringify(this.domain)}`);\n        }\n      }\n\n      return super.validate(\n        proof, {verificationMethod, documentLoader, expansionMap});\n    } catch(error) {\n      return {valid: false, error};\n    }\n  }\n\n  async update(proof, {document, suite, documentLoader, expansionMap}) {\n    proof = await super.update(\n      proof, {document, suite, documentLoader, expansionMap});\n    proof.challenge = this.challenge;\n    if(this.domain !== undefined) {\n      proof.domain = this.domain;\n    }\n    return proof;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3B1cnBvc2VzL0F1dGhlbnRpY2F0aW9uUHJvb2ZQdXJwb3NlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNhOztBQUViLCtCQUErQixtQkFBTyxDQUFDLCtHQUEwQjs7QUFFakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsSUFBSTtBQUMvRCxXQUFXLDBDQUEwQztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCLGlEQUFpRDtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3Qyx3QkFBd0IsZ0JBQWdCLGVBQWUsZUFBZTtBQUN0RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUMsc0JBQXNCLHVCQUF1QjtBQUM3Qyx3QkFBd0IsNEJBQTRCO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsaURBQWlEO0FBQ2pFLE1BQU07QUFDTixjQUFjO0FBQ2Q7QUFDQTs7QUFFQSx1QkFBdUIsOENBQThDO0FBQ3JFO0FBQ0EsY0FBYyw4Q0FBOEM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3B1cnBvc2VzL0F1dGhlbnRpY2F0aW9uUHJvb2ZQdXJwb3NlLmpzPzJiMjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb250cm9sbGVyUHJvb2ZQdXJwb3NlID0gcmVxdWlyZSgnLi9Db250cm9sbGVyUHJvb2ZQdXJwb3NlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQXV0aGVudGljYXRpb25Qcm9vZlB1cnBvc2UgZXh0ZW5kc1xuICBDb250cm9sbGVyUHJvb2ZQdXJwb3NlIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHRlcm0gPSAnYXV0aGVudGljYXRpb24nLCBjb250cm9sbGVyLFxuICAgIGNoYWxsZW5nZSwgZGF0ZSwgZG9tYWluLCBtYXhUaW1lc3RhbXBEZWx0YSA9IEluZmluaXR5fSA9IHt9KSB7XG4gICAgc3VwZXIoe3Rlcm0sIGNvbnRyb2xsZXIsIGRhdGUsIG1heFRpbWVzdGFtcERlbHRhfSk7XG4gICAgaWYodHlwZW9mIGNoYWxsZW5nZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2hhbGxlbmdlXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICB9XG4gICAgaWYoZG9tYWluICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGRvbWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZG9tYWluXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICB9XG4gICAgdGhpcy5jaGFsbGVuZ2UgPSBjaGFsbGVuZ2U7XG4gICAgdGhpcy5kb21haW4gPSBkb21haW47XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZShwcm9vZiwge3ZlcmlmaWNhdGlvbk1ldGhvZCwgZG9jdW1lbnRMb2FkZXIsIGV4cGFuc2lvbk1hcH0pIHtcbiAgICB0cnkge1xuICAgICAgLy8gY2hlY2sgY2hhbGxlbmdlXG4gICAgICBpZihwcm9vZi5jaGFsbGVuZ2UgIT09IHRoaXMuY2hhbGxlbmdlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnVGhlIGNoYWxsZW5nZSBpcyBub3QgYXMgZXhwZWN0ZWQ7ICcgK1xuICAgICAgICAgIGBjaGFsbGVuZ2U9XCIke3Byb29mLmNoYWxsZW5nZX1cIiwgZXhwZWN0ZWQ9XCIke3RoaXMuY2hhbGxlbmdlfVwiYCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNoZWNrIGRvbWFpblxuICAgICAgaWYodGhpcy5kb21haW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBgcHJvb2YuZG9tYWluYCBtdXN0IGVxdWFsIGB0aGlzLmRvbWFpbmAgT1IgaWYgYHByb29mLmRvbWFpbmAgaXNcbiAgICAgICAgLy8gYW4gYXJyYXksIHRoZSBhcnJheSBtdXN0IGluY2x1ZGUgYHRoaXMuZG9tYWluYCBhcyBhbiBlbGVtZW50XG4gICAgICAgIGNvbnN0IHtkb21haW59ID0gcHJvb2Y7XG4gICAgICAgIGlmKCEoZG9tYWluID09PSB0aGlzLmRvbWFpbiB8fFxuICAgICAgICAgIChBcnJheS5pc0FycmF5KGRvbWFpbikgJiYgZG9tYWluLmluY2x1ZGVzKHRoaXMuZG9tYWluKSkpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1RoZSBkb21haW4gaXMgbm90IGFzIGV4cGVjdGVkOyAnICtcbiAgICAgICAgICAgIGBkb21haW49JHtKU09OLnN0cmluZ2lmeShkb21haW4pfSwgYCArXG4gICAgICAgICAgICBgZXhwZWN0ZWQ9JHtKU09OLnN0cmluZ2lmeSh0aGlzLmRvbWFpbil9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyLnZhbGlkYXRlKFxuICAgICAgICBwcm9vZiwge3ZlcmlmaWNhdGlvbk1ldGhvZCwgZG9jdW1lbnRMb2FkZXIsIGV4cGFuc2lvbk1hcH0pO1xuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlLCBlcnJvcn07XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlKHByb29mLCB7ZG9jdW1lbnQsIHN1aXRlLCBkb2N1bWVudExvYWRlciwgZXhwYW5zaW9uTWFwfSkge1xuICAgIHByb29mID0gYXdhaXQgc3VwZXIudXBkYXRlKFxuICAgICAgcHJvb2YsIHtkb2N1bWVudCwgc3VpdGUsIGRvY3VtZW50TG9hZGVyLCBleHBhbnNpb25NYXB9KTtcbiAgICBwcm9vZi5jaGFsbGVuZ2UgPSB0aGlzLmNoYWxsZW5nZTtcbiAgICBpZih0aGlzLmRvbWFpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9vZi5kb21haW4gPSB0aGlzLmRvbWFpbjtcbiAgICB9XG4gICAgcmV0dXJuIHByb29mO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/purposes/AuthenticationProofPurpose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/purposes/ControllerProofPurpose.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/purposes/ControllerProofPurpose.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst constants = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/jsonld-signatures/lib/constants.js\");\nconst jsonld = __webpack_require__(/*! jsonld */ \"(ssr)/./node_modules/jsonld/lib/index.js\");\nconst ProofPurpose = __webpack_require__(/*! ./ProofPurpose */ \"(ssr)/./node_modules/jsonld-signatures/lib/purposes/ProofPurpose.js\");\n\n// DID documents can be specially optimized\nconst DID_CONTEXT_V1 = 'https://www.w3.org/ns/did/v1';\n// verification relationship terms that are known to appear in DID documents\nconst DID_VR_TERMS = [\n  'assertionMethod',\n  'authentication',\n  'capabilityInvocation',\n  'capabilityDelegation',\n  'keyAgreement',\n  'verificationMethod'\n];\n\nmodule.exports = class ControllerProofPurpose extends ProofPurpose {\n  /**\n   * Creates a proof purpose that will validate whether or not the verification\n   * method in a proof was authorized by its declared controller for the\n   * proof's purpose.\n   *\n   * @param term {string} the `proofPurpose` term, as defined in the\n   *    SECURITY_CONTEXT_URL `@context` or a URI if not defined in such.\n   * @param [controller] {object} the description of the controller, if it\n   *   is not to be dereferenced via a `documentLoader`.\n   * @param [date] {string or Date or integer} the expected date for\n   *   the creation of the proof.\n   * @param [maxTimestampDelta] {integer} a maximum number of seconds that\n   *   the date on the signature can deviate from, defaults to `Infinity`.\n   */\n  constructor({term, controller, date, maxTimestampDelta = Infinity} = {}) {\n    super({term, date, maxTimestampDelta});\n    if(controller !== undefined) {\n      if(typeof controller !== 'object') {\n        throw new TypeError('\"controller\" must be an object.');\n      }\n      this.controller = controller;\n    }\n    this._termDefinedByDIDContext = DID_VR_TERMS.includes(term);\n  }\n\n  /**\n   * Validates the purpose of a proof. This method is called during\n   * proof verification, after the proof value has been checked against the\n   * given verification method (e.g. in the case of a digital signature, the\n   * signature has been cryptographically verified against the public key).\n   *\n   * @param proof\n   * @param verificationMethod\n   * @param documentLoader\n   * @param expansionMap\n   *\n   * @throws {Error} If verification method not authorized by controller\n   * @throws {Error} If proof's created timestamp is out of range\n   *\n   * @returns {Promise<{valid: boolean, error: Error}>}\n   */\n  async validate(proof, {verificationMethod, documentLoader, expansionMap}) {\n    try {\n      const result = await super.validate(\n        proof, {verificationMethod, documentLoader, expansionMap});\n      if(!result.valid) {\n        throw result.error;\n      }\n\n      const {id: verificationId} = verificationMethod;\n      if(typeof verificationId !== 'string') {\n        throw new Error(\n          `Verification method ID \"${verificationMethod.id}\" ` +\n          'must be a string.');\n      }\n      const {term, _termDefinedByDIDContext} = this;\n\n      // if no `controller` specified, use verification method's\n      if(this.controller) {\n        result.controller = this.controller;\n      } else {\n        const {controller} = verificationMethod;\n        let controllerId;\n        if(controller) {\n          if(typeof controller === 'object') {\n            controllerId = controller.id;\n          } else if(typeof controller !== 'string') {\n            throw new TypeError(\n              '\"controller\" must be a string representing a URL.');\n          } else {\n            controllerId = controller;\n          }\n        }\n\n        // apply optimization to controller documents that are DID documents;\n        // if `term` is one of those defined by the DID context\n        let {document} = await documentLoader(controllerId);\n        const mustFrame = !(_termDefinedByDIDContext &&\n          document['@context'] === DID_CONTEXT_V1 ||\n          (Array.isArray(document['@context']) &&\n          document['@context'][0] === DID_CONTEXT_V1));\n        if(mustFrame) {\n          // Note: `expansionMap` is intentionally not passed; we can safely\n          // drop properties here and must allow for it\n          document = await jsonld.frame(document, {\n            '@context': constants.SECURITY_CONTEXT_URL,\n            id: controllerId,\n            // this term must be in the JSON-LD controller document or\n            // verification will fail\n            [term]: {\n              '@embed': '@never',\n              id: verificationId\n            }\n          }, {documentLoader, compactToRelative: false, safe: true});\n        }\n        result.controller = document;\n      }\n\n      const verificationMethods = jsonld.getValues(result.controller, term);\n      result.valid = verificationMethods.some(vm =>\n        vm === verificationId ||\n        (typeof vm === 'object' && vm.id === verificationId));\n      if(!result.valid) {\n        throw new Error(\n          `Verification method \"${verificationMethod.id}\" not authorized ` +\n          `by controller for proof purpose \"${this.term}\".`);\n      }\n      return result;\n    } catch(error) {\n      return {valid: false, error};\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/purposes/ControllerProofPurpose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/purposes/ProofPurpose.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/purposes/ProofPurpose.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nmodule.exports = class ProofPurpose {\n  /**\n   * @param term {string} the `proofPurpose` term, as defined in the\n   *    SECURITY_CONTEXT_URL `@context` or a URI if not defined in such.\n   * @param [date] {string or Date or integer} the expected date for\n   *   the creation of the proof.\n   * @param [maxTimestampDelta] {integer} a maximum number of seconds that\n   *   the date on the signature can deviate from, defaults to `Infinity`.\n   */\n  constructor({term, date, maxTimestampDelta = Infinity} = {}) {\n    if(term === undefined) {\n      throw new Error('\"term\" is required.');\n    }\n    if(maxTimestampDelta !== undefined &&\n      typeof maxTimestampDelta !== 'number') {\n      throw new TypeError('\"maxTimestampDelta\" must be a number.');\n    }\n    this.term = term;\n    if(date !== undefined) {\n      this.date = new Date(date);\n      if(isNaN(this.date)) {\n        throw TypeError(`\"date\" \"${date}\" is not a valid date.`);\n      }\n    }\n    this.maxTimestampDelta = maxTimestampDelta;\n  }\n\n  /**\n   * Called to validate the purpose of a proof. This method is called during\n   * proof verification, after the proof value has been checked against the\n   * given verification method (e.g. in the case of a digital signature, the\n   * signature has been cryptographically verified against the public key).\n   *\n   * @param proof {object} the proof, in the `constants.SECURITY_CONTEXT_URL`,\n   *   with the matching purpose to validate.\n   *\n   * @return {Promise<object>} resolves to an object with `valid` and `error`.\n   */\n  async validate(\n    proof, {/*document, suite, verificationMethod,\n      documentLoader,*/ expansionMap}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n\n    try {\n      // check expiration\n      if(this.maxTimestampDelta !== Infinity) {\n        const expected = (this.date || new Date()).getTime();\n        const delta = this.maxTimestampDelta * 1000;\n        const created = new Date(proof.created).getTime();\n        // comparing this way handles NaN case where `created` is invalid\n        if(!(created >= (expected - delta) && created <= (expected + delta))) {\n          throw new Error('The proof\\'s created timestamp is out of range.');\n        }\n      }\n      return {valid: true};\n    } catch(error) {\n      return {valid: false, error};\n    }\n  }\n\n  /**\n   * Called to update a proof when it is being created, adding any properties\n   * specific to this purpose. This method is called prior to the proof\n   * value being generated such that any properties added may be, for example,\n   * included in a digital signature value.\n   *\n   * @param proof {object} the proof, in the `constants.SECURITY_CONTEXT_URL`\n   *   to update.\n   *\n   * @return {Promise<object>} resolves to the proof instance (in the\n   *   `constants.SECURITY_CONTEXT_URL`.\n   */\n  async update(proof, {/*document, suite, documentLoader,*/ expansionMap}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n    proof.proofPurpose = this.term;\n    return proof;\n  }\n\n  /**\n   * Determines if the given proof has a purpose that matches this instance,\n   * i.e. this ProofPurpose instance should be used to validate the given\n   * proof.\n   *\n   * @param proof {object} the proof to check.\n   *\n   * @return {Promise<boolean>} `true` if there's a match, `false` if not.\n   */\n  async match(proof, {/* document, documentLoader,*/ expansionMap}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n    return proof.proofPurpose === this.term;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3B1cnBvc2VzL1Byb29mUHVycG9zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYjtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQSxvQkFBb0IsMkJBQTJCO0FBQy9DO0FBQ0EsaUNBQWlDLFNBQVM7QUFDMUM7QUFDQTtBQUNBLGVBQWUsMENBQTBDLElBQUk7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxLQUFLO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQSxjQUFjLGlCQUFpQjtBQUMvQjtBQUNBO0FBQ0EsWUFBWTtBQUNaLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxNQUFNO0FBQ04sY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBLGNBQWMsaUJBQWlCO0FBQy9CO0FBQ0E7QUFDQSx1QkFBdUIsa0RBQWtEO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBLHNCQUFzQiw0Q0FBNEM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb25sZC1zaWduYXR1cmVzL2xpYi9wdXJwb3Nlcy9Qcm9vZlB1cnBvc2UuanM/NDdjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxOCBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUHJvb2ZQdXJwb3NlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB0ZXJtIHtzdHJpbmd9IHRoZSBgcHJvb2ZQdXJwb3NlYCB0ZXJtLCBhcyBkZWZpbmVkIGluIHRoZVxuICAgKiAgICBTRUNVUklUWV9DT05URVhUX1VSTCBgQGNvbnRleHRgIG9yIGEgVVJJIGlmIG5vdCBkZWZpbmVkIGluIHN1Y2guXG4gICAqIEBwYXJhbSBbZGF0ZV0ge3N0cmluZyBvciBEYXRlIG9yIGludGVnZXJ9IHRoZSBleHBlY3RlZCBkYXRlIGZvclxuICAgKiAgIHRoZSBjcmVhdGlvbiBvZiB0aGUgcHJvb2YuXG4gICAqIEBwYXJhbSBbbWF4VGltZXN0YW1wRGVsdGFdIHtpbnRlZ2VyfSBhIG1heGltdW0gbnVtYmVyIG9mIHNlY29uZHMgdGhhdFxuICAgKiAgIHRoZSBkYXRlIG9uIHRoZSBzaWduYXR1cmUgY2FuIGRldmlhdGUgZnJvbSwgZGVmYXVsdHMgdG8gYEluZmluaXR5YC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHt0ZXJtLCBkYXRlLCBtYXhUaW1lc3RhbXBEZWx0YSA9IEluZmluaXR5fSA9IHt9KSB7XG4gICAgaWYodGVybSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1widGVybVwiIGlzIHJlcXVpcmVkLicpO1xuICAgIH1cbiAgICBpZihtYXhUaW1lc3RhbXBEZWx0YSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICB0eXBlb2YgbWF4VGltZXN0YW1wRGVsdGEgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcIm1heFRpbWVzdGFtcERlbHRhXCIgbXVzdCBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gICAgdGhpcy50ZXJtID0gdGVybTtcbiAgICBpZihkYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgaWYoaXNOYU4odGhpcy5kYXRlKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYFwiZGF0ZVwiIFwiJHtkYXRlfVwiIGlzIG5vdCBhIHZhbGlkIGRhdGUuYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWF4VGltZXN0YW1wRGVsdGEgPSBtYXhUaW1lc3RhbXBEZWx0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdG8gdmFsaWRhdGUgdGhlIHB1cnBvc2Ugb2YgYSBwcm9vZi4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGR1cmluZ1xuICAgKiBwcm9vZiB2ZXJpZmljYXRpb24sIGFmdGVyIHRoZSBwcm9vZiB2YWx1ZSBoYXMgYmVlbiBjaGVja2VkIGFnYWluc3QgdGhlXG4gICAqIGdpdmVuIHZlcmlmaWNhdGlvbiBtZXRob2QgKGUuZy4gaW4gdGhlIGNhc2Ugb2YgYSBkaWdpdGFsIHNpZ25hdHVyZSwgdGhlXG4gICAqIHNpZ25hdHVyZSBoYXMgYmVlbiBjcnlwdG9ncmFwaGljYWxseSB2ZXJpZmllZCBhZ2FpbnN0IHRoZSBwdWJsaWMga2V5KS5cbiAgICpcbiAgICogQHBhcmFtIHByb29mIHtvYmplY3R9IHRoZSBwcm9vZiwgaW4gdGhlIGBjb25zdGFudHMuU0VDVVJJVFlfQ09OVEVYVF9VUkxgLFxuICAgKiAgIHdpdGggdGhlIG1hdGNoaW5nIHB1cnBvc2UgdG8gdmFsaWRhdGUuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8b2JqZWN0Pn0gcmVzb2x2ZXMgdG8gYW4gb2JqZWN0IHdpdGggYHZhbGlkYCBhbmQgYGVycm9yYC5cbiAgICovXG4gIGFzeW5jIHZhbGlkYXRlKFxuICAgIHByb29mLCB7Lypkb2N1bWVudCwgc3VpdGUsIHZlcmlmaWNhdGlvbk1ldGhvZCxcbiAgICAgIGRvY3VtZW50TG9hZGVyLCovIGV4cGFuc2lvbk1hcH0pIHtcbiAgICBpZihleHBhbnNpb25NYXApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJleHBhbnNpb25NYXBcIiBub3Qgc3VwcG9ydGVkLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBjaGVjayBleHBpcmF0aW9uXG4gICAgICBpZih0aGlzLm1heFRpbWVzdGFtcERlbHRhICE9PSBJbmZpbml0eSkge1xuICAgICAgICBjb25zdCBleHBlY3RlZCA9ICh0aGlzLmRhdGUgfHwgbmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICBjb25zdCBkZWx0YSA9IHRoaXMubWF4VGltZXN0YW1wRGVsdGEgKiAxMDAwO1xuICAgICAgICBjb25zdCBjcmVhdGVkID0gbmV3IERhdGUocHJvb2YuY3JlYXRlZCkuZ2V0VGltZSgpO1xuICAgICAgICAvLyBjb21wYXJpbmcgdGhpcyB3YXkgaGFuZGxlcyBOYU4gY2FzZSB3aGVyZSBgY3JlYXRlZGAgaXMgaW52YWxpZFxuICAgICAgICBpZighKGNyZWF0ZWQgPj0gKGV4cGVjdGVkIC0gZGVsdGEpICYmIGNyZWF0ZWQgPD0gKGV4cGVjdGVkICsgZGVsdGEpKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb29mXFwncyBjcmVhdGVkIHRpbWVzdGFtcCBpcyBvdXQgb2YgcmFuZ2UuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7dmFsaWQ6IHRydWV9O1xuICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlLCBlcnJvcn07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB0byB1cGRhdGUgYSBwcm9vZiB3aGVuIGl0IGlzIGJlaW5nIGNyZWF0ZWQsIGFkZGluZyBhbnkgcHJvcGVydGllc1xuICAgKiBzcGVjaWZpYyB0byB0aGlzIHB1cnBvc2UuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBwcmlvciB0byB0aGUgcHJvb2ZcbiAgICogdmFsdWUgYmVpbmcgZ2VuZXJhdGVkIHN1Y2ggdGhhdCBhbnkgcHJvcGVydGllcyBhZGRlZCBtYXkgYmUsIGZvciBleGFtcGxlLFxuICAgKiBpbmNsdWRlZCBpbiBhIGRpZ2l0YWwgc2lnbmF0dXJlIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0gcHJvb2Yge29iamVjdH0gdGhlIHByb29mLCBpbiB0aGUgYGNvbnN0YW50cy5TRUNVUklUWV9DT05URVhUX1VSTGBcbiAgICogICB0byB1cGRhdGUuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8b2JqZWN0Pn0gcmVzb2x2ZXMgdG8gdGhlIHByb29mIGluc3RhbmNlIChpbiB0aGVcbiAgICogICBgY29uc3RhbnRzLlNFQ1VSSVRZX0NPTlRFWFRfVVJMYC5cbiAgICovXG4gIGFzeW5jIHVwZGF0ZShwcm9vZiwgey8qZG9jdW1lbnQsIHN1aXRlLCBkb2N1bWVudExvYWRlciwqLyBleHBhbnNpb25NYXB9KSB7XG4gICAgaWYoZXhwYW5zaW9uTWFwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiZXhwYW5zaW9uTWFwXCIgbm90IHN1cHBvcnRlZC4nKTtcbiAgICB9XG4gICAgcHJvb2YucHJvb2ZQdXJwb3NlID0gdGhpcy50ZXJtO1xuICAgIHJldHVybiBwcm9vZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBwcm9vZiBoYXMgYSBwdXJwb3NlIHRoYXQgbWF0Y2hlcyB0aGlzIGluc3RhbmNlLFxuICAgKiBpLmUuIHRoaXMgUHJvb2ZQdXJwb3NlIGluc3RhbmNlIHNob3VsZCBiZSB1c2VkIHRvIHZhbGlkYXRlIHRoZSBnaXZlblxuICAgKiBwcm9vZi5cbiAgICpcbiAgICogQHBhcmFtIHByb29mIHtvYmplY3R9IHRoZSBwcm9vZiB0byBjaGVjay5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gYHRydWVgIGlmIHRoZXJlJ3MgYSBtYXRjaCwgYGZhbHNlYCBpZiBub3QuXG4gICAqL1xuICBhc3luYyBtYXRjaChwcm9vZiwgey8qIGRvY3VtZW50LCBkb2N1bWVudExvYWRlciwqLyBleHBhbnNpb25NYXB9KSB7XG4gICAgaWYoZXhwYW5zaW9uTWFwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiZXhwYW5zaW9uTWFwXCIgbm90IHN1cHBvcnRlZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb29mLnByb29mUHVycG9zZSA9PT0gdGhpcy50ZXJtO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/purposes/ProofPurpose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/sha256digest.js":
/*!************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/sha256digest.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\n\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nmodule.exports = {\n  /**\n   * Hashes a string of data using SHA-256.\n   *\n   * @param {string} string - the string to hash.\n   *\n   * @return {Uint8Array} the hash digest.\n   */\n  async sha256digest({string}) {\n    return new Uint8Array(\n      crypto.createHash('sha256').update(string).digest()\n    );\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3NoYTI1NmRpZ2VzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDYTtBQUNiLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQSxzQkFBc0IsT0FBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb25sZC1zaWduYXR1cmVzL2xpYi9zaGEyNTZkaWdlc3QuanM/ZDc0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDIxIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIEhhc2hlcyBhIHN0cmluZyBvZiBkYXRhIHVzaW5nIFNIQS0yNTYuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgLSB0aGUgc3RyaW5nIHRvIGhhc2guXG4gICAqXG4gICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IHRoZSBoYXNoIGRpZ2VzdC5cbiAgICovXG4gIGFzeW5jIHNoYTI1NmRpZ2VzdCh7c3RyaW5nfSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShcbiAgICAgIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoc3RyaW5nKS5kaWdlc3QoKVxuICAgICk7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/sha256digest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/suites.js":
/*!******************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/suites.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst api = {};\nmodule.exports = api;\n\n// TODO: only require dynamically as needed or according to build\napi.suites = {\n  LinkedDataProof: __webpack_require__(/*! ./suites/LinkedDataProof */ \"(ssr)/./node_modules/jsonld-signatures/lib/suites/LinkedDataProof.js\"),\n  LinkedDataSignature: __webpack_require__(/*! ./suites/LinkedDataSignature */ \"(ssr)/./node_modules/jsonld-signatures/lib/suites/LinkedDataSignature.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3N1aXRlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyxzR0FBMEI7QUFDckQsdUJBQXVCLG1CQUFPLENBQUMsOEdBQThCO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb25sZC1zaWduYXR1cmVzL2xpYi9zdWl0ZXMuanM/ZDIyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxOCBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGFwaSA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBhcGk7XG5cbi8vIFRPRE86IG9ubHkgcmVxdWlyZSBkeW5hbWljYWxseSBhcyBuZWVkZWQgb3IgYWNjb3JkaW5nIHRvIGJ1aWxkXG5hcGkuc3VpdGVzID0ge1xuICBMaW5rZWREYXRhUHJvb2Y6IHJlcXVpcmUoJy4vc3VpdGVzL0xpbmtlZERhdGFQcm9vZicpLFxuICBMaW5rZWREYXRhU2lnbmF0dXJlOiByZXF1aXJlKCcuL3N1aXRlcy9MaW5rZWREYXRhU2lnbmF0dXJlJylcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/suites.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/suites/LinkedDataProof.js":
/*!**********************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/suites/LinkedDataProof.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * Copyright (c) 2018-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nmodule.exports = class LinkedDataProof {\n  constructor({type} = {}) {\n    if(typeof type !== 'string') {\n      throw new TypeError('A LinkedDataProof must have a \"type\".');\n    }\n    this.type = type;\n  }\n\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} options.document - The document to be signed.\n   * @param {ProofPurpose} options.purpose - The proof purpose instance.\n   * @param {Array} options.proofSet - Any existing proof set.\n   * @param {function} options.documentLoader - The document loader to use.\n   * @param {function} options.expansionMap - NOT SUPPORTED; do not use.\n   *\n   * @returns {Promise<object>} Resolves with the created proof object.\n   */\n  async createProof({\n    /* document, purpose, proofSet, documentLoader, expansionMap */\n  }) {\n    throw new Error('\"createProof\" must be implemented in a derived class.');\n  }\n\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} options.document - The document from which to derive\n   *   a new document and proof.\n   * @param {ProofPurpose} options.purpose - The proof purpose instance.\n   * @param {Array} options.proofSet - Any existing proof set.\n   * @param {function} options.documentLoader - The document loader to use.\n   *\n   * @returns {Promise<object>} Resolves with the new document with a new\n   *   `proof` field.\n   */\n  async derive({\n    /* document, purpose, proofSet, documentLoader */\n  }) {\n    throw new Error('\"deriveProof\" must be implemented in a derived class.');\n  }\n\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} options.proof - The proof to be verified.\n   * @param {object} options.document - The document the proof applies to.\n   * @param {ProofPurpose} options.purpose - The proof purpose instance.\n   * @param {Array} options.proofSet - Any existing proof set.\n   * @param {function} options.documentLoader - The document loader to use.\n   * @param {function} options.expansionMap - NOT SUPPORTED; do not use.\n   *\n   * @returns {Promise<{object}>} Resolves with the verification result.\n   */\n  async verifyProof({\n    /* proof, document, purpose, proofSet, documentLoader, expansionMap */\n  }) {\n    throw new Error('\"verifyProof\" must be implemented in a derived class.');\n  }\n\n  /**\n   * Checks whether a given proof exists in the document.\n   *\n   * @param {object} options - The options to use.\n   * @param {object} options.proof - The proof to match.\n   *\n   * @returns {Promise<boolean>} Whether a match for the proof was found.\n   */\n  async matchProof({\n    proof /*, document, purpose, documentLoader, expansionMap */\n  }) {\n    return proof.type === this.type;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3N1aXRlcy9MaW5rZWREYXRhUHJvb2YuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ2E7O0FBRWI7QUFDQSxlQUFlLE1BQU0sSUFBSTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGNBQWM7QUFDM0IsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsVUFBVTtBQUN2QixhQUFhLFVBQVUsc0NBQXNDO0FBQzdEO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxjQUFjO0FBQzNCLGFBQWEsT0FBTztBQUNwQixhQUFhLFVBQVU7QUFDdkI7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxjQUFjO0FBQzNCLGFBQWEsT0FBTztBQUNwQixhQUFhLFVBQVU7QUFDdkIsYUFBYSxVQUFVLHNDQUFzQztBQUM3RDtBQUNBLGVBQWUsU0FBUyxPQUFPLEdBQUc7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3N1aXRlcy9MaW5rZWREYXRhUHJvb2YuanM/OWVkOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxOC0yMDIzIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBMaW5rZWREYXRhUHJvb2Yge1xuICBjb25zdHJ1Y3Rvcih7dHlwZX0gPSB7fSkge1xuICAgIGlmKHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBMaW5rZWREYXRhUHJvb2YgbXVzdCBoYXZlIGEgXCJ0eXBlXCIuJyk7XG4gICAgfVxuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byB1c2UuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmRvY3VtZW50IC0gVGhlIGRvY3VtZW50IHRvIGJlIHNpZ25lZC5cbiAgICogQHBhcmFtIHtQcm9vZlB1cnBvc2V9IG9wdGlvbnMucHVycG9zZSAtIFRoZSBwcm9vZiBwdXJwb3NlIGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnByb29mU2V0IC0gQW55IGV4aXN0aW5nIHByb29mIHNldC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucy5kb2N1bWVudExvYWRlciAtIFRoZSBkb2N1bWVudCBsb2FkZXIgdG8gdXNlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLmV4cGFuc2lvbk1hcCAtIE5PVCBTVVBQT1JURUQ7IGRvIG5vdCB1c2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFJlc29sdmVzIHdpdGggdGhlIGNyZWF0ZWQgcHJvb2Ygb2JqZWN0LlxuICAgKi9cbiAgYXN5bmMgY3JlYXRlUHJvb2Yoe1xuICAgIC8qIGRvY3VtZW50LCBwdXJwb3NlLCBwcm9vZlNldCwgZG9jdW1lbnRMb2FkZXIsIGV4cGFuc2lvbk1hcCAqL1xuICB9KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcImNyZWF0ZVByb29mXCIgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhIGRlcml2ZWQgY2xhc3MuJyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byB1c2UuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmRvY3VtZW50IC0gVGhlIGRvY3VtZW50IGZyb20gd2hpY2ggdG8gZGVyaXZlXG4gICAqICAgYSBuZXcgZG9jdW1lbnQgYW5kIHByb29mLlxuICAgKiBAcGFyYW0ge1Byb29mUHVycG9zZX0gb3B0aW9ucy5wdXJwb3NlIC0gVGhlIHByb29mIHB1cnBvc2UgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7QXJyYXl9IG9wdGlvbnMucHJvb2ZTZXQgLSBBbnkgZXhpc3RpbmcgcHJvb2Ygc2V0LlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLmRvY3VtZW50TG9hZGVyIC0gVGhlIGRvY3VtZW50IGxvYWRlciB0byB1c2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFJlc29sdmVzIHdpdGggdGhlIG5ldyBkb2N1bWVudCB3aXRoIGEgbmV3XG4gICAqICAgYHByb29mYCBmaWVsZC5cbiAgICovXG4gIGFzeW5jIGRlcml2ZSh7XG4gICAgLyogZG9jdW1lbnQsIHB1cnBvc2UsIHByb29mU2V0LCBkb2N1bWVudExvYWRlciAqL1xuICB9KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcImRlcml2ZVByb29mXCIgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhIGRlcml2ZWQgY2xhc3MuJyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byB1c2UuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLnByb29mIC0gVGhlIHByb29mIHRvIGJlIHZlcmlmaWVkLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5kb2N1bWVudCAtIFRoZSBkb2N1bWVudCB0aGUgcHJvb2YgYXBwbGllcyB0by5cbiAgICogQHBhcmFtIHtQcm9vZlB1cnBvc2V9IG9wdGlvbnMucHVycG9zZSAtIFRoZSBwcm9vZiBwdXJwb3NlIGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge0FycmF5fSBvcHRpb25zLnByb29mU2V0IC0gQW55IGV4aXN0aW5nIHByb29mIHNldC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb3B0aW9ucy5kb2N1bWVudExvYWRlciAtIFRoZSBkb2N1bWVudCBsb2FkZXIgdG8gdXNlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLmV4cGFuc2lvbk1hcCAtIE5PVCBTVVBQT1JURUQ7IGRvIG5vdCB1c2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHtvYmplY3R9Pn0gUmVzb2x2ZXMgd2l0aCB0aGUgdmVyaWZpY2F0aW9uIHJlc3VsdC5cbiAgICovXG4gIGFzeW5jIHZlcmlmeVByb29mKHtcbiAgICAvKiBwcm9vZiwgZG9jdW1lbnQsIHB1cnBvc2UsIHByb29mU2V0LCBkb2N1bWVudExvYWRlciwgZXhwYW5zaW9uTWFwICovXG4gIH0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1widmVyaWZ5UHJvb2ZcIiBtdXN0IGJlIGltcGxlbWVudGVkIGluIGEgZGVyaXZlZCBjbGFzcy4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIHByb29mIGV4aXN0cyBpbiB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gdXNlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5wcm9vZiAtIFRoZSBwcm9vZiB0byBtYXRjaC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFdoZXRoZXIgYSBtYXRjaCBmb3IgdGhlIHByb29mIHdhcyBmb3VuZC5cbiAgICovXG4gIGFzeW5jIG1hdGNoUHJvb2Yoe1xuICAgIHByb29mIC8qLCBkb2N1bWVudCwgcHVycG9zZSwgZG9jdW1lbnRMb2FkZXIsIGV4cGFuc2lvbk1hcCAqL1xuICB9KSB7XG4gICAgcmV0dXJuIHByb29mLnR5cGUgPT09IHRoaXMudHlwZTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/suites/LinkedDataProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/suites/LinkedDataSignature.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/suites/LinkedDataSignature.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2017-2024 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst constants = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/jsonld-signatures/lib/constants.js\");\nconst jsonld = __webpack_require__(/*! jsonld */ \"(ssr)/./node_modules/jsonld/lib/index.js\");\nconst rdfCanonize = __webpack_require__(/*! rdf-canonize */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/index.js\");\nconst util = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/jsonld-signatures/lib/util.js\");\nconst {sha256digest} = __webpack_require__(/*! ../sha256digest */ \"(ssr)/./node_modules/jsonld-signatures/lib/sha256digest.js\");\nconst LinkedDataProof = __webpack_require__(/*! ./LinkedDataProof */ \"(ssr)/./node_modules/jsonld-signatures/lib/suites/LinkedDataProof.js\");\n\nmodule.exports = class LinkedDataSignature extends LinkedDataProof {\n  /**\n   * Parent class from which the various LinkDataSignature suites (such as\n   * `Ed25519Signature2020`) inherit.\n   * NOTE: Developers are never expected to use this class directly, but to\n   * only work with individual suites.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.type - Suite name, provided by subclass.\n   * @typedef LDKeyPair\n   * @param {LDKeyPair} LDKeyClass - The crypto-ld key class that this suite\n   *   will use to sign/verify signatures. Provided by subclass. Used\n   *   during the `verifySignature` operation, to create an instance (containing\n   *   a `verifier()` property) of a public key fetched via a `documentLoader`.\n   *\n   * @param {string} contextUrl - JSON-LD context URL that corresponds to this\n   *   signature suite. Provided by subclass. Used for enforcing suite context\n   *   during the `sign()` operation.\n   *\n   * For `sign()` operations, either a `key` OR a `signer` is required.\n   * For `verify()` operations, you can pass in a verifier (from KMS), or\n   * the public key will be fetched via documentLoader.\n   *\n   * @param {object} [options.key] - An optional key object (containing an\n   *   `id` property, and either `signer` or `verifier`, depending on the\n   *   intended operation. Useful for when the application is managing keys\n   *   itself (when using a KMS, you never have access to the private key,\n   *   and so should use the `signer` param instead).\n   *\n   * @param {{sign: Function, id: string}} [options.signer] - Signer object\n   *   that has two properties: an async `sign()` method, and an `id`. This is\n   *   useful when interfacing with a KMS (since you don't get access to the\n   *   private key and its `signer`, the KMS client gives you only the signer\n   *   object to use).\n   *\n   * @param {{verify: Function, id: string}} [options.verifier] - Verifier\n   *   object that has two properties: an async `verify()` method, and an `id`.\n   *   Useful when working with a KMS-provided verifier.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param {object} [options.proof] - A JSON-LD document with options to use\n   *   for the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2). If not provided, this is\n   *   constructed during signing.\n   * @param {string|Date} [options.date] - Signing date to use (otherwise\n   *   defaults to `now()`).\n   * @param {boolean} [options.useNativeCanonize] - Whether to use a native\n   *   canonize algorithm.\n   * @param {object} [options.canonizeOptions] - Options to pass to\n   *   canonize algorithm.\n   */\n  constructor({\n    type, proof, LDKeyClass, date, key, signer, verifier, useNativeCanonize,\n    canonizeOptions, contextUrl\n  } = {}) {\n    super({type});\n    this.LDKeyClass = LDKeyClass;\n    this.contextUrl = contextUrl;\n    this.proof = proof;\n    const vm = _processSignatureParams({key, signer, verifier});\n    this.verificationMethod = vm.verificationMethod;\n    this.key = vm.key;\n    this.signer = vm.signer;\n    this.verifier = vm.verifier;\n    this.canonizeOptions = canonizeOptions;\n    if(date) {\n      this.date = new Date(date);\n      if(isNaN(this.date)) {\n        throw TypeError(`\"date\" \"${date}\" is not a valid date.`);\n      }\n    }\n    this.useNativeCanonize = useNativeCanonize;\n    this._hashCache = null;\n  }\n\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} options.document - The document to be signed.\n   * @param {ProofPurpose} options.purpose - The proof purpose instance.\n   * @param {Array} options.proofSet - Any existing proof set.\n   * @param {function} options.documentLoader - The document loader to use.\n   * @param {function} options.expansionMap - NOT SUPPORTED; do not use.\n   *\n   * @returns {Promise<object>} Resolves with the created proof object.\n   */\n  async createProof({\n    document, purpose, proofSet, documentLoader, expansionMap\n  }) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n\n    // build proof (currently known as `signature options` in spec)\n    let proof;\n    if(this.proof) {\n      // shallow copy\n      proof = {...this.proof};\n    } else {\n      // create proof JSON-LD document\n      proof = {};\n    }\n\n    // ensure proof type is set\n    proof.type = this.type;\n\n    // set default `now` date if not given in `proof` or `options`\n    let date = this.date;\n    if(proof.created === undefined && date === undefined) {\n      date = new Date();\n    }\n\n    // ensure date is in string format\n    if(date && typeof date !== 'string') {\n      date = util.w3cDate(date);\n    }\n\n    // add API overrides\n    if(date) {\n      proof.created = date;\n    }\n\n    proof.verificationMethod = this.verificationMethod;\n\n    // add any extensions to proof (mostly for legacy support)\n    proof = await this.updateProof(\n      {document, proof, proofSet, purpose, documentLoader});\n\n    // allow purpose to update the proof; the `proof` is in the\n    // SECURITY_CONTEXT_URL `@context` -- therefore the `purpose` must\n    // ensure any added fields are also represented in that same `@context`\n    proof = await purpose.update(\n      proof, {document, suite: this, documentLoader});\n\n    // create data to sign\n    const verifyData = await this.createVerifyData(\n      {document, proof, proofSet, documentLoader});\n\n    // sign data\n    proof = await this.sign({verifyData, document, proof, documentLoader});\n\n    return proof;\n  }\n\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} options.proof - The proof to be updated.\n   * @param {Array} options.proofSet - Any existing proof set.\n   * @param {function} options.expansionMap - NOT SUPPORTED; do not use.\n   *\n   * @returns {Promise<object>} Resolves with the created proof object.\n   */\n  async updateProof({proof, expansionMap}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n    // extending classes may do more\n    return proof;\n  }\n\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} options.proof - The proof to be verified.\n   * @param {object} options.document - The document the proof applies to.\n   * @param {ProofPurpose} options.purpose - The proof purpose instance.\n   * @param {Array} options.proofSet - Any existing proof set.\n   * @param {function} options.documentLoader - The document loader to use.\n   * @param {function} options.expansionMap - NOT SUPPORTED; do not use.\n   *\n   * @returns {Promise<{object}>} Resolves with the verification result.\n   */\n  async verifyProof({proof, document, proofSet, documentLoader, expansionMap}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n\n    try {\n      // create data to verify\n      const verifyData = await this.createVerifyData(\n        {document, proof, proofSet, documentLoader, expansionMap});\n\n      // fetch verification method\n      const verificationMethod = await this.getVerificationMethod(\n        {proof, document, documentLoader, expansionMap});\n\n      // verify signature on data\n      const verified = await this.verifySignature({\n        verifyData, verificationMethod, document, proof,\n        documentLoader, expansionMap});\n      if(!verified) {\n        throw new Error('Invalid signature.');\n      }\n\n      return {verified: true, verificationMethod};\n    } catch(error) {\n      return {verified: false, error};\n    }\n  }\n\n  async canonize(input, {documentLoader, expansionMap, skipExpansion}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n    return _canonize(input, {\n      algorithm: 'RDFC-1.0',\n      // do not resolve any relative URLs or terms, throw errors instead\n      base: null,\n      format: 'application/n-quads',\n      documentLoader,\n      // throw errors if any values would be dropped due to missing\n      // definitions or relative URLs\n      safe: true,\n      skipExpansion,\n      useNative: this.useNativeCanonize,\n      ...this.canonizeOptions\n    });\n  }\n\n  async canonizeProof(proof, {document, documentLoader, expansionMap}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n    // `jws`,`signatureValue`,`proofValue` must not be included in the proof\n    // options\n    proof = {\n      '@context': document['@context'] || constants.SECURITY_CONTEXT_URL,\n      ...proof\n    };\n    delete proof.jws;\n    delete proof.signatureValue;\n    delete proof.proofValue;\n    return this.canonize(proof, {\n      documentLoader,\n      expansionMap,\n      skipExpansion: false,\n      ...this.canonizeOptions\n    });\n  }\n\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} options.document - The document to be signed/verified.\n   * @param {object} options.proof - The proof to be verified.\n   * @param {Array} options.proofSet - Any existing proof set.\n   * @param {function} options.documentLoader - The document loader to use.\n   * @param {function} options.expansionMap - NOT SUPPORTED; do not use.\n   *\n   * @returns {Promise<{Uint8Array}>}.\n   */\n  async createVerifyData({document, proof, documentLoader, expansionMap}) {\n    if(expansionMap) {\n      throw new Error('\"expansionMap\" not supported.');\n    }\n    // get cached document hash\n    let cachedDocHash;\n    const {_hashCache} = this;\n    if(_hashCache && _hashCache.document === document) {\n      cachedDocHash = _hashCache.hash;\n    } else {\n      this._hashCache = {\n        document,\n        // canonize and hash document\n        hash: cachedDocHash =\n          this.canonize(document, {documentLoader, expansionMap})\n            .then(c14nDocument => sha256digest({string: c14nDocument}))\n      };\n    }\n\n    // await both c14n proof hash and c14n document hash\n    const [proofHash, docHash] = await Promise.all([\n      // canonize and hash proof\n      this.canonizeProof(\n        proof, {document, documentLoader, expansionMap})\n        .then(c14nProofOptions => sha256digest({string: c14nProofOptions})),\n      cachedDocHash\n    ]);\n\n    // concatenate hash of c14n proof options and hash of c14n document\n    return util.concat(proofHash, docHash);\n  }\n\n  /**\n   * @param verifyData {Uint8Array}.\n   * @param document {object} document from which to derive a new document\n   *   and proof.\n   * @param proof {object}\n   * @param proofSet {Array}\n   * @param documentLoader {function}\n   *\n   * @returns {Promise<{object}>} The new document with `proof`.\n   */\n  async derive() {\n    throw new Error('Must be implemented by a derived class.');\n  }\n\n  /**\n   * @param document {object} to be signed.\n   * @param proof {object}\n   * @param documentLoader {function}\n   */\n  async getVerificationMethod({proof, documentLoader}) {\n    let {verificationMethod} = proof;\n\n    if(typeof verificationMethod === 'object') {\n      verificationMethod = verificationMethod.id;\n    }\n\n    if(!verificationMethod) {\n      throw new Error('No \"verificationMethod\" found in proof.');\n    }\n\n    // Note: `expansionMap` is intentionally not passed; we can safely drop\n    // properties here and must allow for it\n    const framed = await jsonld.frame(verificationMethod, {\n      '@context': constants.SECURITY_CONTEXT_URL,\n      '@embed': '@always',\n      id: verificationMethod\n    }, {documentLoader, compactToRelative: false, safe: true});\n    if(!framed) {\n      throw new Error(`Verification method ${verificationMethod} not found.`);\n    }\n\n    // ensure verification method has not been revoked\n    if(framed.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.');\n    }\n\n    return framed;\n  }\n\n  /**\n   * @param verifyData {Uint8Array}.\n   * @param document {object} to be signed.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   *\n   * @returns {Promise<{object}>} the proof containing the signature value.\n   */\n  async sign() {\n    throw new Error('Must be implemented by a derived class.');\n  }\n\n  /**\n   * @param verifyData {Uint8Array}.\n   * @param verificationMethod {object}.\n   * @param document {object} to be signed.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   *\n   * @returns {Promise<boolean>}\n   */\n  async verifySignature() {\n    throw new Error('Must be implemented by a derived class.');\n  }\n\n  /**\n   * Ensures the document to be signed contains the required signature suite\n   * specific `@context`, by either adding it (if `addSuiteContext` is true),\n   * or throwing an error if it's missing.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {object} options.document - JSON-LD document to be signed.\n   * @param {boolean} options.addSuiteContext - Add suite context?\n   */\n  ensureSuiteContext({document, addSuiteContext}) {\n    const {contextUrl} = this;\n\n    if(_includesContext({document, contextUrl})) {\n      // document already includes the required context\n      return;\n    }\n\n    if(!addSuiteContext) {\n      throw new TypeError(\n        `The document to be signed must contain this suite's @context, ` +\n        `\"${contextUrl}\".`);\n    }\n\n    // enforce the suite's context by adding it to the document\n    const existingContext = document['@context'] || [];\n\n    document['@context'] = Array.isArray(existingContext) ?\n      [...existingContext, contextUrl] : [existingContext, contextUrl];\n  }\n};\n\n/**\n * Tests whether a provided JSON-LD document includes a context URL in its\n * `@context` property.\n *\n * @param {object} options - Options hashmap.\n * @param {object} options.document - A JSON-LD document.\n * @param {string} options.contextUrl - A context URL.\n *\n * @returns {boolean} Returns true if document includes context.\n */\nfunction _includesContext({document, contextUrl}) {\n  const context = document['@context'];\n  return context === contextUrl ||\n    (Array.isArray(context) && context.includes(contextUrl));\n}\n\n/**\n * See constructor docstring for param details.\n *\n * @returns {{verificationMethod: string, key: LDKeyPair,\n *   signer: {sign: Function, id: string},\n *   verifier: {verify: Function, id: string}}} - Validated and initialized\n *   key-related parameters.\n */\nfunction _processSignatureParams({key, signer, verifier}) {\n  // We are explicitly not requiring a key or signer/verifier param to be\n  // present, to support the verify() use case where the verificationMethod\n  // is being fetched by the documentLoader\n\n  const vm = {};\n  if(key) {\n    vm.key = key;\n    vm.verificationMethod = key.id;\n    if(typeof key.signer === 'function') {\n      vm.signer = key.signer();\n    }\n    if(typeof key.verifier === 'function') {\n      vm.verifier = key.verifier();\n    }\n    if(!(vm.signer || vm.verifier)) {\n      throw new TypeError(\n        'The \"key\" parameter must contain a \"signer\" or \"verifier\" method.');\n    }\n  } else {\n    vm.verificationMethod = (signer && signer.id) ||\n      (verifier && verifier.id);\n    vm.signer = signer;\n    vm.verifier = verifier;\n  }\n\n  if(vm.signer) {\n    if(typeof vm.signer.sign !== 'function') {\n      throw new TypeError('A signer API has not been specified.');\n    }\n  }\n  if(vm.verifier) {\n    if(typeof vm.verifier.verify !== 'function') {\n      throw new TypeError('A verifier API has not been specified.');\n    }\n  }\n\n  return vm;\n}\n\nasync function _canonize(input, options) {\n  // convert to RDF dataset and do canonicalization\n  const opts = {\n    rdfDirection: 'i18n-datatype', ...options, produceGeneralizedRdf: false,\n  };\n  delete opts.format;\n  const dataset = await jsonld.toRDF(input, opts);\n  return rdfCanonize.canonize(dataset, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/suites/LinkedDataSignature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/lib/util.js":
/*!****************************************************!*\
  !*** ./node_modules/jsonld-signatures/lib/util.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * Copyright (c) 2017-2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Converts the given date into W3C datetime format (eg: 2011-03-09T21:55:41Z).\n *\n * @param date the date to convert.\n *\n * @return the date in W3C datetime format.\n */\napi.w3cDate = date => {\n  if(date === undefined || date === null) {\n    date = new Date();\n  } else if(typeof date === 'number' || typeof date === 'string') {\n    date = new Date(date);\n  }\n  const str = date.toISOString();\n  return str.substr(0, str.length - 5) + 'Z';\n};\n\n/**\n * Concatenates two Uint8Arrays.\n *\n * @param b1 {Uint8Array}.\n * @param b2 {Uint8Array}.\n *\n * @return {Uint8Array} the result.\n */\napi.concat = (b1, b2) => {\n  const rval = new Uint8Array(b1.length + b2.length);\n  rval.set(b1, 0);\n  rval.set(b2, b1.length);\n  return rval;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ2E7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsV0FBVztBQUN6QixjQUFjLFdBQVc7QUFDekI7QUFDQSxZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbGliL3V0aWwuanM/NjJiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE3LTIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBhcGkgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gYXBpO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBkYXRlIGludG8gVzNDIGRhdGV0aW1lIGZvcm1hdCAoZWc6IDIwMTEtMDMtMDlUMjE6NTU6NDFaKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSB0aGUgZGF0ZSB0byBjb252ZXJ0LlxuICpcbiAqIEByZXR1cm4gdGhlIGRhdGUgaW4gVzNDIGRhdGV0aW1lIGZvcm1hdC5cbiAqL1xuYXBpLnczY0RhdGUgPSBkYXRlID0+IHtcbiAgaWYoZGF0ZSA9PT0gdW5kZWZpbmVkIHx8IGRhdGUgPT09IG51bGwpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgfSBlbHNlIGlmKHR5cGVvZiBkYXRlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gIH1cbiAgY29uc3Qgc3RyID0gZGF0ZS50b0lTT1N0cmluZygpO1xuICByZXR1cm4gc3RyLnN1YnN0cigwLCBzdHIubGVuZ3RoIC0gNSkgKyAnWic7XG59O1xuXG4vKipcbiAqIENvbmNhdGVuYXRlcyB0d28gVWludDhBcnJheXMuXG4gKlxuICogQHBhcmFtIGIxIHtVaW50OEFycmF5fS5cbiAqIEBwYXJhbSBiMiB7VWludDhBcnJheX0uXG4gKlxuICogQHJldHVybiB7VWludDhBcnJheX0gdGhlIHJlc3VsdC5cbiAqL1xuYXBpLmNvbmNhdCA9IChiMSwgYjIpID0+IHtcbiAgY29uc3QgcnZhbCA9IG5ldyBVaW50OEFycmF5KGIxLmxlbmd0aCArIGIyLmxlbmd0aCk7XG4gIHJ2YWwuc2V0KGIxLCAwKTtcbiAgcnZhbC5zZXQoYjIsIGIxLmxlbmd0aCk7XG4gIHJldHVybiBydmFsO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/lib/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/index.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * An implementation of the RDF Dataset Normalization specification.\n *\n * @author Dave Longley\n *\n * Copyright 2010-2021 Digital Bazaar, Inc.\n */\nmodule.exports = __webpack_require__(/*! ./lib */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbm9kZV9tb2R1bGVzL3JkZi1jYW5vbml6ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtJQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ubGQtc2lnbmF0dXJlcy9ub2RlX21vZHVsZXMvcmRmLWNhbm9uaXplL2luZGV4LmpzPzRmZDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUkRGIERhdGFzZXQgTm9ybWFsaXphdGlvbiBzcGVjaWZpY2F0aW9uLlxuICpcbiAqIEBhdXRob3IgRGF2ZSBMb25nbGV5XG4gKlxuICogQ29weXJpZ2h0IDIwMTAtMjAyMSBEaWdpdGFsIEJhemFhciwgSW5jLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliJyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/IdentifierIssuer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/IdentifierIssuer.js ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*\n * Copyright (c) 2016-2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param {string} prefix - The prefix to use ('<prefix><counter>').\n   * @param {Map} [existing] - An existing Map to use.\n   * @param {number} [counter] - The counter to use.\n   */\n  constructor(prefix, existing = new Map(), counter = 0) {\n    this.prefix = prefix;\n    this._existing = existing;\n    this.counter = counter;\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @returns {object} - A copy of this IdentifierIssuer.\n   */\n  clone() {\n    const {prefix, _existing, counter} = this;\n    return new IdentifierIssuer(prefix, new Map(_existing), counter);\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param {string} [old] - The old identifier to get the new identifier for.\n   *\n   * @returns {string} - The new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    const existing = old && this._existing.get(old);\n    if(existing) {\n      return existing;\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter++;\n\n    // save mapping\n    if(old) {\n      this._existing.set(old, identifier);\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param {string} old - The old identifier to check.\n   *\n   * @returns {boolean} - True if the old identifier has been assigned a new\n   *   identifier, false if not.\n   */\n  hasId(old) {\n    return this._existing.has(old);\n  }\n\n  /**\n   * Returns all of the IDs that have been issued new IDs in the order in\n   * which they were issued new IDs.\n   *\n   * @returns {Array} - The list of old IDs that has been issued new IDs in\n   *   order.\n   */\n  getOldIds() {\n    return [...this._existing.keys()];\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbm9kZV9tb2R1bGVzL3JkZi1jYW5vbml6ZS9saWIvSWRlbnRpZmllcklzc3Vlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsS0FBSztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ubGQtc2lnbmF0dXJlcy9ub2RlX21vZHVsZXMvcmRmLWNhbm9uaXplL2xpYi9JZGVudGlmaWVySXNzdWVyLmpzPzEyMDgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIxIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBJZGVudGlmaWVySXNzdWVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgSWRlbnRpZmllcklzc3Vlci4gQSBJZGVudGlmaWVySXNzdWVyIGlzc3VlcyB1bmlxdWVcbiAgICogaWRlbnRpZmllcnMsIGtlZXBpbmcgdHJhY2sgb2YgYW55IHByZXZpb3VzbHkgaXNzdWVkIGlkZW50aWZpZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IC0gVGhlIHByZWZpeCB0byB1c2UgKCc8cHJlZml4Pjxjb3VudGVyPicpLlxuICAgKiBAcGFyYW0ge01hcH0gW2V4aXN0aW5nXSAtIEFuIGV4aXN0aW5nIE1hcCB0byB1c2UuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbY291bnRlcl0gLSBUaGUgY291bnRlciB0byB1c2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwcmVmaXgsIGV4aXN0aW5nID0gbmV3IE1hcCgpLCBjb3VudGVyID0gMCkge1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIHRoaXMuX2V4aXN0aW5nID0gZXhpc3Rpbmc7XG4gICAgdGhpcy5jb3VudGVyID0gY291bnRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3BpZXMgdGhpcyBJZGVudGlmaWVySXNzdWVyLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgY29weSBvZiB0aGlzIElkZW50aWZpZXJJc3N1ZXIuXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICBjb25zdCB7cHJlZml4LCBfZXhpc3RpbmcsIGNvdW50ZXJ9ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IElkZW50aWZpZXJJc3N1ZXIocHJlZml4LCBuZXcgTWFwKF9leGlzdGluZyksIGNvdW50ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG5ldyBpZGVudGlmaWVyIGZvciB0aGUgZ2l2ZW4gb2xkIGlkZW50aWZpZXIsIHdoZXJlIGlmIG5vIG9sZFxuICAgKiBpZGVudGlmaWVyIGlzIGdpdmVuIGEgbmV3IGlkZW50aWZpZXIgd2lsbCBiZSBnZW5lcmF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb2xkXSAtIFRoZSBvbGQgaWRlbnRpZmllciB0byBnZXQgdGhlIG5ldyBpZGVudGlmaWVyIGZvci5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgbmV3IGlkZW50aWZpZXIuXG4gICAqL1xuICBnZXRJZChvbGQpIHtcbiAgICAvLyByZXR1cm4gZXhpc3Rpbmcgb2xkIGlkZW50aWZpZXJcbiAgICBjb25zdCBleGlzdGluZyA9IG9sZCAmJiB0aGlzLl9leGlzdGluZy5nZXQob2xkKTtcbiAgICBpZihleGlzdGluZykge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cblxuICAgIC8vIGdldCBuZXh0IGlkZW50aWZpZXJcbiAgICBjb25zdCBpZGVudGlmaWVyID0gdGhpcy5wcmVmaXggKyB0aGlzLmNvdW50ZXI7XG4gICAgdGhpcy5jb3VudGVyKys7XG5cbiAgICAvLyBzYXZlIG1hcHBpbmdcbiAgICBpZihvbGQpIHtcbiAgICAgIHRoaXMuX2V4aXN0aW5nLnNldChvbGQsIGlkZW50aWZpZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBpZGVudGlmaWVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gb2xkIGlkZW50aWZlciBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkIGEgbmV3XG4gICAqIGlkZW50aWZpZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvbGQgLSBUaGUgb2xkIGlkZW50aWZpZXIgdG8gY2hlY2suXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtIFRydWUgaWYgdGhlIG9sZCBpZGVudGlmaWVyIGhhcyBiZWVuIGFzc2lnbmVkIGEgbmV3XG4gICAqICAgaWRlbnRpZmllciwgZmFsc2UgaWYgbm90LlxuICAgKi9cbiAgaGFzSWQob2xkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4aXN0aW5nLmhhcyhvbGQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIG9mIHRoZSBJRHMgdGhhdCBoYXZlIGJlZW4gaXNzdWVkIG5ldyBJRHMgaW4gdGhlIG9yZGVyIGluXG4gICAqIHdoaWNoIHRoZXkgd2VyZSBpc3N1ZWQgbmV3IElEcy5cbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fSAtIFRoZSBsaXN0IG9mIG9sZCBJRHMgdGhhdCBoYXMgYmVlbiBpc3N1ZWQgbmV3IElEcyBpblxuICAgKiAgIG9yZGVyLlxuICAgKi9cbiAgZ2V0T2xkSWRzKCkge1xuICAgIHJldHVybiBbLi4udGhpcy5fZXhpc3Rpbmcua2V5cygpXTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/IdentifierIssuer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/MessageDigest.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/MessageDigest.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * Copyright (c) 2016-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst algorithmMap = new Map([\n  ['sha256', 'sha256'],\n  ['SHA256', 'sha256'],\n  ['SHA-256', 'sha256'],\n  ['sha384', 'sha384'],\n  ['SHA384', 'sha384'],\n  ['SHA-384', 'sha384'],\n  ['sha512', 'sha512'],\n  ['SHA512', 'sha512'],\n  ['SHA-512', 'sha512'],\n]);\n\nmodule.exports = class MessageDigest {\n  /**\n   * Creates a new MessageDigest.\n   *\n   * @param {string} algorithm - The algorithm to use.\n   */\n  constructor(algorithm) {\n    if(!algorithmMap.has(algorithm)) {\n      throw new Error(`Unsupported algorithm \"${algorithm}\".`);\n    }\n    this.md = crypto.createHash(algorithmMap.get(algorithm));\n  }\n\n  update(msg) {\n    this.md.update(msg, 'utf8');\n  }\n\n  // async code awaits this but it is not async to support\n  // the sync code\n  digest() {\n    return this.md.digest('hex');\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbm9kZV9tb2R1bGVzL3JkZi1jYW5vbml6ZS9saWIvTWVzc2FnZURpZ2VzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDYTs7QUFFYixlQUFlLG1CQUFPLENBQUMsc0JBQVE7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFVBQVU7QUFDMUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbm9kZV9tb2R1bGVzL3JkZi1jYW5vbml6ZS9saWIvTWVzc2FnZURpZ2VzdC5qcz80OWM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5jb25zdCBhbGdvcml0aG1NYXAgPSBuZXcgTWFwKFtcbiAgWydzaGEyNTYnLCAnc2hhMjU2J10sXG4gIFsnU0hBMjU2JywgJ3NoYTI1NiddLFxuICBbJ1NIQS0yNTYnLCAnc2hhMjU2J10sXG4gIFsnc2hhMzg0JywgJ3NoYTM4NCddLFxuICBbJ1NIQTM4NCcsICdzaGEzODQnXSxcbiAgWydTSEEtMzg0JywgJ3NoYTM4NCddLFxuICBbJ3NoYTUxMicsICdzaGE1MTInXSxcbiAgWydTSEE1MTInLCAnc2hhNTEyJ10sXG4gIFsnU0hBLTUxMicsICdzaGE1MTInXSxcbl0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIE1lc3NhZ2VEaWdlc3Qge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBNZXNzYWdlRGlnZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWxnb3JpdGhtIC0gVGhlIGFsZ29yaXRobSB0byB1c2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhbGdvcml0aG0pIHtcbiAgICBpZighYWxnb3JpdGhtTWFwLmhhcyhhbGdvcml0aG0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGFsZ29yaXRobSBcIiR7YWxnb3JpdGhtfVwiLmApO1xuICAgIH1cbiAgICB0aGlzLm1kID0gY3J5cHRvLmNyZWF0ZUhhc2goYWxnb3JpdGhtTWFwLmdldChhbGdvcml0aG0pKTtcbiAgfVxuXG4gIHVwZGF0ZShtc2cpIHtcbiAgICB0aGlzLm1kLnVwZGF0ZShtc2csICd1dGY4Jyk7XG4gIH1cblxuICAvLyBhc3luYyBjb2RlIGF3YWl0cyB0aGlzIGJ1dCBpdCBpcyBub3QgYXN5bmMgdG8gc3VwcG9ydFxuICAvLyB0aGUgc3luYyBjb2RlXG4gIGRpZ2VzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZC5kaWdlc3QoJ2hleCcpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/MessageDigest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/NQuads.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/NQuads.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n// eslint-disable-next-line no-unused-vars\nconst TERMS = ['subject', 'predicate', 'object', 'graph'];\nconst RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nconst RDF_LANGSTRING = RDF + 'langString';\nconst XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';\n\nconst TYPE_NAMED_NODE = 'NamedNode';\nconst TYPE_BLANK_NODE = 'BlankNode';\nconst TYPE_LITERAL = 'Literal';\nconst TYPE_DEFAULT_GRAPH = 'DefaultGraph';\n\n// build regexes\nconst REGEX = {};\n(() => {\n  // https://www.w3.org/TR/n-quads/#sec-grammar\n  // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL\n  const PN_CHARS_BASE =\n    'A-Z' + 'a-z' +\n    '\\u00C0-\\u00D6' +\n    '\\u00D8-\\u00F6' +\n    '\\u00F8-\\u02FF' +\n    '\\u0370-\\u037D' +\n    '\\u037F-\\u1FFF' +\n    '\\u200C-\\u200D' +\n    '\\u2070-\\u218F' +\n    '\\u2C00-\\u2FEF' +\n    '\\u3001-\\uD7FF' +\n    '\\uF900-\\uFDCF' +\n    '\\uFDF0-\\uFFFD';\n    // TODO:\n    //'\\u10000-\\uEFFFF';\n  const PN_CHARS_U =\n    PN_CHARS_BASE +\n    '_';\n  const PN_CHARS =\n    PN_CHARS_U +\n    '0-9' +\n    '-' +\n    '\\u00B7' +\n    '\\u0300-\\u036F' +\n    '\\u203F-\\u2040';\n  const BLANK_NODE_LABEL =\n    '_:(' +\n      '(?:[' + PN_CHARS_U + '0-9])' +\n      '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' +\n    ')';\n  // Older simple regex: const IRI = '(?:<([^:]+:[^>]*)>)';\n  const UCHAR4 = '\\\\\\\\u[0-9A-Fa-f]{4}';\n  const UCHAR8 = '\\\\\\\\U[0-9A-Fa-f]{8}';\n  const IRI = '(?:<((?:' +\n    '[^\\u0000-\\u0020<>\"{}|^`\\\\\\\\]' + '|' +\n    UCHAR4 + '|' +\n    UCHAR8 +\n    ')*)>)';\n  const bnode = BLANK_NODE_LABEL;\n  const plain = '\"([^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*)\"';\n  const datatype = '(?:\\\\^\\\\^' + IRI + ')';\n  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';\n  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';\n  const ws = '[ \\\\t]+';\n  const wso = '[ \\\\t]*';\n\n  // define quad part regexes\n  const subject = '(?:' + IRI + '|' + bnode + ')' + ws;\n  const property = IRI + ws;\n  const object = '(?:' + IRI + '|' + bnode + '|' + literal + ')' + wso;\n  const graphName = '(?:\\\\.|(?:(?:' + IRI + '|' + bnode + ')' + wso + '\\\\.))';\n\n  // end of line and empty regexes\n  REGEX.eoln = /(?:\\r\\n)|(?:\\n)|(?:\\r)/g;\n  REGEX.empty = new RegExp('^' + wso + '$');\n\n  // full quad regex\n  REGEX.quad = new RegExp(\n    '^' + wso + subject + property + object + graphName + wso + '$');\n})();\n\nmodule.exports = class NQuads {\n  /**\n   * Parses RDF in the form of N-Quads.\n   *\n   * @param {string} input - The N-Quads input to parse.\n   *\n   * @returns {Array} - An RDF dataset (an array of quads per\n   *   https://rdf.js.org/).\n   */\n  static parse(input) {\n    // build RDF dataset\n    const dataset = [];\n\n    const graphs = {};\n\n    // split N-Quad input into lines\n    const lines = input.split(REGEX.eoln);\n    let lineNumber = 0;\n    for(const line of lines) {\n      lineNumber++;\n\n      // skip empty lines\n      if(REGEX.empty.test(line)) {\n        continue;\n      }\n\n      // parse quad\n      const match = line.match(REGEX.quad);\n      if(match === null) {\n        throw new Error('N-Quads parse error on line ' + lineNumber + '.');\n      }\n\n      // create RDF quad\n      const quad = {subject: null, predicate: null, object: null, graph: null};\n\n      // get subject\n      if(match[1] !== undefined) {\n        quad.subject = {\n          termType: TYPE_NAMED_NODE,\n          value: _iriUnescape(match[1])\n        };\n      } else {\n        quad.subject = {\n          termType: TYPE_BLANK_NODE,\n          value: match[2]\n        };\n      }\n\n      // get predicate\n      quad.predicate = {\n        termType: TYPE_NAMED_NODE,\n        value: _iriUnescape(match[3])\n      };\n\n      // get object\n      if(match[4] !== undefined) {\n        quad.object = {\n          termType: TYPE_NAMED_NODE,\n          value: _iriUnescape(match[4])\n        };\n      } else if(match[5] !== undefined) {\n        quad.object = {\n          termType: TYPE_BLANK_NODE,\n          value: match[5]\n        };\n      } else {\n        quad.object = {\n          termType: TYPE_LITERAL,\n          value: undefined,\n          datatype: {\n            termType: TYPE_NAMED_NODE\n          }\n        };\n        if(match[7] !== undefined) {\n          quad.object.datatype.value = _iriUnescape(match[7]);\n        } else if(match[8] !== undefined) {\n          quad.object.datatype.value = RDF_LANGSTRING;\n          quad.object.language = match[8];\n        } else {\n          quad.object.datatype.value = XSD_STRING;\n        }\n        quad.object.value = _stringLiteralUnescape(match[6]);\n      }\n\n      // get graph\n      if(match[9] !== undefined) {\n        quad.graph = {\n          termType: TYPE_NAMED_NODE,\n          value: _iriUnescape(match[9])\n        };\n      } else if(match[10] !== undefined) {\n        quad.graph = {\n          termType: TYPE_BLANK_NODE,\n          value: match[10]\n        };\n      } else {\n        quad.graph = {\n          termType: TYPE_DEFAULT_GRAPH,\n          value: ''\n        };\n      }\n\n      // only add quad if it is unique in its graph\n      if(!(quad.graph.value in graphs)) {\n        graphs[quad.graph.value] = [quad];\n        dataset.push(quad);\n      } else {\n        let unique = true;\n        const quads = graphs[quad.graph.value];\n        for(const q of quads) {\n          if(_compareTriples(q, quad)) {\n            unique = false;\n            break;\n          }\n        }\n        if(unique) {\n          quads.push(quad);\n          dataset.push(quad);\n        }\n      }\n    }\n\n    return dataset;\n  }\n\n  /**\n   * Converts an RDF dataset to N-Quads.\n   *\n   * @param {Array} dataset - The Array of quads RDF dataset to convert.\n   *\n   * @returns {string} - The N-Quads string.\n   */\n  static serialize(dataset) {\n    const quads = [];\n    for(const quad of dataset) {\n      quads.push(NQuads.serializeQuad(quad));\n    }\n    return quads.sort().join('');\n  }\n\n  /**\n   * Converts RDF quad components to an N-Quad string (a single quad).\n   *\n   * @param {object} s - N-Quad subject component.\n   * @param {object} p - N-Quad predicate component.\n   * @param {object} o - N-Quad object component.\n   * @param {object} g - N-Quad graph component.\n   *\n   * @returns {string} - The N-Quad.\n   */\n  static serializeQuadComponents(s, p, o, g) {\n    let nquad = '';\n\n    // subject can only be NamedNode or BlankNode\n    if(s.termType === TYPE_NAMED_NODE) {\n      nquad += `<${_iriEscape(s.value)}>`;\n    } else {\n      nquad += `_:${s.value}`;\n    }\n\n    // predicate normally a NamedNode, can be a BlankNode in generalized RDF\n    if(p.termType === TYPE_NAMED_NODE) {\n      nquad += ` <${_iriEscape(p.value)}> `;\n    } else {\n      nquad += ` _:${p.value} `;\n    }\n\n    // object is NamedNode, BlankNode, or Literal\n    if(o.termType === TYPE_NAMED_NODE) {\n      nquad += `<${_iriEscape(o.value)}>`;\n    } else if(o.termType === TYPE_BLANK_NODE) {\n      nquad += `_:${o.value}`;\n    } else {\n      nquad += `\"${_stringLiteralEscape(o.value)}\"`;\n      if(o.datatype.value === RDF_LANGSTRING) {\n        if(o.language) {\n          nquad += `@${o.language}`;\n        }\n      } else if(o.datatype.value !== XSD_STRING) {\n        nquad += `^^<${_iriEscape(o.datatype.value)}>`;\n      }\n    }\n\n    // graph can only be NamedNode or BlankNode (or DefaultGraph, but that\n    // does not add to `nquad`)\n    if(g.termType === TYPE_NAMED_NODE) {\n      nquad += ` <${_iriEscape(g.value)}>`;\n    } else if(g.termType === TYPE_BLANK_NODE) {\n      nquad += ` _:${g.value}`;\n    }\n\n    nquad += ' .\\n';\n    return nquad;\n  }\n\n  /**\n   * Converts an RDF quad to an N-Quad string (a single quad).\n   *\n   * @param {object} quad - The RDF quad convert.\n   *\n   * @returns {string} - The N-Quad string.\n   */\n  static serializeQuad(quad) {\n    return NQuads.serializeQuadComponents(\n      quad.subject, quad.predicate, quad.object, quad.graph);\n  }\n};\n\n/**\n * Compares two RDF triples for equality.\n *\n * @param {object} t1 - The first triple.\n * @param {object} t2 - The second triple.\n *\n * @returns {boolean} - True if the triples are the same, false if not.\n */\nfunction _compareTriples(t1, t2) {\n  // compare subject and object types first as it is the quickest check\n  if(!(t1.subject.termType === t2.subject.termType &&\n    t1.object.termType === t2.object.termType)) {\n    return false;\n  }\n  // compare values\n  if(!(t1.subject.value === t2.subject.value &&\n    t1.predicate.value === t2.predicate.value &&\n    t1.object.value === t2.object.value)) {\n    return false;\n  }\n  if(t1.object.termType !== TYPE_LITERAL) {\n    // no `datatype` or `language` to check\n    return true;\n  }\n  return (\n    (t1.object.datatype.termType === t2.object.datatype.termType) &&\n    (t1.object.language === t2.object.language) &&\n    (t1.object.datatype.value === t2.object.datatype.value)\n  );\n}\n\nconst _stringLiteralEscapeRegex = /[\\u0000-\\u001F\\u007F\"\\\\]/g;\nconst _stringLiteralEscapeMap = [];\nfor(let n = 0; n <= 0x7f; ++n) {\n  if(_stringLiteralEscapeRegex.test(String.fromCharCode(n))) {\n    // default UCHAR mapping\n    _stringLiteralEscapeMap[n] =\n      '\\\\u' + n.toString(16).toUpperCase().padStart(4, '0');\n    // reset regex\n    _stringLiteralEscapeRegex.lastIndex = 0;\n  }\n}\n// special ECHAR mappings\n_stringLiteralEscapeMap['\\b'.codePointAt(0)] = '\\\\b';\n_stringLiteralEscapeMap['\\t'.codePointAt(0)] = '\\\\t';\n_stringLiteralEscapeMap['\\n'.codePointAt(0)] = '\\\\n';\n_stringLiteralEscapeMap['\\f'.codePointAt(0)] = '\\\\f';\n_stringLiteralEscapeMap['\\r'.codePointAt(0)] = '\\\\r';\n_stringLiteralEscapeMap['\"' .codePointAt(0)] = '\\\\\"';\n_stringLiteralEscapeMap['\\\\'.codePointAt(0)] = '\\\\\\\\';\n\n/**\n * Escape string to N-Quads literal.\n *\n * @param {string} s - String to escape.\n *\n * @returns {string} - Escaped N-Quads literal.\n */\nfunction _stringLiteralEscape(s) {\n  if(!_stringLiteralEscapeRegex.test(s)) {\n    return s;\n  }\n  return s.replace(_stringLiteralEscapeRegex, function(match) {\n    return _stringLiteralEscapeMap[match.codePointAt(0)];\n  });\n}\n\nconst _stringLiteralUnescapeRegex =\n  /(?:\\\\([btnfr\"'\\\\]))|(?:\\\\u([0-9A-Fa-f]{4}))|(?:\\\\U([0-9A-Fa-f]{8}))/g;\n\n/**\n * Unescape N-Quads literal to string.\n *\n * @param {string} s - String to unescape.\n *\n * @returns {string} - Unescaped N-Quads literal.\n */\nfunction _stringLiteralUnescape(s) {\n  if(!_stringLiteralUnescapeRegex.test(s)) {\n    return s;\n  }\n  return s.replace(_stringLiteralUnescapeRegex, function(match, code, u, U) {\n    if(code) {\n      switch(code) {\n        case 'b': return '\\b';\n        case 't': return '\\t';\n        case 'n': return '\\n';\n        case 'f': return '\\f';\n        case 'r': return '\\r';\n        case '\"': return '\"';\n        case '\\'': return '\\'';\n        case '\\\\': return '\\\\';\n      }\n    }\n    if(u) {\n      return String.fromCharCode(parseInt(u, 16));\n    }\n    if(U) {\n      return String.fromCodePoint(parseInt(U, 16));\n    }\n  });\n}\n\nconst _iriEscapeRegex = /[\\u0000-\\u0020<>\"{}|^`\\\\]/g;\nconst _iriEscapeRegexMap = [];\nfor(let n = 0; n <= 0x7f; ++n) {\n  if(_iriEscapeRegex.test(String.fromCharCode(n))) {\n    // UCHAR mapping\n    _iriEscapeRegexMap[n] =\n      '\\\\u' + n.toString(16).toUpperCase().padStart(4, '0');\n    // reset regex\n    _iriEscapeRegex.lastIndex = 0;\n  }\n}\n\n/**\n * Escape IRI to N-Quads IRI.\n *\n * @param {string} s - IRI to escape.\n *\n * @returns {string} - Escaped N-Quads IRI.\n */\nfunction _iriEscape(s) {\n  if(!_iriEscapeRegex.test(s)) {\n    return s;\n  }\n  return s.replace(_iriEscapeRegex, function(match) {\n    return _iriEscapeRegexMap[match.codePointAt(0)];\n  });\n}\n\nconst _iriUnescapeRegex =\n  /(?:\\\\u([0-9A-Fa-f]{4}))|(?:\\\\U([0-9A-Fa-f]{8}))/g;\n\n/**\n * Unescape N-Quads IRI to IRI.\n *\n * @param {string} s - IRI to unescape.\n *\n * @returns {string} - Unescaped N-Quads IRI.\n */\nfunction _iriUnescape(s) {\n  if(!_iriUnescapeRegex.test(s)) {\n    return s;\n  }\n  return s.replace(_iriUnescapeRegex, function(match, u, U) {\n    if(u) {\n      return String.fromCharCode(parseInt(u, 16));\n    }\n    if(U) {\n      return String.fromCodePoint(parseInt(U, 16));\n    }\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/NQuads.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/Permuter.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/Permuter.js ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
eval("/*!\n * Copyright (c) 2016-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nmodule.exports = class Permuter {\n  /**\n   * A Permuter iterates over all possible permutations of the given array\n   * of elements.\n   *\n   * @param {Array} list - The array of elements to iterate over.\n   */\n  constructor(list) {\n    // original array\n    this.current = list.sort();\n    // indicates whether there are more permutations\n    this.done = false;\n    // directional info for permutation algorithm\n    this.dir = new Map();\n    for(let i = 0; i < list.length; ++i) {\n      this.dir.set(list[i], true);\n    }\n  }\n\n  /**\n   * Returns true if there is another permutation.\n   *\n   * @returns {boolean} - True if there is another permutation, false if not.\n   */\n  hasNext() {\n    return !this.done;\n  }\n\n  /**\n   * Gets the next permutation. Call hasNext() to ensure there is another one\n   * first.\n   *\n   * @returns {any} - The next permutation.\n   */\n  next() {\n    // copy current permutation to return it\n    const {current, dir} = this;\n    const rval = current.slice();\n\n    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter\n     permutation algorithm. */\n\n    // get largest mobile element k\n    // (mobile: element is greater than the one it is looking at)\n    let k = null;\n    let pos = 0;\n    const length = current.length;\n    for(let i = 0; i < length; ++i) {\n      const element = current[i];\n      const left = dir.get(element);\n      if((k === null || element > k) &&\n        ((left && i > 0 && element > current[i - 1]) ||\n        (!left && i < (length - 1) && element > current[i + 1]))) {\n        k = element;\n        pos = i;\n      }\n    }\n\n    // no more permutations\n    if(k === null) {\n      this.done = true;\n    } else {\n      // swap k and the element it is looking at\n      const swap = dir.get(k) ? pos - 1 : pos + 1;\n      current[pos] = current[swap];\n      current[swap] = k;\n\n      // reverse the direction of all elements larger than k\n      for(const element of current) {\n        if(element > k) {\n          dir.set(element, !dir.get(element));\n        }\n      }\n    }\n\n    return rval;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbm9kZV9tb2R1bGVzL3JkZi1jYW5vbml6ZS9saWIvUGVybXV0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ2E7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxLQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsWUFBWTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ubGQtc2lnbmF0dXJlcy9ub2RlX21vZHVsZXMvcmRmLWNhbm9uaXplL2xpYi9QZXJtdXRlci5qcz81N2UyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFBlcm11dGVyIHtcbiAgLyoqXG4gICAqIEEgUGVybXV0ZXIgaXRlcmF0ZXMgb3ZlciBhbGwgcG9zc2libGUgcGVybXV0YXRpb25zIG9mIHRoZSBnaXZlbiBhcnJheVxuICAgKiBvZiBlbGVtZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gbGlzdCAtIFRoZSBhcnJheSBvZiBlbGVtZW50cyB0byBpdGVyYXRlIG92ZXIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihsaXN0KSB7XG4gICAgLy8gb3JpZ2luYWwgYXJyYXlcbiAgICB0aGlzLmN1cnJlbnQgPSBsaXN0LnNvcnQoKTtcbiAgICAvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGVyZSBhcmUgbW9yZSBwZXJtdXRhdGlvbnNcbiAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAvLyBkaXJlY3Rpb25hbCBpbmZvIGZvciBwZXJtdXRhdGlvbiBhbGdvcml0aG1cbiAgICB0aGlzLmRpciA9IG5ldyBNYXAoKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgdGhpcy5kaXIuc2V0KGxpc3RbaV0sIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgYW5vdGhlciBwZXJtdXRhdGlvbi5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGVyZSBpcyBhbm90aGVyIHBlcm11dGF0aW9uLCBmYWxzZSBpZiBub3QuXG4gICAqL1xuICBoYXNOZXh0KCkge1xuICAgIHJldHVybiAhdGhpcy5kb25lO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG5leHQgcGVybXV0YXRpb24uIENhbGwgaGFzTmV4dCgpIHRvIGVuc3VyZSB0aGVyZSBpcyBhbm90aGVyIG9uZVxuICAgKiBmaXJzdC5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gLSBUaGUgbmV4dCBwZXJtdXRhdGlvbi5cbiAgICovXG4gIG5leHQoKSB7XG4gICAgLy8gY29weSBjdXJyZW50IHBlcm11dGF0aW9uIHRvIHJldHVybiBpdFxuICAgIGNvbnN0IHtjdXJyZW50LCBkaXJ9ID0gdGhpcztcbiAgICBjb25zdCBydmFsID0gY3VycmVudC5zbGljZSgpO1xuXG4gICAgLyogQ2FsY3VsYXRlIHRoZSBuZXh0IHBlcm11dGF0aW9uIHVzaW5nIHRoZSBTdGVpbmhhdXMtSm9obnNvbi1Ucm90dGVyXG4gICAgIHBlcm11dGF0aW9uIGFsZ29yaXRobS4gKi9cblxuICAgIC8vIGdldCBsYXJnZXN0IG1vYmlsZSBlbGVtZW50IGtcbiAgICAvLyAobW9iaWxlOiBlbGVtZW50IGlzIGdyZWF0ZXIgdGhhbiB0aGUgb25lIGl0IGlzIGxvb2tpbmcgYXQpXG4gICAgbGV0IGsgPSBudWxsO1xuICAgIGxldCBwb3MgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IGN1cnJlbnQubGVuZ3RoO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGN1cnJlbnRbaV07XG4gICAgICBjb25zdCBsZWZ0ID0gZGlyLmdldChlbGVtZW50KTtcbiAgICAgIGlmKChrID09PSBudWxsIHx8IGVsZW1lbnQgPiBrKSAmJlxuICAgICAgICAoKGxlZnQgJiYgaSA+IDAgJiYgZWxlbWVudCA+IGN1cnJlbnRbaSAtIDFdKSB8fFxuICAgICAgICAoIWxlZnQgJiYgaSA8IChsZW5ndGggLSAxKSAmJiBlbGVtZW50ID4gY3VycmVudFtpICsgMV0pKSkge1xuICAgICAgICBrID0gZWxlbWVudDtcbiAgICAgICAgcG9zID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBubyBtb3JlIHBlcm11dGF0aW9uc1xuICAgIGlmKGsgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN3YXAgayBhbmQgdGhlIGVsZW1lbnQgaXQgaXMgbG9va2luZyBhdFxuICAgICAgY29uc3Qgc3dhcCA9IGRpci5nZXQoaykgPyBwb3MgLSAxIDogcG9zICsgMTtcbiAgICAgIGN1cnJlbnRbcG9zXSA9IGN1cnJlbnRbc3dhcF07XG4gICAgICBjdXJyZW50W3N3YXBdID0gaztcblxuICAgICAgLy8gcmV2ZXJzZSB0aGUgZGlyZWN0aW9uIG9mIGFsbCBlbGVtZW50cyBsYXJnZXIgdGhhbiBrXG4gICAgICBmb3IoY29uc3QgZWxlbWVudCBvZiBjdXJyZW50KSB7XG4gICAgICAgIGlmKGVsZW1lbnQgPiBrKSB7XG4gICAgICAgICAgZGlyLnNldChlbGVtZW50LCAhZGlyLmdldChlbGVtZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcnZhbDtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/Permuter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2016-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/IdentifierIssuer.js\");\nconst MessageDigest = __webpack_require__(/*! ./MessageDigest */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/MessageDigest.js\");\nconst Permuter = __webpack_require__(/*! ./Permuter */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/Permuter.js\");\nconst NQuads = __webpack_require__(/*! ./NQuads */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/NQuads.js\");\nconst {setImmediate} = __webpack_require__(/*! ./platform */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/platform.js\");\n\nmodule.exports = class RDFC10 {\n  constructor({\n    createMessageDigest = null,\n    messageDigestAlgorithm = 'sha256',\n    canonicalIdMap = new Map(),\n    maxWorkFactor = 1,\n    maxDeepIterations = -1,\n    signal = null\n  } = {}) {\n    this.name = 'RDFC-1.0';\n    this.blankNodeInfo = new Map();\n    this.canonicalIssuer = new IdentifierIssuer('c14n', canonicalIdMap);\n    this.createMessageDigest = createMessageDigest ||\n      (() => new MessageDigest(messageDigestAlgorithm));\n    this.maxWorkFactor = maxWorkFactor;\n    this.maxDeepIterations = maxDeepIterations;\n    this.remainingDeepIterations = 0;\n    this.signal = signal;\n    this.quads = null;\n  }\n\n  // 4.4) Normalization Algorithm\n  async main(dataset) {\n    this.quads = dataset;\n\n    // 1) Create the normalization state.\n    // 2) For every quad in input dataset:\n    for(const quad of dataset) {\n      // 2.1) For each blank node that occurs in the quad, add a reference\n      // to the quad using the blank node identifier in the blank node to\n      // quads map, creating a new entry if necessary.\n      this._addBlankNodeQuadInfo({quad, component: quad.subject});\n      this._addBlankNodeQuadInfo({quad, component: quad.object});\n      this._addBlankNodeQuadInfo({quad, component: quad.graph});\n    }\n\n    // 3) Create a list of non-normalized blank node identifiers\n    // non-normalized identifiers and populate it using the keys from the\n    // blank node to quads map.\n    // Note: We use a map here and it was generated during step 2.\n\n    // 4) `simple` flag is skipped -- loop is optimized away. This optimization\n    // is permitted because there was a typo in the hash first degree quads\n    // algorithm in the RDFC-1.0 spec that was implemented widely making it\n    // such that it could not be fixed; the result was that the loop only\n    // needs to be run once and the first degree quad hashes will never change.\n    // 5.1-5.2 are skipped; first degree quad hashes are generated just once\n    // for all non-normalized blank nodes.\n\n    // 5.3) For each blank node identifier identifier in non-normalized\n    // identifiers:\n    const hashToBlankNodes = new Map();\n    const nonNormalized = [...this.blankNodeInfo.keys()];\n    let i = 0;\n    for(const id of nonNormalized) {\n      // Note: batch hashing first degree quads 100 at a time\n      if(++i % 100 === 0) {\n        await this._yield();\n      }\n      // steps 5.3.1 and 5.3.2:\n      await this._hashAndTrackBlankNode({id, hashToBlankNodes});\n    }\n\n    // 5.4) For each hash to identifier list mapping in hash to blank\n    // nodes map, lexicographically-sorted by hash:\n    const hashes = [...hashToBlankNodes.keys()].sort();\n    // optimize away second sort, gather non-unique hashes in order as we go\n    const nonUnique = [];\n    for(const hash of hashes) {\n      // 5.4.1) If the length of identifier list is greater than 1,\n      // continue to the next mapping.\n      const idList = hashToBlankNodes.get(hash);\n      if(idList.length > 1) {\n        nonUnique.push(idList);\n        continue;\n      }\n\n      // 5.4.2) Use the Issue Identifier algorithm, passing canonical\n      // issuer and the single blank node identifier in identifier\n      // list, identifier, to issue a canonical replacement identifier\n      // for identifier.\n      const id = idList[0];\n      this.canonicalIssuer.getId(id);\n\n      // Note: These steps are skipped, optimized away since the loop\n      // only needs to be run once.\n      // 5.4.3) Remove identifier from non-normalized identifiers.\n      // 5.4.4) Remove hash from the hash to blank nodes map.\n      // 5.4.5) Set simple to true.\n    }\n\n    if(this.maxDeepIterations < 0) {\n      // calculate maxDeepIterations if not explicit\n      if(this.maxWorkFactor === 0) {\n        this.maxDeepIterations = 0;\n      } else if(this.maxWorkFactor === Infinity) {\n        this.maxDeepIterations = Infinity;\n      } else {\n        const nonUniqueCount =\n          nonUnique.reduce((count, v) => count + v.length, 0);\n        this.maxDeepIterations = nonUniqueCount ** this.maxWorkFactor;\n      }\n    }\n    // handle any large inputs as Infinity\n    if(this.maxDeepIterations > Number.MAX_SAFE_INTEGER) {\n      this.maxDeepIterations = Infinity;\n    }\n    this.remainingDeepIterations = this.maxDeepIterations;\n\n    // 6) For each hash to identifier list mapping in hash to blank nodes map,\n    // lexicographically-sorted by hash:\n    // Note: sort optimized away, use `nonUnique`.\n    for(const idList of nonUnique) {\n      // 6.1) Create hash path list where each item will be a result of\n      // running the Hash N-Degree Quads algorithm.\n      const hashPathList = [];\n\n      // 6.2) For each blank node identifier identifier in identifier list:\n      for(const id of idList) {\n        // 6.2.1) If a canonical identifier has already been issued for\n        // identifier, continue to the next identifier.\n        if(this.canonicalIssuer.hasId(id)) {\n          continue;\n        }\n\n        // 6.2.2) Create temporary issuer, an identifier issuer\n        // initialized with the prefix _:b.\n        const issuer = new IdentifierIssuer('b');\n\n        // 6.2.3) Use the Issue Identifier algorithm, passing temporary\n        // issuer and identifier, to issue a new temporary blank node\n        // identifier for identifier.\n        issuer.getId(id);\n\n        // 6.2.4) Run the Hash N-Degree Quads algorithm, passing\n        // temporary issuer, and append the result to the hash path list.\n        const result = await this.hashNDegreeQuads(id, issuer);\n        hashPathList.push(result);\n      }\n\n      // 6.3) For each result in the hash path list,\n      // lexicographically-sorted by the hash in result:\n      hashPathList.sort(_stringHashCompare);\n      for(const result of hashPathList) {\n        // 6.3.1) For each blank node identifier, existing identifier,\n        // that was issued a temporary identifier by identifier issuer\n        // in result, issue a canonical identifier, in the same order,\n        // using the Issue Identifier algorithm, passing canonical\n        // issuer and existing identifier.\n        const oldIds = result.issuer.getOldIds();\n        for(const id of oldIds) {\n          this.canonicalIssuer.getId(id);\n        }\n      }\n    }\n\n    /* Note: At this point all blank nodes in the set of RDF quads have been\n    assigned canonical identifiers, which have been stored in the canonical\n    issuer. Here each quad is updated by assigning each of its blank nodes\n    its new identifier. */\n\n    // 7) For each quad, quad, in input dataset:\n    const normalized = [];\n    for(const quad of this.quads) {\n      // 7.1) Create a copy, quad copy, of quad and replace any existing\n      // blank node identifiers using the canonical identifiers\n      // previously issued by canonical issuer.\n      // Note: We optimize away the copy here.\n      const nQuad = NQuads.serializeQuadComponents(\n        this._componentWithCanonicalId(quad.subject),\n        quad.predicate,\n        this._componentWithCanonicalId(quad.object),\n        this._componentWithCanonicalId(quad.graph)\n      );\n      // 7.2) Add quad copy to the normalized dataset.\n      normalized.push(nQuad);\n    }\n\n    // sort normalized output\n    normalized.sort();\n\n    // 8) Return the normalized dataset.\n    return normalized.join('');\n  }\n\n  // 4.6) Hash First Degree Quads\n  async hashFirstDegreeQuads(id) {\n    // 1) Initialize nquads to an empty list. It will be used to store quads in\n    // N-Quads format.\n    const nquads = [];\n\n    // 2) Get the list of quads `quads` associated with the reference blank node\n    // identifier in the blank node to quads map.\n    const info = this.blankNodeInfo.get(id);\n    const quads = info.quads;\n\n    // 3) For each quad `quad` in `quads`:\n    for(const quad of quads) {\n      // 3.1) Serialize the quad in N-Quads format with the following special\n      // rule:\n\n      // 3.1.1) If any component in quad is an blank node, then serialize it\n      // using a special identifier as follows:\n      // 3.1.2) If the blank node's existing blank node identifier matches\n      // the reference blank node identifier then use the blank node\n      // identifier _:a, otherwise, use the blank node identifier _:z.\n      nquads.push(NQuads.serializeQuadComponents(\n        this.modifyFirstDegreeComponent(id, quad.subject, 'subject'),\n        quad.predicate,\n        this.modifyFirstDegreeComponent(id, quad.object, 'object'),\n        this.modifyFirstDegreeComponent(id, quad.graph, 'graph')\n      ));\n    }\n\n    // 4) Sort nquads in lexicographical order.\n    nquads.sort();\n\n    // 5) Return the hash that results from passing the sorted, joined nquads\n    // through the hash algorithm.\n    const md = this.createMessageDigest();\n    for(const nquad of nquads) {\n      md.update(nquad);\n    }\n    info.hash = await md.digest();\n    return info.hash;\n  }\n\n  // 4.7) Hash Related Blank Node\n  async hashRelatedBlankNode(related, quad, issuer, position) {\n    // 1) Initialize a string input to the value of position.\n    // Note: We use a hash object instead.\n    const md = this.createMessageDigest();\n    md.update(position);\n\n    // 2) If position is not g, append <, the value of the predicate in quad,\n    // and > to input.\n    if(position !== 'g') {\n      md.update(this.getRelatedPredicate(quad));\n    }\n\n    // 3) Set the identifier to use for related, preferring first the canonical\n    // identifier for related if issued, second the identifier issued by issuer\n    // if issued, and last, if necessary, the result of the Hash First Degree\n    // Quads algorithm, passing related.\n    let id;\n    if(this.canonicalIssuer.hasId(related)) {\n      id = '_:' + this.canonicalIssuer.getId(related);\n    } else if(issuer.hasId(related)) {\n      id = '_:' + issuer.getId(related);\n    } else {\n      id = this.blankNodeInfo.get(related).hash;\n    }\n\n    // 4) Append identifier to input.\n    md.update(id);\n\n    // 5) Return the hash that results from passing input through the hash\n    // algorithm.\n    return md.digest();\n  }\n\n  // 4.8) Hash N-Degree Quads\n  async hashNDegreeQuads(id, issuer) {\n    if(this.remainingDeepIterations === 0) {\n      throw new Error(\n        `Maximum deep iterations exceeded (${this.maxDeepIterations}).`);\n    }\n    this.remainingDeepIterations--;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    // Note: 2) and 3) handled within `createHashToRelated`\n    const md = this.createMessageDigest();\n    const hashToRelated = await this.createHashToRelated(id, issuer);\n\n    // 4) Create an empty string, data to hash.\n    // Note: We created a hash object `md` above instead.\n\n    // 5) For each related hash to blank node list mapping in hash to related\n    // blank nodes map, sorted lexicographically by related hash:\n    const hashes = [...hashToRelated.keys()].sort();\n    for(const hash of hashes) {\n      // 5.1) Append the related hash to the data to hash.\n      md.update(hash);\n\n      // 5.2) Create a string chosen path.\n      let chosenPath = '';\n\n      // 5.3) Create an unset chosen issuer variable.\n      let chosenIssuer;\n\n      // 5.4) For each permutation of blank node list:\n      const permuter = new Permuter(hashToRelated.get(hash));\n      let i = 0;\n      while(permuter.hasNext()) {\n        const permutation = permuter.next();\n        // Note: batch permutations 3 at a time\n        if(++i % 3 === 0) {\n          if(this.signal && this.signal.aborted) {\n            throw new Error(`Abort signal received: \"${this.signal.reason}\".`);\n          }\n          await this._yield();\n        }\n\n        // 5.4.1) Create a copy of issuer, issuer copy.\n        let issuerCopy = issuer.clone();\n\n        // 5.4.2) Create a string path.\n        let path = '';\n\n        // 5.4.3) Create a recursion list, to store blank node identifiers\n        // that must be recursively processed by this algorithm.\n        const recursionList = [];\n\n        // 5.4.4) For each related in permutation:\n        let nextPermutation = false;\n        for(const related of permutation) {\n          // 5.4.4.1) If a canonical identifier has been issued for\n          // related, append it to path.\n          if(this.canonicalIssuer.hasId(related)) {\n            path += '_:' + this.canonicalIssuer.getId(related);\n          } else {\n            // 5.4.4.2) Otherwise:\n            // 5.4.4.2.1) If issuer copy has not issued an identifier for\n            // related, append related to recursion list.\n            if(!issuerCopy.hasId(related)) {\n              recursionList.push(related);\n            }\n            // 5.4.4.2.2) Use the Issue Identifier algorithm, passing\n            // issuer copy and related and append the result to path.\n            path += '_:' + issuerCopy.getId(related);\n          }\n\n          // 5.4.4.3) If chosen path is not empty and the length of path\n          // is greater than or equal to the length of chosen path and\n          // path is lexicographically greater than chosen path, then\n          // skip to the next permutation.\n          // Note: Comparing path length to chosen path length can be optimized\n          // away; only compare lexicographically.\n          if(chosenPath.length !== 0 && path > chosenPath) {\n            nextPermutation = true;\n            break;\n          }\n        }\n\n        if(nextPermutation) {\n          continue;\n        }\n\n        // 5.4.5) For each related in recursion list:\n        for(const related of recursionList) {\n          // 5.4.5.1) Set result to the result of recursively executing\n          // the Hash N-Degree Quads algorithm, passing related for\n          // identifier and issuer copy for path identifier issuer.\n          const result = await this.hashNDegreeQuads(related, issuerCopy);\n\n          // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer\n          // copy and related and append the result to path.\n          path += '_:' + issuerCopy.getId(related);\n\n          // 5.4.5.3) Append <, the hash in result, and > to path.\n          path += `<${result.hash}>`;\n\n          // 5.4.5.4) Set issuer copy to the identifier issuer in\n          // result.\n          issuerCopy = result.issuer;\n\n          // 5.4.5.5) If chosen path is not empty and the length of path\n          // is greater than or equal to the length of chosen path and\n          // path is lexicographically greater than chosen path, then\n          // skip to the next permutation.\n          // Note: Comparing path length to chosen path length can be optimized\n          // away; only compare lexicographically.\n          if(chosenPath.length !== 0 && path > chosenPath) {\n            nextPermutation = true;\n            break;\n          }\n        }\n\n        if(nextPermutation) {\n          continue;\n        }\n\n        // 5.4.6) If chosen path is empty or path is lexicographically\n        // less than chosen path, set chosen path to path and chosen\n        // issuer to issuer copy.\n        if(chosenPath.length === 0 || path < chosenPath) {\n          chosenPath = path;\n          chosenIssuer = issuerCopy;\n        }\n      }\n\n      // 5.5) Append chosen path to data to hash.\n      md.update(chosenPath);\n\n      // 5.6) Replace issuer, by reference, with chosen issuer.\n      issuer = chosenIssuer;\n    }\n\n    // 6) Return issuer and the hash that results from passing data to hash\n    // through the hash algorithm.\n    return {hash: await md.digest(), issuer};\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    /* Note: A mistake in the RDFC-1.0 spec that made its way into\n    implementations (and therefore must stay to avoid interop breakage)\n    resulted in an assigned canonical ID, if available for\n    `component.value`, not being used in place of `_:a`/`_:z`, so\n    we don't use it here. */\n    return {\n      termType: 'BlankNode',\n      value: component.value === id ? 'a' : 'z'\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return `<${quad.predicate.value}>`;\n  }\n\n  // helper for creating hash to related blank nodes map\n  async createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    let i = 0;\n    for(const quad of quads) {\n      // Note: batch hashing related blank node quads 100 at a time\n      if(++i % 100 === 0) {\n        await this._yield();\n      }\n      // 3.1) For each component in quad, if component is the subject, object,\n      // or graph name and it is a blank node that is not identified by\n      // identifier:\n      // steps 3.1.1 and 3.1.2 occur in helpers:\n      await Promise.all([\n        this._addRelatedBlankNodeHash({\n          quad, component: quad.subject, position: 's',\n          id, issuer, hashToRelated\n        }),\n        this._addRelatedBlankNodeHash({\n          quad, component: quad.object, position: 'o',\n          id, issuer, hashToRelated\n        }),\n        this._addRelatedBlankNodeHash({\n          quad, component: quad.graph, position: 'g',\n          id, issuer, hashToRelated\n        })\n      ]);\n    }\n\n    return hashToRelated;\n  }\n\n  async _hashAndTrackBlankNode({id, hashToBlankNodes}) {\n    // 5.3.1) Create a hash, hash, according to the Hash First Degree\n    // Quads algorithm.\n    const hash = await this.hashFirstDegreeQuads(id);\n\n    // 5.3.2) Add hash and identifier to hash to blank nodes map,\n    // creating a new entry if necessary.\n    const idList = hashToBlankNodes.get(hash);\n    if(!idList) {\n      hashToBlankNodes.set(hash, [id]);\n    } else {\n      idList.push(id);\n    }\n  }\n\n  _addBlankNodeQuadInfo({quad, component}) {\n    if(component.termType !== 'BlankNode') {\n      return;\n    }\n    const id = component.value;\n    const info = this.blankNodeInfo.get(id);\n    if(info) {\n      info.quads.add(quad);\n    } else {\n      this.blankNodeInfo.set(id, {quads: new Set([quad]), hash: null});\n    }\n  }\n\n  async _addRelatedBlankNodeHash(\n    {quad, component, position, id, issuer, hashToRelated}) {\n    if(!(component.termType === 'BlankNode' && component.value !== id)) {\n      return;\n    }\n    // 3.1.1) Set hash to the result of the Hash Related Blank Node\n    // algorithm, passing the blank node identifier for component as\n    // related, quad, path identifier issuer as issuer, and position as\n    // either s, o, or g based on whether component is a subject, object,\n    // graph name, respectively.\n    const related = component.value;\n    const hash = await this.hashRelatedBlankNode(\n      related, quad, issuer, position);\n\n    // 3.1.2) Add a mapping of hash to the blank node identifier for\n    // component to hash to related blank nodes map, adding an entry as\n    // necessary.\n    const entries = hashToRelated.get(hash);\n    if(entries) {\n      entries.push(related);\n    } else {\n      hashToRelated.set(hash, [related]);\n    }\n  }\n\n  // canonical ids for 7.1\n  _componentWithCanonicalId(component) {\n    if(component.termType === 'BlankNode' &&\n      !component.value.startsWith(this.canonicalIssuer.prefix)) {\n      // create new BlankNode\n      return {\n        termType: 'BlankNode',\n        value: this.canonicalIssuer.getId(component.value)\n      };\n    }\n    return component;\n  }\n\n  async _yield() {\n    return new Promise(resolve => setImmediate(resolve));\n  }\n};\n\nfunction _stringHashCompare(a, b) {\n  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10Sync.js":
/*!************************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10Sync.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2016-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/IdentifierIssuer.js\");\n// FIXME: do not import; convert to requiring a\n// hash factory\nconst MessageDigest = __webpack_require__(/*! ./MessageDigest */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/MessageDigest.js\");\nconst Permuter = __webpack_require__(/*! ./Permuter */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/Permuter.js\");\nconst NQuads = __webpack_require__(/*! ./NQuads */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/NQuads.js\");\n\nmodule.exports = class RDFC10Sync {\n  constructor({\n    createMessageDigest = null,\n    messageDigestAlgorithm = 'sha256',\n    canonicalIdMap = new Map(),\n    maxWorkFactor = 1,\n    maxDeepIterations = -1,\n    timeout = 0\n  } = {}) {\n    this.name = 'RDFC-1.0';\n    this.blankNodeInfo = new Map();\n    this.canonicalIssuer = new IdentifierIssuer('c14n', canonicalIdMap);\n    this.createMessageDigest = createMessageDigest ||\n      (() => new MessageDigest(messageDigestAlgorithm));\n    this.maxWorkFactor = maxWorkFactor;\n    this.maxDeepIterations = maxDeepIterations;\n    this.remainingDeepIterations = 0;\n    this.timeout = timeout;\n    if(timeout > 0) {\n      this.startTime = Date.now();\n    }\n    this.quads = null;\n  }\n\n  // 4.4) Normalization Algorithm\n  main(dataset) {\n    this.quads = dataset;\n\n    // 1) Create the normalization state.\n    // 2) For every quad in input dataset:\n    for(const quad of dataset) {\n      // 2.1) For each blank node that occurs in the quad, add a reference\n      // to the quad using the blank node identifier in the blank node to\n      // quads map, creating a new entry if necessary.\n      this._addBlankNodeQuadInfo({quad, component: quad.subject});\n      this._addBlankNodeQuadInfo({quad, component: quad.object});\n      this._addBlankNodeQuadInfo({quad, component: quad.graph});\n    }\n\n    // 3) Create a list of non-normalized blank node identifiers\n    // non-normalized identifiers and populate it using the keys from the\n    // blank node to quads map.\n    // Note: We use a map here and it was generated during step 2.\n\n    // 4) `simple` flag is skipped -- loop is optimized away. This optimization\n    // is permitted because there was a typo in the hash first degree quads\n    // algorithm in the RDFC-1.0 spec that was implemented widely making it\n    // such that it could not be fixed; the result was that the loop only\n    // needs to be run once and the first degree quad hashes will never change.\n    // 5.1-5.2 are skipped; first degree quad hashes are generated just once\n    // for all non-normalized blank nodes.\n\n    // 5.3) For each blank node identifier identifier in non-normalized\n    // identifiers:\n    const hashToBlankNodes = new Map();\n    const nonNormalized = [...this.blankNodeInfo.keys()];\n    for(const id of nonNormalized) {\n      // steps 5.3.1 and 5.3.2:\n      this._hashAndTrackBlankNode({id, hashToBlankNodes});\n    }\n\n    // 5.4) For each hash to identifier list mapping in hash to blank\n    // nodes map, lexicographically-sorted by hash:\n    const hashes = [...hashToBlankNodes.keys()].sort();\n    // optimize away second sort, gather non-unique hashes in order as we go\n    const nonUnique = [];\n    for(const hash of hashes) {\n      // 5.4.1) If the length of identifier list is greater than 1,\n      // continue to the next mapping.\n      const idList = hashToBlankNodes.get(hash);\n      if(idList.length > 1) {\n        nonUnique.push(idList);\n        continue;\n      }\n\n      // 5.4.2) Use the Issue Identifier algorithm, passing canonical\n      // issuer and the single blank node identifier in identifier\n      // list, identifier, to issue a canonical replacement identifier\n      // for identifier.\n      const id = idList[0];\n      this.canonicalIssuer.getId(id);\n\n      // Note: These steps are skipped, optimized away since the loop\n      // only needs to be run once.\n      // 5.4.3) Remove identifier from non-normalized identifiers.\n      // 5.4.4) Remove hash from the hash to blank nodes map.\n      // 5.4.5) Set simple to true.\n    }\n\n    if(this.maxDeepIterations < 0) {\n      // calculate maxDeepIterations if not explicit\n      if(this.maxWorkFactor === 0) {\n        this.maxDeepIterations = 0;\n      } else if(this.maxWorkFactor === Infinity) {\n        this.maxDeepIterations = Infinity;\n      } else {\n        const nonUniqueCount =\n          nonUnique.reduce((count, v) => count + v.length, 0);\n        this.maxDeepIterations = nonUniqueCount ** this.maxWorkFactor;\n      }\n    }\n    // handle any large inputs as Infinity\n    if(this.maxDeepIterations > Number.MAX_SAFE_INTEGER) {\n      this.maxDeepIterations = Infinity;\n    }\n    this.remainingDeepIterations = this.maxDeepIterations;\n\n    // 6) For each hash to identifier list mapping in hash to blank nodes map,\n    // lexicographically-sorted by hash:\n    // Note: sort optimized away, use `nonUnique`.\n    for(const idList of nonUnique) {\n      // 6.1) Create hash path list where each item will be a result of\n      // running the Hash N-Degree Quads algorithm.\n      const hashPathList = [];\n\n      // 6.2) For each blank node identifier identifier in identifier list:\n      for(const id of idList) {\n        // 6.2.1) If a canonical identifier has already been issued for\n        // identifier, continue to the next identifier.\n        if(this.canonicalIssuer.hasId(id)) {\n          continue;\n        }\n\n        // 6.2.2) Create temporary issuer, an identifier issuer\n        // initialized with the prefix _:b.\n        const issuer = new IdentifierIssuer('b');\n\n        // 6.2.3) Use the Issue Identifier algorithm, passing temporary\n        // issuer and identifier, to issue a new temporary blank node\n        // identifier for identifier.\n        issuer.getId(id);\n\n        // 6.2.4) Run the Hash N-Degree Quads algorithm, passing\n        // temporary issuer, and append the result to the hash path list.\n        const result = this.hashNDegreeQuads(id, issuer);\n        hashPathList.push(result);\n      }\n\n      // 6.3) For each result in the hash path list,\n      // lexicographically-sorted by the hash in result:\n      hashPathList.sort(_stringHashCompare);\n      for(const result of hashPathList) {\n        // 6.3.1) For each blank node identifier, existing identifier,\n        // that was issued a temporary identifier by identifier issuer\n        // in result, issue a canonical identifier, in the same order,\n        // using the Issue Identifier algorithm, passing canonical\n        // issuer and existing identifier.\n        const oldIds = result.issuer.getOldIds();\n        for(const id of oldIds) {\n          this.canonicalIssuer.getId(id);\n        }\n      }\n    }\n\n    /* Note: At this point all blank nodes in the set of RDF quads have been\n    assigned canonical identifiers, which have been stored in the canonical\n    issuer. Here each quad is updated by assigning each of its blank nodes\n    its new identifier. */\n\n    // 7) For each quad, quad, in input dataset:\n    const normalized = [];\n    for(const quad of this.quads) {\n      // 7.1) Create a copy, quad copy, of quad and replace any existing\n      // blank node identifiers using the canonical identifiers\n      // previously issued by canonical issuer.\n      // Note: We optimize away the copy here.\n      const nQuad = NQuads.serializeQuadComponents(\n        this._componentWithCanonicalId(quad.subject),\n        quad.predicate,\n        this._componentWithCanonicalId(quad.object),\n        this._componentWithCanonicalId(quad.graph)\n      );\n      // 7.2) Add quad copy to the normalized dataset.\n      normalized.push(nQuad);\n    }\n\n    // sort normalized output\n    normalized.sort();\n\n    // 8) Return the normalized dataset.\n    return normalized.join('');\n  }\n\n  // 4.6) Hash First Degree Quads\n  hashFirstDegreeQuads(id) {\n    // 1) Initialize nquads to an empty list. It will be used to store quads in\n    // N-Quads format.\n    const nquads = [];\n\n    // 2) Get the list of quads `quads` associated with the reference blank node\n    // identifier in the blank node to quads map.\n    const info = this.blankNodeInfo.get(id);\n    const quads = info.quads;\n\n    // 3) For each quad `quad` in `quads`:\n    for(const quad of quads) {\n      // 3.1) Serialize the quad in N-Quads format with the following special\n      // rule:\n\n      // 3.1.1) If any component in quad is an blank node, then serialize it\n      // using a special identifier as follows:\n      // 3.1.2) If the blank node's existing blank node identifier matches\n      // the reference blank node identifier then use the blank node\n      // identifier _:a, otherwise, use the blank node identifier _:z.\n      nquads.push(NQuads.serializeQuadComponents(\n        this.modifyFirstDegreeComponent(id, quad.subject, 'subject'),\n        quad.predicate,\n        this.modifyFirstDegreeComponent(id, quad.object, 'object'),\n        this.modifyFirstDegreeComponent(id, quad.graph, 'graph')\n      ));\n    }\n\n    // 4) Sort nquads in lexicographical order.\n    nquads.sort();\n\n    // 5) Return the hash that results from passing the sorted, joined nquads\n    // through the hash algorithm.\n    const md = this.createMessageDigest();\n    for(const nquad of nquads) {\n      md.update(nquad);\n    }\n    info.hash = md.digest();\n    return info.hash;\n  }\n\n  // 4.7) Hash Related Blank Node\n  hashRelatedBlankNode(related, quad, issuer, position) {\n    // 1) Initialize a string input to the value of position.\n    // Note: We use a hash object instead.\n    const md = this.createMessageDigest();\n    md.update(position);\n\n    // 2) If position is not g, append <, the value of the predicate in quad,\n    // and > to input.\n    if(position !== 'g') {\n      md.update(this.getRelatedPredicate(quad));\n    }\n\n    // 3) Set the identifier to use for related, preferring first the canonical\n    // identifier for related if issued, second the identifier issued by issuer\n    // if issued, and last, if necessary, the result of the Hash First Degree\n    // Quads algorithm, passing related.\n    let id;\n    if(this.canonicalIssuer.hasId(related)) {\n      id = '_:' + this.canonicalIssuer.getId(related);\n    } else if(issuer.hasId(related)) {\n      id = '_:' + issuer.getId(related);\n    } else {\n      id = this.blankNodeInfo.get(related).hash;\n    }\n\n    // 4) Append identifier to input.\n    md.update(id);\n\n    // 5) Return the hash that results from passing input through the hash\n    // algorithm.\n    return md.digest();\n  }\n\n  // 4.8) Hash N-Degree Quads\n  hashNDegreeQuads(id, issuer) {\n    if(this.remainingDeepIterations === 0) {\n      throw new Error(\n        `Maximum deep iterations exceeded (${this.maxDeepIterations}).`);\n    }\n    this.remainingDeepIterations--;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    // Note: 2) and 3) handled within `createHashToRelated`\n    const md = this.createMessageDigest();\n    const hashToRelated = this.createHashToRelated(id, issuer);\n\n    // 4) Create an empty string, data to hash.\n    // Note: We created a hash object `md` above instead.\n\n    // 5) For each related hash to blank node list mapping in hash to related\n    // blank nodes map, sorted lexicographically by related hash:\n    const hashes = [...hashToRelated.keys()].sort();\n    for(const hash of hashes) {\n      // 5.1) Append the related hash to the data to hash.\n      md.update(hash);\n\n      // 5.2) Create a string chosen path.\n      let chosenPath = '';\n\n      // 5.3) Create an unset chosen issuer variable.\n      let chosenIssuer;\n\n      // 5.4) For each permutation of blank node list:\n      const permuter = new Permuter(hashToRelated.get(hash));\n      let i = 0;\n      while(permuter.hasNext()) {\n        const permutation = permuter.next();\n        // Note: batch permutations 3 at a time\n        if(++i % 3 === 0) {\n          if(this.timeout > 0 && Date.now() - this.startTime > this.timeout) {\n            throw new Error('Canonize timeout.');\n          }\n        }\n\n        // 5.4.1) Create a copy of issuer, issuer copy.\n        let issuerCopy = issuer.clone();\n\n        // 5.4.2) Create a string path.\n        let path = '';\n\n        // 5.4.3) Create a recursion list, to store blank node identifiers\n        // that must be recursively processed by this algorithm.\n        const recursionList = [];\n\n        // 5.4.4) For each related in permutation:\n        let nextPermutation = false;\n        for(const related of permutation) {\n          // 5.4.4.1) If a canonical identifier has been issued for\n          // related, append it to path.\n          if(this.canonicalIssuer.hasId(related)) {\n            path += '_:' + this.canonicalIssuer.getId(related);\n          } else {\n            // 5.4.4.2) Otherwise:\n            // 5.4.4.2.1) If issuer copy has not issued an identifier for\n            // related, append related to recursion list.\n            if(!issuerCopy.hasId(related)) {\n              recursionList.push(related);\n            }\n            // 5.4.4.2.2) Use the Issue Identifier algorithm, passing\n            // issuer copy and related and append the result to path.\n            path += '_:' + issuerCopy.getId(related);\n          }\n\n          // 5.4.4.3) If chosen path is not empty and the length of path\n          // is greater than or equal to the length of chosen path and\n          // path is lexicographically greater than chosen path, then\n          // skip to the next permutation.\n          // Note: Comparing path length to chosen path length can be optimized\n          // away; only compare lexicographically.\n          if(chosenPath.length !== 0 && path > chosenPath) {\n            nextPermutation = true;\n            break;\n          }\n        }\n\n        if(nextPermutation) {\n          continue;\n        }\n\n        // 5.4.5) For each related in recursion list:\n        for(const related of recursionList) {\n          // 5.4.5.1) Set result to the result of recursively executing\n          // the Hash N-Degree Quads algorithm, passing related for\n          // identifier and issuer copy for path identifier issuer.\n          const result = this.hashNDegreeQuads(related, issuerCopy);\n\n          // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer\n          // copy and related and append the result to path.\n          path += '_:' + issuerCopy.getId(related);\n\n          // 5.4.5.3) Append <, the hash in result, and > to path.\n          path += `<${result.hash}>`;\n\n          // 5.4.5.4) Set issuer copy to the identifier issuer in\n          // result.\n          issuerCopy = result.issuer;\n\n          // 5.4.5.5) If chosen path is not empty and the length of path\n          // is greater than or equal to the length of chosen path and\n          // path is lexicographically greater than chosen path, then\n          // skip to the next permutation.\n          // Note: Comparing path length to chosen path length can be optimized\n          // away; only compare lexicographically.\n          if(chosenPath.length !== 0 && path > chosenPath) {\n            nextPermutation = true;\n            break;\n          }\n        }\n\n        if(nextPermutation) {\n          continue;\n        }\n\n        // 5.4.6) If chosen path is empty or path is lexicographically\n        // less than chosen path, set chosen path to path and chosen\n        // issuer to issuer copy.\n        if(chosenPath.length === 0 || path < chosenPath) {\n          chosenPath = path;\n          chosenIssuer = issuerCopy;\n        }\n      }\n\n      // 5.5) Append chosen path to data to hash.\n      md.update(chosenPath);\n\n      // 5.6) Replace issuer, by reference, with chosen issuer.\n      issuer = chosenIssuer;\n    }\n\n    // 6) Return issuer and the hash that results from passing data to hash\n    // through the hash algorithm.\n    return {hash: md.digest(), issuer};\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    /* Note: A mistake in the RDFC-1.0 spec that made its way into\n    implementations (and therefore must stay to avoid interop breakage)\n    resulted in an assigned canonical ID, if available for\n    `component.value`, not being used in place of `_:a`/`_:z`, so\n    we don't use it here. */\n    return {\n      termType: 'BlankNode',\n      value: component.value === id ? 'a' : 'z'\n    };\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return `<${quad.predicate.value}>`;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = new Map();\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = this.blankNodeInfo.get(id).quads;\n\n    // 3) For each quad in quads:\n    for(const quad of quads) {\n      // 3.1) For each component in quad, if component is the subject, object,\n      // or graph name and it is a blank node that is not identified by\n      // identifier:\n      // steps 3.1.1 and 3.1.2 occur in helpers:\n      this._addRelatedBlankNodeHash({\n        quad, component: quad.subject, position: 's',\n        id, issuer, hashToRelated\n      });\n      this._addRelatedBlankNodeHash({\n        quad, component: quad.object, position: 'o',\n        id, issuer, hashToRelated\n      });\n      this._addRelatedBlankNodeHash({\n        quad, component: quad.graph, position: 'g',\n        id, issuer, hashToRelated\n      });\n    }\n\n    return hashToRelated;\n  }\n\n  _hashAndTrackBlankNode({id, hashToBlankNodes}) {\n    // 5.3.1) Create a hash, hash, according to the Hash First Degree\n    // Quads algorithm.\n    const hash = this.hashFirstDegreeQuads(id);\n\n    // 5.3.2) Add hash and identifier to hash to blank nodes map,\n    // creating a new entry if necessary.\n    const idList = hashToBlankNodes.get(hash);\n    if(!idList) {\n      hashToBlankNodes.set(hash, [id]);\n    } else {\n      idList.push(id);\n    }\n  }\n\n  _addBlankNodeQuadInfo({quad, component}) {\n    if(component.termType !== 'BlankNode') {\n      return;\n    }\n    const id = component.value;\n    const info = this.blankNodeInfo.get(id);\n    if(info) {\n      info.quads.add(quad);\n    } else {\n      this.blankNodeInfo.set(id, {quads: new Set([quad]), hash: null});\n    }\n  }\n\n  _addRelatedBlankNodeHash(\n    {quad, component, position, id, issuer, hashToRelated}) {\n    if(!(component.termType === 'BlankNode' && component.value !== id)) {\n      return;\n    }\n    // 3.1.1) Set hash to the result of the Hash Related Blank Node\n    // algorithm, passing the blank node identifier for component as\n    // related, quad, path identifier issuer as issuer, and position as\n    // either s, o, or g based on whether component is a subject, object,\n    // graph name, respectively.\n    const related = component.value;\n    const hash = this.hashRelatedBlankNode(\n      related, quad, issuer, position);\n\n    // 3.1.2) Add a mapping of hash to the blank node identifier for\n    // component to hash to related blank nodes map, adding an entry as\n    // necessary.\n    const entries = hashToRelated.get(hash);\n    if(entries) {\n      entries.push(related);\n    } else {\n      hashToRelated.set(hash, [related]);\n    }\n  }\n\n  // canonical ids for 7.1\n  _componentWithCanonicalId(component) {\n    if(component.termType === 'BlankNode' &&\n      !component.value.startsWith(this.canonicalIssuer.prefix)) {\n      // create new BlankNode\n      return {\n        termType: 'BlankNode',\n        value: this.canonicalIssuer.getId(component.value)\n      };\n    }\n    return component;\n  }\n};\n\nfunction _stringHashCompare(a, b) {\n  return a.hash < b.hash ? -1 : a.hash > b.hash ? 1 : 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10Sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2023 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nconst RDFC10 = __webpack_require__(/*! ./RDFC10 */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10.js\");\nconst RDFC10Sync = __webpack_require__(/*! ./RDFC10Sync */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/RDFC10Sync.js\");\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'rdf-canonize-native'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n} catch(e) {}\n\n// return a dataset from input dataset or n-quads\nfunction _inputToDataset(input, options) {\n  if(options.inputFormat) {\n    if(options.inputFormat === 'application/n-quads') {\n      if(typeof input !== 'string') {\n        throw new Error('N-Quads input must be a string.');\n      }\n      return exports.NQuads.parse(input);\n    }\n    throw new Error(\n      `Unknown canonicalization input format: \"${options.inputFormat}\".`);\n  }\n  return input;\n}\n\n// check for valid output format\nfunction _checkOutputFormat(options) {\n  // only N-Quads supported\n  if(options.format) {\n    if(options.format !== 'application/n-quads') {\n      throw new Error(\n        `Unknown canonicalization output format: \"${options.format}\".`);\n    }\n  }\n}\n\n// helper to trace URDNA2015 usage\nfunction _traceURDNA2015() {\n  if(!!globalThis.RDF_CANONIZE_TRACE_URDNA2015) {\n    console.trace('[rdf-canonize] URDNA2015 is deprecated, use RDFC-1.0');\n  }\n}\n\n// expose helpers\nexports.NQuads = __webpack_require__(/*! ./NQuads */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/NQuads.js\");\nexports.IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ \"(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/IdentifierIssuer.js\");\n\n/**\n * Get or set native API.\n *\n * @param {object} [api] - The native API.\n *\n * @returns {object} - The currently set native API.\n */\nexports._rdfCanonizeNative = function(api) {\n  if(api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param {Array|object|string} input - The input to canonize given as a\n *   dataset or format specified by 'inputFormat' option.\n * @param {object} options - The options to use:\n *   {string} algorithm - The canonicalization algorithm to use, `RDFC-1.0`.\n *   {Function} [createMessageDigest] - A factory function for creating a\n *     `MessageDigest` interface that overrides the built-in message digest\n *     implementation used by the canonize algorithm; note that using a hash\n *     algorithm (or HMAC algorithm) that differs from the one specified by\n *     the canonize algorithm will result in different output.\n *   {string} [messageDigestAlgorithm=sha256] - Message digest algorithm used\n *     by the default implementation of `createMessageDigest`. Supported\n *     algorithms are: 'sha256', 'sha384', 'sha512', and the 'SHA###' and\n *     'SHA-###' variations.\n *   {Map} [canonicalIdMap] - An optional Map to be populated by the canonical\n *     identifier issuer with the bnode identifier mapping generated by the\n *     canonicalization algorithm.\n *   {string} [inputFormat] - The format of the input. Use\n *     'application/n-quads' for a N-Quads string that will be parsed. Omit or\n *     falsy for a JSON dataset.\n *   {string} [format] - The format of the output. Omit or use\n *     'application/n-quads' for a N-Quads string.\n *   {boolean} [useNative=false] - Use native implementation.\n *   {number} [maxWorkFactor=1] - Control of the maximum number of times to run\n *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm\n *     used in RDFC-1.0) before bailing out and throwing an error; this is a\n *     useful setting for preventing wasted CPU cycles or DoS when canonizing\n *     meaningless or potentially malicious datasets. This parameter sets the\n *     maximum number of iterations based on the number of non-unique blank\n *     nodes. `0` to disable iterations, `1` for a O(n) limit, `2` for a O(n^2)\n *     limit, `3` and higher may handle \"poison\" graphs but may take\n *     significant computational resources, `Infinity` for no limitation.\n *     Defaults to `1` which can handle many common inputs.\n *   {number} [maxDeepIterations=-1] - The maximum number of times to run\n *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm\n *     used in RDFC-1.0) before bailing out and throwing an error; this is a\n *     useful setting for preventing wasted CPU cycles or DoS when canonizing\n *     meaningless or potentially malicious datasets. If set to a value other\n *     than `-1` it will explicitly set the number of iterations and override\n *     `maxWorkFactor`. It is recommended to use `maxWorkFactor`.\n *   {AbortSignal} [signal] - An AbortSignal used to abort the operation. The\n *     aborted status is only periodically checked for performance reasons.\n *   {boolean} [rejectURDNA2015=false] - Reject the \"URDNA2015\" algorithm name\n *     instead of treating it as an alias for \"RDFC-1.0\".\n *\n * @returns {Promise<object>} - A Promise that resolves to the canonicalized\n *   RDF Dataset.\n */\nexports.canonize = async function(input, options = {}) {\n  const dataset = _inputToDataset(input, options);\n  _checkOutputFormat(options);\n\n  if(options.useNative) {\n    if(!rdfCanonizeNative) {\n      throw new Error('rdf-canonize-native not available');\n    }\n    if(options.createMessageDigest) {\n      throw new Error(\n        '\"createMessageDigest\" cannot be used with \"useNative\".');\n    }\n    return new Promise((resolve, reject) =>\n      rdfCanonizeNative.canonize(dataset, options, (err, canonical) =>\n        err ? reject(err) : resolve(canonical)));\n  }\n\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  if(options.algorithm === 'RDFC-1.0') {\n    return new RDFC10(options).main(dataset);\n  }\n  // URDNA2015 deprecated, handled as alias for RDFC-1.0 if allowed\n  if(options.algorithm === 'URDNA2015' && !options.rejectURDNA2015) {\n    _traceURDNA2015();\n    return new RDFC10(options).main(dataset);\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n\n/**\n * This method is no longer available in the public API, it is for testing\n * only. It synchronously canonizes an RDF dataset and does not work in the\n * browser.\n *\n * @param {Array|object|string} input - The input to canonize given as a\n *   dataset or format specified by 'inputFormat' option.\n * @param {object} options - The options to use:\n *   {string} algorithm - The canonicalization algorithm to use, `RDFC-1.0`.\n *   {Function} [createMessageDigest] - A factory function for creating a\n *     `MessageDigest` interface that overrides the built-in message digest\n *     implementation used by the canonize algorithm; note that using a hash\n *     algorithm (or HMAC algorithm) that differs from the one specified by\n *     the canonize algorithm will result in different output.\n *   {string} [messageDigestAlgorithm=sha256] - Message digest algorithm used\n *     by the default implementation of `createMessageDigest`. Supported\n *     algorithms are: 'sha256', 'sha384', 'sha512', and the 'SHA###' and\n *     'SHA-###' variations.\n *   {Map} [canonicalIdMap] - An optional Map to be populated by the canonical\n *     identifier issuer with the bnode identifier mapping generated by the\n *     canonicalization algorithm.\n *   {string} [inputFormat] - The format of the input. Use\n *     'application/n-quads' for a N-Quads string that will be parsed. Omit or\n *     falsy for a JSON dataset.\n *   {string} [format] - The format of the output. Omit or use\n *     'application/n-quads' for a N-Quads string.\n *   {boolean} [useNative=false] - Use native implementation.\n *   {number} [maxWorkFactor=1] - Control of the maximum number of times to run\n *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm\n *     used in RDFC-1.0) before bailing out and throwing an error; this is a\n *     useful setting for preventing wasted CPU cycles or DoS when canonizing\n *     meaningless or potentially malicious datasets. This parameter sets the\n *     maximum number of iterations based on the number of non-unique blank\n *     nodes. `0` to disable iterations, `1` for a O(n) limit, `2` for a O(n^2)\n *     limit, `3` and higher may handle \"poison\" graphs but may take\n *     significant computational resources, `Infinity` for no limitation.\n *     Defaults to `1` which can handle many common inputs.\n *   {number} [maxDeepIterations=-1] - The maximum number of times to run\n *     deep comparison algorithms (such as the N-Degree Hash Quads algorithm\n *     used in RDFC-1.0) before bailing out and throwing an error; this is a\n *     useful setting for preventing wasted CPU cycles or DoS when canonizing\n *     meaningless or potentially malicious datasets. If set to a value other\n *     than `-1` it will explicitly set the number of iterations and override\n *     `maxWorkFactor`. It is recommended to use `maxWorkFactor`.\n *   {number} [timeout=1000] - The maximum number of milliseconds before the\n *     operation will timeout. This is only periodically checked for\n *     performance reasons. Use 0 to disable. Note: This is a replacement for\n *     the async canonize `signal` option common timeout use case. If complex\n *     abort logic is required, use the async function and the `signal`\n *     parameter.\n *   {boolean} [rejectURDNA2015=false] - Reject the \"URDNA2015\" algorithm name\n *     instead of treating it as an alias for \"RDFC-1.0\".\n *\n * @returns {Promise<object>} - A Promise that resolves to the canonicalized\n *   RDF Dataset.\n */\nexports._canonizeSync = function(input, options = {}) {\n  const dataset = _inputToDataset(input, options);\n  _checkOutputFormat(options);\n\n  if(options.useNative) {\n    if(!rdfCanonizeNative) {\n      throw new Error('rdf-canonize-native not available');\n    }\n    if(options.createMessageDigest) {\n      throw new Error(\n        '\"createMessageDigest\" cannot be used with \"useNative\".');\n    }\n    return rdfCanonizeNative.canonizeSync(dataset, options);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  if(options.algorithm === 'RDFC-1.0') {\n    return new RDFC10Sync(options).main(dataset);\n  }\n  // URDNA2015 deprecated, handled as alias for RDFC-1.0 if allowed\n  if(options.algorithm === 'URDNA2015' && !options.rejectURDNA2015) {\n    _traceURDNA2015();\n    return new RDFC10Sync(options).main(dataset);\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/platform.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/platform.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * Copyright (c) 2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nexports.setImmediate = setImmediate;\n\n// WebCrypto\nconst crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\");\nexports.crypto = crypto.webcrypto;\n\nexports.bufferToHex = function bufferToHex(buffer) {\n  return Buffer.from(buffer).toString('hex');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmxkLXNpZ25hdHVyZXMvbm9kZV9tb2R1bGVzL3JkZi1jYW5vbml6ZS9saWIvcGxhdGZvcm0uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ2E7O0FBRWIsb0JBQW9COztBQUVwQjtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxnQ0FBYTtBQUNwQyxjQUFjOztBQUVkLG1CQUFtQjtBQUNuQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb25sZC1zaWduYXR1cmVzL25vZGVfbW9kdWxlcy9yZGYtY2Fub25pemUvbGliL3BsYXRmb3JtLmpzP2YwNjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjMgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcblxuLy8gV2ViQ3J5cHRvXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdub2RlOmNyeXB0bycpO1xuZXhwb3J0cy5jcnlwdG8gPSBjcnlwdG8ud2ViY3J5cHRvO1xuXG5leHBvcnRzLmJ1ZmZlclRvSGV4ID0gZnVuY3Rpb24gYnVmZmVyVG9IZXgoYnVmZmVyKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShidWZmZXIpLnRvU3RyaW5nKCdoZXgnKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonld-signatures/node_modules/rdf-canonize/lib/platform.js\n");

/***/ })

};
;