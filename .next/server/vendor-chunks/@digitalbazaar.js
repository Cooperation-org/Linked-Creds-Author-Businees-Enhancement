"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@digitalbazaar";
exports.ids = ["vendor-chunks/@digitalbazaar"];
exports.modules = {

/***/ "(ssr)/./node_modules/@digitalbazaar/lru-memoize/node_modules/lru-cache/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/lru-memoize/node_modules/lru-cache/index.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = __webpack_require__(/*! yallist */ \"(ssr)/./node_modules/yallist/yallist.js\")\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvbHJ1LW1lbW9pemUvbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLHdEQUFTOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCOztBQUVsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCLGtCQUFrQjtBQUNsQixxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQSwyQ0FBMkMsZ0JBQWdCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQyxnQkFBZ0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL2xydS1tZW1vaXplL25vZGVfbW9kdWxlcy9scnUtY2FjaGUvaW5kZXguanM/ZjJmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLy8gQSBsaW5rZWQgbGlzdCB0byBrZWVwIHRyYWNrIG9mIHJlY2VudGx5LXVzZWQtbmVzc1xuY29uc3QgWWFsbGlzdCA9IHJlcXVpcmUoJ3lhbGxpc3QnKVxuXG5jb25zdCBNQVggPSBTeW1ib2woJ21heCcpXG5jb25zdCBMRU5HVEggPSBTeW1ib2woJ2xlbmd0aCcpXG5jb25zdCBMRU5HVEhfQ0FMQ1VMQVRPUiA9IFN5bWJvbCgnbGVuZ3RoQ2FsY3VsYXRvcicpXG5jb25zdCBBTExPV19TVEFMRSA9IFN5bWJvbCgnYWxsb3dTdGFsZScpXG5jb25zdCBNQVhfQUdFID0gU3ltYm9sKCdtYXhBZ2UnKVxuY29uc3QgRElTUE9TRSA9IFN5bWJvbCgnZGlzcG9zZScpXG5jb25zdCBOT19ESVNQT1NFX09OX1NFVCA9IFN5bWJvbCgnbm9EaXNwb3NlT25TZXQnKVxuY29uc3QgTFJVX0xJU1QgPSBTeW1ib2woJ2xydUxpc3QnKVxuY29uc3QgQ0FDSEUgPSBTeW1ib2woJ2NhY2hlJylcbmNvbnN0IFVQREFURV9BR0VfT05fR0VUID0gU3ltYm9sKCd1cGRhdGVBZ2VPbkdldCcpXG5cbmNvbnN0IG5haXZlTGVuZ3RoID0gKCkgPT4gMVxuXG4vLyBscnVMaXN0IGlzIGEgeWFsbGlzdCB3aGVyZSB0aGUgaGVhZCBpcyB0aGUgeW91bmdlc3Rcbi8vIGl0ZW0sIGFuZCB0aGUgdGFpbCBpcyB0aGUgb2xkZXN0LiAgdGhlIGxpc3QgY29udGFpbnMgdGhlIEhpdFxuLy8gb2JqZWN0cyBhcyB0aGUgZW50cmllcy5cbi8vIEVhY2ggSGl0IG9iamVjdCBoYXMgYSByZWZlcmVuY2UgdG8gaXRzIFlhbGxpc3QuTm9kZS4gIFRoaXNcbi8vIG5ldmVyIGNoYW5nZXMuXG4vL1xuLy8gY2FjaGUgaXMgYSBNYXAgKG9yIFBzZXVkb01hcCkgdGhhdCBtYXRjaGVzIHRoZSBrZXlzIHRvXG4vLyB0aGUgWWFsbGlzdC5Ob2RlIG9iamVjdC5cbmNsYXNzIExSVUNhY2hlIHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKVxuICAgICAgb3B0aW9ucyA9IHsgbWF4OiBvcHRpb25zIH1cblxuICAgIGlmICghb3B0aW9ucylcbiAgICAgIG9wdGlvbnMgPSB7fVxuXG4gICAgaWYgKG9wdGlvbnMubWF4ICYmICh0eXBlb2Ygb3B0aW9ucy5tYXggIT09ICdudW1iZXInIHx8IG9wdGlvbnMubWF4IDwgMCkpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXggbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuICAgIC8vIEtpbmQgb2Ygd2VpcmQgdG8gaGF2ZSBhIGRlZmF1bHQgbWF4IG9mIEluZmluaXR5LCBidXQgb2ggd2VsbC5cbiAgICBjb25zdCBtYXggPSB0aGlzW01BWF0gPSBvcHRpb25zLm1heCB8fCBJbmZpbml0eVxuXG4gICAgY29uc3QgbGMgPSBvcHRpb25zLmxlbmd0aCB8fCBuYWl2ZUxlbmd0aFxuICAgIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdID0gKHR5cGVvZiBsYyAhPT0gJ2Z1bmN0aW9uJykgPyBuYWl2ZUxlbmd0aCA6IGxjXG4gICAgdGhpc1tBTExPV19TVEFMRV0gPSBvcHRpb25zLnN0YWxlIHx8IGZhbHNlXG4gICAgaWYgKG9wdGlvbnMubWF4QWdlICYmIHR5cGVvZiBvcHRpb25zLm1heEFnZSAhPT0gJ251bWJlcicpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhBZ2UgbXVzdCBiZSBhIG51bWJlcicpXG4gICAgdGhpc1tNQVhfQUdFXSA9IG9wdGlvbnMubWF4QWdlIHx8IDBcbiAgICB0aGlzW0RJU1BPU0VdID0gb3B0aW9ucy5kaXNwb3NlXG4gICAgdGhpc1tOT19ESVNQT1NFX09OX1NFVF0gPSBvcHRpb25zLm5vRGlzcG9zZU9uU2V0IHx8IGZhbHNlXG4gICAgdGhpc1tVUERBVEVfQUdFX09OX0dFVF0gPSBvcHRpb25zLnVwZGF0ZUFnZU9uR2V0IHx8IGZhbHNlXG4gICAgdGhpcy5yZXNldCgpXG4gIH1cblxuICAvLyByZXNpemUgdGhlIGNhY2hlIHdoZW4gdGhlIG1heCBjaGFuZ2VzLlxuICBzZXQgbWF4IChtTCkge1xuICAgIGlmICh0eXBlb2YgbUwgIT09ICdudW1iZXInIHx8IG1MIDwgMClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlcicpXG5cbiAgICB0aGlzW01BWF0gPSBtTCB8fCBJbmZpbml0eVxuICAgIHRyaW0odGhpcylcbiAgfVxuICBnZXQgbWF4ICgpIHtcbiAgICByZXR1cm4gdGhpc1tNQVhdXG4gIH1cblxuICBzZXQgYWxsb3dTdGFsZSAoYWxsb3dTdGFsZSkge1xuICAgIHRoaXNbQUxMT1dfU1RBTEVdID0gISFhbGxvd1N0YWxlXG4gIH1cbiAgZ2V0IGFsbG93U3RhbGUgKCkge1xuICAgIHJldHVybiB0aGlzW0FMTE9XX1NUQUxFXVxuICB9XG5cbiAgc2V0IG1heEFnZSAobUEpIHtcbiAgICBpZiAodHlwZW9mIG1BICE9PSAnbnVtYmVyJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heEFnZSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlcicpXG5cbiAgICB0aGlzW01BWF9BR0VdID0gbUFcbiAgICB0cmltKHRoaXMpXG4gIH1cbiAgZ2V0IG1heEFnZSAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTUFYX0FHRV1cbiAgfVxuXG4gIC8vIHJlc2l6ZSB0aGUgY2FjaGUgd2hlbiB0aGUgbGVuZ3RoQ2FsY3VsYXRvciBjaGFuZ2VzLlxuICBzZXQgbGVuZ3RoQ2FsY3VsYXRvciAobEMpIHtcbiAgICBpZiAodHlwZW9mIGxDICE9PSAnZnVuY3Rpb24nKVxuICAgICAgbEMgPSBuYWl2ZUxlbmd0aFxuXG4gICAgaWYgKGxDICE9PSB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSkge1xuICAgICAgdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0gPSBsQ1xuICAgICAgdGhpc1tMRU5HVEhdID0gMFxuICAgICAgdGhpc1tMUlVfTElTVF0uZm9yRWFjaChoaXQgPT4ge1xuICAgICAgICBoaXQubGVuZ3RoID0gdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0oaGl0LnZhbHVlLCBoaXQua2V5KVxuICAgICAgICB0aGlzW0xFTkdUSF0gKz0gaGl0Lmxlbmd0aFxuICAgICAgfSlcbiAgICB9XG4gICAgdHJpbSh0aGlzKVxuICB9XG4gIGdldCBsZW5ndGhDYWxjdWxhdG9yICgpIHsgcmV0dXJuIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdIH1cblxuICBnZXQgbGVuZ3RoICgpIHsgcmV0dXJuIHRoaXNbTEVOR1RIXSB9XG4gIGdldCBpdGVtQ291bnQgKCkgeyByZXR1cm4gdGhpc1tMUlVfTElTVF0ubGVuZ3RoIH1cblxuICByZm9yRWFjaCAoZm4sIHRoaXNwKSB7XG4gICAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gICAgZm9yIChsZXQgd2Fsa2VyID0gdGhpc1tMUlVfTElTVF0udGFpbDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgY29uc3QgcHJldiA9IHdhbGtlci5wcmV2XG4gICAgICBmb3JFYWNoU3RlcCh0aGlzLCBmbiwgd2Fsa2VyLCB0aGlzcClcbiAgICAgIHdhbGtlciA9IHByZXZcbiAgICB9XG4gIH1cblxuICBmb3JFYWNoIChmbiwgdGhpc3ApIHtcbiAgICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgICBmb3IgKGxldCB3YWxrZXIgPSB0aGlzW0xSVV9MSVNUXS5oZWFkOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgICBjb25zdCBuZXh0ID0gd2Fsa2VyLm5leHRcbiAgICAgIGZvckVhY2hTdGVwKHRoaXMsIGZuLCB3YWxrZXIsIHRoaXNwKVxuICAgICAgd2Fsa2VyID0gbmV4dFxuICAgIH1cbiAgfVxuXG4gIGtleXMgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS50b0FycmF5KCkubWFwKGsgPT4gay5rZXkpXG4gIH1cblxuICB2YWx1ZXMgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS50b0FycmF5KCkubWFwKGsgPT4gay52YWx1ZSlcbiAgfVxuXG4gIHJlc2V0ICgpIHtcbiAgICBpZiAodGhpc1tESVNQT1NFXSAmJlxuICAgICAgICB0aGlzW0xSVV9MSVNUXSAmJlxuICAgICAgICB0aGlzW0xSVV9MSVNUXS5sZW5ndGgpIHtcbiAgICAgIHRoaXNbTFJVX0xJU1RdLmZvckVhY2goaGl0ID0+IHRoaXNbRElTUE9TRV0oaGl0LmtleSwgaGl0LnZhbHVlKSlcbiAgICB9XG5cbiAgICB0aGlzW0NBQ0hFXSA9IG5ldyBNYXAoKSAvLyBoYXNoIG9mIGl0ZW1zIGJ5IGtleVxuICAgIHRoaXNbTFJVX0xJU1RdID0gbmV3IFlhbGxpc3QoKSAvLyBsaXN0IG9mIGl0ZW1zIGluIG9yZGVyIG9mIHVzZSByZWNlbmN5XG4gICAgdGhpc1tMRU5HVEhdID0gMCAvLyBsZW5ndGggb2YgaXRlbXMgaW4gdGhlIGxpc3RcbiAgfVxuXG4gIGR1bXAgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS5tYXAoaGl0ID0+XG4gICAgICBpc1N0YWxlKHRoaXMsIGhpdCkgPyBmYWxzZSA6IHtcbiAgICAgICAgazogaGl0LmtleSxcbiAgICAgICAgdjogaGl0LnZhbHVlLFxuICAgICAgICBlOiBoaXQubm93ICsgKGhpdC5tYXhBZ2UgfHwgMClcbiAgICAgIH0pLnRvQXJyYXkoKS5maWx0ZXIoaCA9PiBoKVxuICB9XG5cbiAgZHVtcExydSAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTFJVX0xJU1RdXG4gIH1cblxuICBzZXQgKGtleSwgdmFsdWUsIG1heEFnZSkge1xuICAgIG1heEFnZSA9IG1heEFnZSB8fCB0aGlzW01BWF9BR0VdXG5cbiAgICBpZiAobWF4QWdlICYmIHR5cGVvZiBtYXhBZ2UgIT09ICdudW1iZXInKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4QWdlIG11c3QgYmUgYSBudW1iZXInKVxuXG4gICAgY29uc3Qgbm93ID0gbWF4QWdlID8gRGF0ZS5ub3coKSA6IDBcbiAgICBjb25zdCBsZW4gPSB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSh2YWx1ZSwga2V5KVxuXG4gICAgaWYgKHRoaXNbQ0FDSEVdLmhhcyhrZXkpKSB7XG4gICAgICBpZiAobGVuID4gdGhpc1tNQVhdKSB7XG4gICAgICAgIGRlbCh0aGlzLCB0aGlzW0NBQ0hFXS5nZXQoa2V5KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzW0NBQ0hFXS5nZXQoa2V5KVxuICAgICAgY29uc3QgaXRlbSA9IG5vZGUudmFsdWVcblxuICAgICAgLy8gZGlzcG9zZSBvZiB0aGUgb2xkIG9uZSBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgICAgIC8vIHNwbGl0IG91dCBpbnRvIDIgaWZzIGZvciBiZXR0ZXIgY292ZXJhZ2UgdHJhY2tpbmdcbiAgICAgIGlmICh0aGlzW0RJU1BPU0VdKSB7XG4gICAgICAgIGlmICghdGhpc1tOT19ESVNQT1NFX09OX1NFVF0pXG4gICAgICAgICAgdGhpc1tESVNQT1NFXShrZXksIGl0ZW0udmFsdWUpXG4gICAgICB9XG5cbiAgICAgIGl0ZW0ubm93ID0gbm93XG4gICAgICBpdGVtLm1heEFnZSA9IG1heEFnZVxuICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlXG4gICAgICB0aGlzW0xFTkdUSF0gKz0gbGVuIC0gaXRlbS5sZW5ndGhcbiAgICAgIGl0ZW0ubGVuZ3RoID0gbGVuXG4gICAgICB0aGlzLmdldChrZXkpXG4gICAgICB0cmltKHRoaXMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGhpdCA9IG5ldyBFbnRyeShrZXksIHZhbHVlLCBsZW4sIG5vdywgbWF4QWdlKVxuXG4gICAgLy8gb3ZlcnNpemVkIG9iamVjdHMgZmFsbCBvdXQgb2YgY2FjaGUgYXV0b21hdGljYWxseS5cbiAgICBpZiAoaGl0Lmxlbmd0aCA+IHRoaXNbTUFYXSkge1xuICAgICAgaWYgKHRoaXNbRElTUE9TRV0pXG4gICAgICAgIHRoaXNbRElTUE9TRV0oa2V5LCB2YWx1ZSlcblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdGhpc1tMRU5HVEhdICs9IGhpdC5sZW5ndGhcbiAgICB0aGlzW0xSVV9MSVNUXS51bnNoaWZ0KGhpdClcbiAgICB0aGlzW0NBQ0hFXS5zZXQoa2V5LCB0aGlzW0xSVV9MSVNUXS5oZWFkKVxuICAgIHRyaW0odGhpcylcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaGFzIChrZXkpIHtcbiAgICBpZiAoIXRoaXNbQ0FDSEVdLmhhcyhrZXkpKSByZXR1cm4gZmFsc2VcbiAgICBjb25zdCBoaXQgPSB0aGlzW0NBQ0hFXS5nZXQoa2V5KS52YWx1ZVxuICAgIHJldHVybiAhaXNTdGFsZSh0aGlzLCBoaXQpXG4gIH1cblxuICBnZXQgKGtleSkge1xuICAgIHJldHVybiBnZXQodGhpcywga2V5LCB0cnVlKVxuICB9XG5cbiAgcGVlayAoa2V5KSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBrZXksIGZhbHNlKVxuICB9XG5cbiAgcG9wICgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpc1tMUlVfTElTVF0udGFpbFxuICAgIGlmICghbm9kZSlcbiAgICAgIHJldHVybiBudWxsXG5cbiAgICBkZWwodGhpcywgbm9kZSlcbiAgICByZXR1cm4gbm9kZS52YWx1ZVxuICB9XG5cbiAgZGVsIChrZXkpIHtcbiAgICBkZWwodGhpcywgdGhpc1tDQUNIRV0uZ2V0KGtleSkpXG4gIH1cblxuICBsb2FkIChhcnIpIHtcbiAgICAvLyByZXNldCB0aGUgY2FjaGVcbiAgICB0aGlzLnJlc2V0KClcblxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcbiAgICAvLyBBIHByZXZpb3VzIHNlcmlhbGl6ZWQgY2FjaGUgaGFzIHRoZSBtb3N0IHJlY2VudCBpdGVtcyBmaXJzdFxuICAgIGZvciAobGV0IGwgPSBhcnIubGVuZ3RoIC0gMTsgbCA+PSAwOyBsLS0pIHtcbiAgICAgIGNvbnN0IGhpdCA9IGFycltsXVxuICAgICAgY29uc3QgZXhwaXJlc0F0ID0gaGl0LmUgfHwgMFxuICAgICAgaWYgKGV4cGlyZXNBdCA9PT0gMClcbiAgICAgICAgLy8gdGhlIGl0ZW0gd2FzIGNyZWF0ZWQgd2l0aG91dCBleHBpcmF0aW9uIGluIGEgbm9uIGFnZWQgY2FjaGVcbiAgICAgICAgdGhpcy5zZXQoaGl0LmssIGhpdC52KVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1heEFnZSA9IGV4cGlyZXNBdCAtIG5vd1xuICAgICAgICAvLyBkb250IGFkZCBhbHJlYWR5IGV4cGlyZWQgaXRlbXNcbiAgICAgICAgaWYgKG1heEFnZSA+IDApIHtcbiAgICAgICAgICB0aGlzLnNldChoaXQuaywgaGl0LnYsIG1heEFnZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBydW5lICgpIHtcbiAgICB0aGlzW0NBQ0hFXS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiBnZXQodGhpcywga2V5LCBmYWxzZSkpXG4gIH1cbn1cblxuY29uc3QgZ2V0ID0gKHNlbGYsIGtleSwgZG9Vc2UpID0+IHtcbiAgY29uc3Qgbm9kZSA9IHNlbGZbQ0FDSEVdLmdldChrZXkpXG4gIGlmIChub2RlKSB7XG4gICAgY29uc3QgaGl0ID0gbm9kZS52YWx1ZVxuICAgIGlmIChpc1N0YWxlKHNlbGYsIGhpdCkpIHtcbiAgICAgIGRlbChzZWxmLCBub2RlKVxuICAgICAgaWYgKCFzZWxmW0FMTE9XX1NUQUxFXSlcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZG9Vc2UpIHtcbiAgICAgICAgaWYgKHNlbGZbVVBEQVRFX0FHRV9PTl9HRVRdKVxuICAgICAgICAgIG5vZGUudmFsdWUubm93ID0gRGF0ZS5ub3coKVxuICAgICAgICBzZWxmW0xSVV9MSVNUXS51bnNoaWZ0Tm9kZShub2RlKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGl0LnZhbHVlXG4gIH1cbn1cblxuY29uc3QgaXNTdGFsZSA9IChzZWxmLCBoaXQpID0+IHtcbiAgaWYgKCFoaXQgfHwgKCFoaXQubWF4QWdlICYmICFzZWxmW01BWF9BR0VdKSlcbiAgICByZXR1cm4gZmFsc2VcblxuICBjb25zdCBkaWZmID0gRGF0ZS5ub3coKSAtIGhpdC5ub3dcbiAgcmV0dXJuIGhpdC5tYXhBZ2UgPyBkaWZmID4gaGl0Lm1heEFnZVxuICAgIDogc2VsZltNQVhfQUdFXSAmJiAoZGlmZiA+IHNlbGZbTUFYX0FHRV0pXG59XG5cbmNvbnN0IHRyaW0gPSBzZWxmID0+IHtcbiAgaWYgKHNlbGZbTEVOR1RIXSA+IHNlbGZbTUFYXSkge1xuICAgIGZvciAobGV0IHdhbGtlciA9IHNlbGZbTFJVX0xJU1RdLnRhaWw7XG4gICAgICBzZWxmW0xFTkdUSF0gPiBzZWxmW01BWF0gJiYgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgLy8gV2Uga25vdyB0aGF0IHdlJ3JlIGFib3V0IHRvIGRlbGV0ZSB0aGlzIG9uZSwgYW5kIGFsc29cbiAgICAgIC8vIHdoYXQgdGhlIG5leHQgbGVhc3QgcmVjZW50bHkgdXNlZCBrZXkgd2lsbCBiZSwgc28ganVzdFxuICAgICAgLy8gZ28gYWhlYWQgYW5kIHNldCBpdCBub3cuXG4gICAgICBjb25zdCBwcmV2ID0gd2Fsa2VyLnByZXZcbiAgICAgIGRlbChzZWxmLCB3YWxrZXIpXG4gICAgICB3YWxrZXIgPSBwcmV2XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGRlbCA9IChzZWxmLCBub2RlKSA9PiB7XG4gIGlmIChub2RlKSB7XG4gICAgY29uc3QgaGl0ID0gbm9kZS52YWx1ZVxuICAgIGlmIChzZWxmW0RJU1BPU0VdKVxuICAgICAgc2VsZltESVNQT1NFXShoaXQua2V5LCBoaXQudmFsdWUpXG5cbiAgICBzZWxmW0xFTkdUSF0gLT0gaGl0Lmxlbmd0aFxuICAgIHNlbGZbQ0FDSEVdLmRlbGV0ZShoaXQua2V5KVxuICAgIHNlbGZbTFJVX0xJU1RdLnJlbW92ZU5vZGUobm9kZSlcbiAgfVxufVxuXG5jbGFzcyBFbnRyeSB7XG4gIGNvbnN0cnVjdG9yIChrZXksIHZhbHVlLCBsZW5ndGgsIG5vdywgbWF4QWdlKSB7XG4gICAgdGhpcy5rZXkgPSBrZXlcbiAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aFxuICAgIHRoaXMubm93ID0gbm93XG4gICAgdGhpcy5tYXhBZ2UgPSBtYXhBZ2UgfHwgMFxuICB9XG59XG5cbmNvbnN0IGZvckVhY2hTdGVwID0gKHNlbGYsIGZuLCBub2RlLCB0aGlzcCkgPT4ge1xuICBsZXQgaGl0ID0gbm9kZS52YWx1ZVxuICBpZiAoaXNTdGFsZShzZWxmLCBoaXQpKSB7XG4gICAgZGVsKHNlbGYsIG5vZGUpXG4gICAgaWYgKCFzZWxmW0FMTE9XX1NUQUxFXSlcbiAgICAgIGhpdCA9IHVuZGVmaW5lZFxuICB9XG4gIGlmIChoaXQpXG4gICAgZm4uY2FsbCh0aGlzcCwgaGl0LnZhbHVlLCBoaXQua2V5LCBzZWxmKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExSVUNhY2hlXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/lru-memoize/node_modules/lru-cache/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/security-context/dist/context.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/security-context/dist/context.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTEXT: () => (/* binding */ context_3),\n/* harmony export */   CONTEXT_URL: () => (/* binding */ context_4),\n/* harmony export */   SECURITY_CONTEXT_V1_URL: () => (/* binding */ context_5),\n/* harmony export */   SECURITY_CONTEXT_V2_URL: () => (/* binding */ context_6),\n/* harmony export */   constants: () => (/* binding */ context_2),\n/* harmony export */   contexts: () => (/* binding */ context_1),\n/* harmony export */   \"default\": () => (/* binding */ context$1)\n/* harmony export */ });\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar context = createCommonjsModule(function (module, exports) {\n!function(e,t){for(var i in t)e[i]=t[i];}(exports,function(e){var t={};function i(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,i),a.l=!0,a.exports}return i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r});},i.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0});},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var a in e)i.d(r,a,function(t){return e[t]}.bind(null,a));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,\"a\",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p=\"\",i(i.s=0)}([function(e,t,i){/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */const r=i(1),a=i(2),c=i(3),{CONTEXT_URL:n,SECURITY_CONTEXT_V1_URL:o,SECURITY_CONTEXT_V2_URL:s}=c,p=new Map;p.set(o,r),p.set(s,a),e.exports={constants:c,contexts:p,SECURITY_CONTEXT_V1_URL:o,SECURITY_CONTEXT_V2_URL:s,CONTEXT_URL:n,CONTEXT:a};},function(e,t,i){/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */e.exports={\"@context\":{id:\"@id\",type:\"@type\",dc:\"http://purl.org/dc/terms/\",sec:\"https://w3id.org/security#\",xsd:\"http://www.w3.org/2001/XMLSchema#\",EcdsaKoblitzSignature2016:\"sec:EcdsaKoblitzSignature2016\",Ed25519Signature2018:\"sec:Ed25519Signature2018\",EncryptedMessage:\"sec:EncryptedMessage\",GraphSignature2012:\"sec:GraphSignature2012\",LinkedDataSignature2015:\"sec:LinkedDataSignature2015\",LinkedDataSignature2016:\"sec:LinkedDataSignature2016\",CryptographicKey:\"sec:Key\",authenticationTag:\"sec:authenticationTag\",canonicalizationAlgorithm:\"sec:canonicalizationAlgorithm\",cipherAlgorithm:\"sec:cipherAlgorithm\",cipherData:\"sec:cipherData\",cipherKey:\"sec:cipherKey\",created:{\"@id\":\"dc:created\",\"@type\":\"xsd:dateTime\"},creator:{\"@id\":\"dc:creator\",\"@type\":\"@id\"},digestAlgorithm:\"sec:digestAlgorithm\",digestValue:\"sec:digestValue\",domain:\"sec:domain\",encryptionKey:\"sec:encryptionKey\",expiration:{\"@id\":\"sec:expiration\",\"@type\":\"xsd:dateTime\"},expires:{\"@id\":\"sec:expiration\",\"@type\":\"xsd:dateTime\"},initializationVector:\"sec:initializationVector\",iterationCount:\"sec:iterationCount\",nonce:\"sec:nonce\",normalizationAlgorithm:\"sec:normalizationAlgorithm\",owner:{\"@id\":\"sec:owner\",\"@type\":\"@id\"},password:\"sec:password\",privateKey:{\"@id\":\"sec:privateKey\",\"@type\":\"@id\"},privateKeyPem:\"sec:privateKeyPem\",publicKey:{\"@id\":\"sec:publicKey\",\"@type\":\"@id\"},publicKeyBase58:\"sec:publicKeyBase58\",publicKeyPem:\"sec:publicKeyPem\",publicKeyWif:\"sec:publicKeyWif\",publicKeyService:{\"@id\":\"sec:publicKeyService\",\"@type\":\"@id\"},revoked:{\"@id\":\"sec:revoked\",\"@type\":\"xsd:dateTime\"},salt:\"sec:salt\",signature:\"sec:signature\",signatureAlgorithm:\"sec:signingAlgorithm\",signatureValue:\"sec:signatureValue\"}};},function(e,t,i){/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */e.exports={\"@context\":[{\"@version\":1.1},\"https://w3id.org/security/v1\",{AesKeyWrappingKey2019:\"sec:AesKeyWrappingKey2019\",DeleteKeyOperation:\"sec:DeleteKeyOperation\",DeriveSecretOperation:\"sec:DeriveSecretOperation\",EcdsaSecp256k1Signature2019:\"sec:EcdsaSecp256k1Signature2019\",EcdsaSecp256r1Signature2019:\"sec:EcdsaSecp256r1Signature2019\",EcdsaSecp256k1VerificationKey2019:\"sec:EcdsaSecp256k1VerificationKey2019\",EcdsaSecp256r1VerificationKey2019:\"sec:EcdsaSecp256r1VerificationKey2019\",Ed25519Signature2018:\"sec:Ed25519Signature2018\",Ed25519VerificationKey2018:\"sec:Ed25519VerificationKey2018\",EquihashProof2018:\"sec:EquihashProof2018\",ExportKeyOperation:\"sec:ExportKeyOperation\",GenerateKeyOperation:\"sec:GenerateKeyOperation\",KmsOperation:\"sec:KmsOperation\",RevokeKeyOperation:\"sec:RevokeKeyOperation\",RsaSignature2018:\"sec:RsaSignature2018\",RsaVerificationKey2018:\"sec:RsaVerificationKey2018\",Sha256HmacKey2019:\"sec:Sha256HmacKey2019\",SignOperation:\"sec:SignOperation\",UnwrapKeyOperation:\"sec:UnwrapKeyOperation\",VerifyOperation:\"sec:VerifyOperation\",WrapKeyOperation:\"sec:WrapKeyOperation\",X25519KeyAgreementKey2019:\"sec:X25519KeyAgreementKey2019\",allowedAction:\"sec:allowedAction\",assertionMethod:{\"@id\":\"sec:assertionMethod\",\"@type\":\"@id\",\"@container\":\"@set\"},authentication:{\"@id\":\"sec:authenticationMethod\",\"@type\":\"@id\",\"@container\":\"@set\"},capability:{\"@id\":\"sec:capability\",\"@type\":\"@id\"},capabilityAction:\"sec:capabilityAction\",capabilityChain:{\"@id\":\"sec:capabilityChain\",\"@type\":\"@id\",\"@container\":\"@list\"},capabilityDelegation:{\"@id\":\"sec:capabilityDelegationMethod\",\"@type\":\"@id\",\"@container\":\"@set\"},capabilityInvocation:{\"@id\":\"sec:capabilityInvocationMethod\",\"@type\":\"@id\",\"@container\":\"@set\"},caveat:{\"@id\":\"sec:caveat\",\"@type\":\"@id\",\"@container\":\"@set\"},challenge:\"sec:challenge\",ciphertext:\"sec:ciphertext\",controller:{\"@id\":\"sec:controller\",\"@type\":\"@id\"},delegator:{\"@id\":\"sec:delegator\",\"@type\":\"@id\"},equihashParameterK:{\"@id\":\"sec:equihashParameterK\",\"@type\":\"xsd:integer\"},equihashParameterN:{\"@id\":\"sec:equihashParameterN\",\"@type\":\"xsd:integer\"},invocationTarget:{\"@id\":\"sec:invocationTarget\",\"@type\":\"@id\"},invoker:{\"@id\":\"sec:invoker\",\"@type\":\"@id\"},jws:\"sec:jws\",keyAgreement:{\"@id\":\"sec:keyAgreementMethod\",\"@type\":\"@id\",\"@container\":\"@set\"},kmsModule:{\"@id\":\"sec:kmsModule\"},parentCapability:{\"@id\":\"sec:parentCapability\",\"@type\":\"@id\"},plaintext:\"sec:plaintext\",proof:{\"@id\":\"sec:proof\",\"@type\":\"@id\",\"@container\":\"@graph\"},proofPurpose:{\"@id\":\"sec:proofPurpose\",\"@type\":\"@vocab\"},proofValue:\"sec:proofValue\",referenceId:\"sec:referenceId\",unwrappedKey:\"sec:unwrappedKey\",verificationMethod:{\"@id\":\"sec:verificationMethod\",\"@type\":\"@id\"},verifyData:\"sec:verifyData\",wrappedKey:\"sec:wrappedKey\"}]};},function(e,t,i){/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */e.exports={SECURITY_CONTEXT_V1_URL:\"https://w3id.org/security/v1\",SECURITY_CONTEXT_V2_URL:\"https://w3id.org/security/v2\",CONTEXT_URL:\"https://w3id.org/security/v2\"};}]));\n});\n\nvar context$1 = unwrapExports(context);\nvar context_1 = context.contexts;\nvar context_2 = context.constants;\nvar context_3 = context.CONTEXT;\nvar context_4 = context.CONTEXT_URL;\nvar context_5 = context.SECURITY_CONTEXT_V1_URL;\nvar context_6 = context.SECURITY_CONTEXT_V2_URL;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvc2VjdXJpdHktY29udGV4dC9kaXN0L2NvbnRleHQuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsYUFBYTtBQUNoQzs7QUFFQTtBQUNBLGVBQWUsMEJBQTBCLHFCQUFxQixTQUFTLGNBQWMsNEJBQTRCLFlBQVkscUJBQXFCLDJEQUEyRCx1Q0FBdUMscUNBQXFDLG9CQUFvQixHQUFHLGlCQUFpQiw0RkFBNEYsZUFBZSx3Q0FBd0MsU0FBUyxHQUFHLG1CQUFtQiw4QkFBOEIscURBQXFELDBCQUEwQiw2Q0FBNkMsc0JBQXNCLDZEQUE2RCxZQUFZLGVBQWUsU0FBUyxpQkFBaUIsaUNBQWlDLGlCQUFpQixZQUFZLFVBQVUsc0JBQXNCLG1CQUFtQixpREFBaUQsaUJBQWlCLGtCQUFrQjtBQUMxOUI7QUFDQSwrQkFBK0Isa0VBQWtFLGFBQWEsaUNBQWlDLHFHQUFxRyxpQkFBaUI7QUFDclE7QUFDQSxjQUFjLFlBQVksNG9CQUE0b0IsMENBQTBDLFVBQVUsaUNBQWlDLHVJQUF1SSw4Q0FBOEMsVUFBVSw4Q0FBOEMsa0tBQWtLLGdDQUFnQyxxQ0FBcUMscUNBQXFDLDhDQUE4QyxvQ0FBb0MseUhBQXlILDJDQUEyQyxVQUFVLDJDQUEyQyw0SEFBNEgsaUJBQWlCO0FBQzVxRDtBQUNBLGNBQWMsYUFBYSxlQUFlLGlDQUFpQyw2bUNBQTZtQyw4REFBOEQsaUJBQWlCLG1FQUFtRSxhQUFhLHFDQUFxQywwREFBMEQsK0RBQStELHVCQUF1Qix5RUFBeUUsdUJBQXVCLHlFQUF5RSxTQUFTLHFEQUFxRCxtRUFBbUUscUNBQXFDLFlBQVksb0NBQW9DLHFCQUFxQixxREFBcUQscUJBQXFCLHFEQUFxRCxtQkFBbUIsMkNBQTJDLFVBQVUsa0NBQWtDLDZCQUE2QixpRUFBaUUsWUFBWSxzQkFBc0IsbUJBQW1CLDJDQUEyQyxrQ0FBa0Msc0RBQXNELGVBQWUsMENBQTBDLCtHQUErRyw2Q0FBNkMseURBQXlELElBQUksaUJBQWlCO0FBQ2xzRjtBQUNBLGNBQWMsMkpBQTJKO0FBQ3pLLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTJNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL3NlY3VyaXR5LWNvbnRleHQvZGlzdC9jb250ZXh0LmVzbS5qcz84NzVhIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHVud3JhcEV4cG9ydHMgKHgpIHtcblx0cmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnZGVmYXVsdCcpID8geFsnZGVmYXVsdCddIDogeDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBjb250ZXh0ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuIWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpIGluIHQpZVtpXT10W2ldO30oZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBpKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgYT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGEuZXhwb3J0cyxhLGEuZXhwb3J0cyxpKSxhLmw9ITAsYS5leHBvcnRzfXJldHVybiBpLm09ZSxpLmM9dCxpLmQ9ZnVuY3Rpb24oZSx0LHIpe2kubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpyfSk7fSxpLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt9LGkudD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9aShlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgcj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKGkucihyKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIGEgaW4gZSlpLmQocixhLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsYSkpO3JldHVybiByfSxpLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIGkuZCh0LFwiYVwiLHQpLHR9LGkubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0saS5wPVwiXCIsaShpLnM9MCl9KFtmdW5jdGlvbihlLHQsaSl7LyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL2NvbnN0IHI9aSgxKSxhPWkoMiksYz1pKDMpLHtDT05URVhUX1VSTDpuLFNFQ1VSSVRZX0NPTlRFWFRfVjFfVVJMOm8sU0VDVVJJVFlfQ09OVEVYVF9WMl9VUkw6c309YyxwPW5ldyBNYXA7cC5zZXQobyxyKSxwLnNldChzLGEpLGUuZXhwb3J0cz17Y29uc3RhbnRzOmMsY29udGV4dHM6cCxTRUNVUklUWV9DT05URVhUX1YxX1VSTDpvLFNFQ1VSSVRZX0NPTlRFWFRfVjJfVVJMOnMsQ09OVEVYVF9VUkw6bixDT05URVhUOmF9O30sZnVuY3Rpb24oZSx0LGkpey8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIxIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9lLmV4cG9ydHM9e1wiQGNvbnRleHRcIjp7aWQ6XCJAaWRcIix0eXBlOlwiQHR5cGVcIixkYzpcImh0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy9cIixzZWM6XCJodHRwczovL3czaWQub3JnL3NlY3VyaXR5I1wiLHhzZDpcImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI1wiLEVjZHNhS29ibGl0elNpZ25hdHVyZTIwMTY6XCJzZWM6RWNkc2FLb2JsaXR6U2lnbmF0dXJlMjAxNlwiLEVkMjU1MTlTaWduYXR1cmUyMDE4Olwic2VjOkVkMjU1MTlTaWduYXR1cmUyMDE4XCIsRW5jcnlwdGVkTWVzc2FnZTpcInNlYzpFbmNyeXB0ZWRNZXNzYWdlXCIsR3JhcGhTaWduYXR1cmUyMDEyOlwic2VjOkdyYXBoU2lnbmF0dXJlMjAxMlwiLExpbmtlZERhdGFTaWduYXR1cmUyMDE1Olwic2VjOkxpbmtlZERhdGFTaWduYXR1cmUyMDE1XCIsTGlua2VkRGF0YVNpZ25hdHVyZTIwMTY6XCJzZWM6TGlua2VkRGF0YVNpZ25hdHVyZTIwMTZcIixDcnlwdG9ncmFwaGljS2V5Olwic2VjOktleVwiLGF1dGhlbnRpY2F0aW9uVGFnOlwic2VjOmF1dGhlbnRpY2F0aW9uVGFnXCIsY2Fub25pY2FsaXphdGlvbkFsZ29yaXRobTpcInNlYzpjYW5vbmljYWxpemF0aW9uQWxnb3JpdGhtXCIsY2lwaGVyQWxnb3JpdGhtOlwic2VjOmNpcGhlckFsZ29yaXRobVwiLGNpcGhlckRhdGE6XCJzZWM6Y2lwaGVyRGF0YVwiLGNpcGhlcktleTpcInNlYzpjaXBoZXJLZXlcIixjcmVhdGVkOntcIkBpZFwiOlwiZGM6Y3JlYXRlZFwiLFwiQHR5cGVcIjpcInhzZDpkYXRlVGltZVwifSxjcmVhdG9yOntcIkBpZFwiOlwiZGM6Y3JlYXRvclwiLFwiQHR5cGVcIjpcIkBpZFwifSxkaWdlc3RBbGdvcml0aG06XCJzZWM6ZGlnZXN0QWxnb3JpdGhtXCIsZGlnZXN0VmFsdWU6XCJzZWM6ZGlnZXN0VmFsdWVcIixkb21haW46XCJzZWM6ZG9tYWluXCIsZW5jcnlwdGlvbktleTpcInNlYzplbmNyeXB0aW9uS2V5XCIsZXhwaXJhdGlvbjp7XCJAaWRcIjpcInNlYzpleHBpcmF0aW9uXCIsXCJAdHlwZVwiOlwieHNkOmRhdGVUaW1lXCJ9LGV4cGlyZXM6e1wiQGlkXCI6XCJzZWM6ZXhwaXJhdGlvblwiLFwiQHR5cGVcIjpcInhzZDpkYXRlVGltZVwifSxpbml0aWFsaXphdGlvblZlY3RvcjpcInNlYzppbml0aWFsaXphdGlvblZlY3RvclwiLGl0ZXJhdGlvbkNvdW50Olwic2VjOml0ZXJhdGlvbkNvdW50XCIsbm9uY2U6XCJzZWM6bm9uY2VcIixub3JtYWxpemF0aW9uQWxnb3JpdGhtOlwic2VjOm5vcm1hbGl6YXRpb25BbGdvcml0aG1cIixvd25lcjp7XCJAaWRcIjpcInNlYzpvd25lclwiLFwiQHR5cGVcIjpcIkBpZFwifSxwYXNzd29yZDpcInNlYzpwYXNzd29yZFwiLHByaXZhdGVLZXk6e1wiQGlkXCI6XCJzZWM6cHJpdmF0ZUtleVwiLFwiQHR5cGVcIjpcIkBpZFwifSxwcml2YXRlS2V5UGVtOlwic2VjOnByaXZhdGVLZXlQZW1cIixwdWJsaWNLZXk6e1wiQGlkXCI6XCJzZWM6cHVibGljS2V5XCIsXCJAdHlwZVwiOlwiQGlkXCJ9LHB1YmxpY0tleUJhc2U1ODpcInNlYzpwdWJsaWNLZXlCYXNlNThcIixwdWJsaWNLZXlQZW06XCJzZWM6cHVibGljS2V5UGVtXCIscHVibGljS2V5V2lmOlwic2VjOnB1YmxpY0tleVdpZlwiLHB1YmxpY0tleVNlcnZpY2U6e1wiQGlkXCI6XCJzZWM6cHVibGljS2V5U2VydmljZVwiLFwiQHR5cGVcIjpcIkBpZFwifSxyZXZva2VkOntcIkBpZFwiOlwic2VjOnJldm9rZWRcIixcIkB0eXBlXCI6XCJ4c2Q6ZGF0ZVRpbWVcIn0sc2FsdDpcInNlYzpzYWx0XCIsc2lnbmF0dXJlOlwic2VjOnNpZ25hdHVyZVwiLHNpZ25hdHVyZUFsZ29yaXRobTpcInNlYzpzaWduaW5nQWxnb3JpdGhtXCIsc2lnbmF0dXJlVmFsdWU6XCJzZWM6c2lnbmF0dXJlVmFsdWVcIn19O30sZnVuY3Rpb24oZSx0LGkpey8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIxIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9lLmV4cG9ydHM9e1wiQGNvbnRleHRcIjpbe1wiQHZlcnNpb25cIjoxLjF9LFwiaHR0cHM6Ly93M2lkLm9yZy9zZWN1cml0eS92MVwiLHtBZXNLZXlXcmFwcGluZ0tleTIwMTk6XCJzZWM6QWVzS2V5V3JhcHBpbmdLZXkyMDE5XCIsRGVsZXRlS2V5T3BlcmF0aW9uOlwic2VjOkRlbGV0ZUtleU9wZXJhdGlvblwiLERlcml2ZVNlY3JldE9wZXJhdGlvbjpcInNlYzpEZXJpdmVTZWNyZXRPcGVyYXRpb25cIixFY2RzYVNlY3AyNTZrMVNpZ25hdHVyZTIwMTk6XCJzZWM6RWNkc2FTZWNwMjU2azFTaWduYXR1cmUyMDE5XCIsRWNkc2FTZWNwMjU2cjFTaWduYXR1cmUyMDE5Olwic2VjOkVjZHNhU2VjcDI1NnIxU2lnbmF0dXJlMjAxOVwiLEVjZHNhU2VjcDI1NmsxVmVyaWZpY2F0aW9uS2V5MjAxOTpcInNlYzpFY2RzYVNlY3AyNTZrMVZlcmlmaWNhdGlvbktleTIwMTlcIixFY2RzYVNlY3AyNTZyMVZlcmlmaWNhdGlvbktleTIwMTk6XCJzZWM6RWNkc2FTZWNwMjU2cjFWZXJpZmljYXRpb25LZXkyMDE5XCIsRWQyNTUxOVNpZ25hdHVyZTIwMTg6XCJzZWM6RWQyNTUxOVNpZ25hdHVyZTIwMThcIixFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAxODpcInNlYzpFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAxOFwiLEVxdWloYXNoUHJvb2YyMDE4Olwic2VjOkVxdWloYXNoUHJvb2YyMDE4XCIsRXhwb3J0S2V5T3BlcmF0aW9uOlwic2VjOkV4cG9ydEtleU9wZXJhdGlvblwiLEdlbmVyYXRlS2V5T3BlcmF0aW9uOlwic2VjOkdlbmVyYXRlS2V5T3BlcmF0aW9uXCIsS21zT3BlcmF0aW9uOlwic2VjOkttc09wZXJhdGlvblwiLFJldm9rZUtleU9wZXJhdGlvbjpcInNlYzpSZXZva2VLZXlPcGVyYXRpb25cIixSc2FTaWduYXR1cmUyMDE4Olwic2VjOlJzYVNpZ25hdHVyZTIwMThcIixSc2FWZXJpZmljYXRpb25LZXkyMDE4Olwic2VjOlJzYVZlcmlmaWNhdGlvbktleTIwMThcIixTaGEyNTZIbWFjS2V5MjAxOTpcInNlYzpTaGEyNTZIbWFjS2V5MjAxOVwiLFNpZ25PcGVyYXRpb246XCJzZWM6U2lnbk9wZXJhdGlvblwiLFVud3JhcEtleU9wZXJhdGlvbjpcInNlYzpVbndyYXBLZXlPcGVyYXRpb25cIixWZXJpZnlPcGVyYXRpb246XCJzZWM6VmVyaWZ5T3BlcmF0aW9uXCIsV3JhcEtleU9wZXJhdGlvbjpcInNlYzpXcmFwS2V5T3BlcmF0aW9uXCIsWDI1NTE5S2V5QWdyZWVtZW50S2V5MjAxOTpcInNlYzpYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDE5XCIsYWxsb3dlZEFjdGlvbjpcInNlYzphbGxvd2VkQWN0aW9uXCIsYXNzZXJ0aW9uTWV0aG9kOntcIkBpZFwiOlwic2VjOmFzc2VydGlvbk1ldGhvZFwiLFwiQHR5cGVcIjpcIkBpZFwiLFwiQGNvbnRhaW5lclwiOlwiQHNldFwifSxhdXRoZW50aWNhdGlvbjp7XCJAaWRcIjpcInNlYzphdXRoZW50aWNhdGlvbk1ldGhvZFwiLFwiQHR5cGVcIjpcIkBpZFwiLFwiQGNvbnRhaW5lclwiOlwiQHNldFwifSxjYXBhYmlsaXR5OntcIkBpZFwiOlwic2VjOmNhcGFiaWxpdHlcIixcIkB0eXBlXCI6XCJAaWRcIn0sY2FwYWJpbGl0eUFjdGlvbjpcInNlYzpjYXBhYmlsaXR5QWN0aW9uXCIsY2FwYWJpbGl0eUNoYWluOntcIkBpZFwiOlwic2VjOmNhcGFiaWxpdHlDaGFpblwiLFwiQHR5cGVcIjpcIkBpZFwiLFwiQGNvbnRhaW5lclwiOlwiQGxpc3RcIn0sY2FwYWJpbGl0eURlbGVnYXRpb246e1wiQGlkXCI6XCJzZWM6Y2FwYWJpbGl0eURlbGVnYXRpb25NZXRob2RcIixcIkB0eXBlXCI6XCJAaWRcIixcIkBjb250YWluZXJcIjpcIkBzZXRcIn0sY2FwYWJpbGl0eUludm9jYXRpb246e1wiQGlkXCI6XCJzZWM6Y2FwYWJpbGl0eUludm9jYXRpb25NZXRob2RcIixcIkB0eXBlXCI6XCJAaWRcIixcIkBjb250YWluZXJcIjpcIkBzZXRcIn0sY2F2ZWF0OntcIkBpZFwiOlwic2VjOmNhdmVhdFwiLFwiQHR5cGVcIjpcIkBpZFwiLFwiQGNvbnRhaW5lclwiOlwiQHNldFwifSxjaGFsbGVuZ2U6XCJzZWM6Y2hhbGxlbmdlXCIsY2lwaGVydGV4dDpcInNlYzpjaXBoZXJ0ZXh0XCIsY29udHJvbGxlcjp7XCJAaWRcIjpcInNlYzpjb250cm9sbGVyXCIsXCJAdHlwZVwiOlwiQGlkXCJ9LGRlbGVnYXRvcjp7XCJAaWRcIjpcInNlYzpkZWxlZ2F0b3JcIixcIkB0eXBlXCI6XCJAaWRcIn0sZXF1aWhhc2hQYXJhbWV0ZXJLOntcIkBpZFwiOlwic2VjOmVxdWloYXNoUGFyYW1ldGVyS1wiLFwiQHR5cGVcIjpcInhzZDppbnRlZ2VyXCJ9LGVxdWloYXNoUGFyYW1ldGVyTjp7XCJAaWRcIjpcInNlYzplcXVpaGFzaFBhcmFtZXRlck5cIixcIkB0eXBlXCI6XCJ4c2Q6aW50ZWdlclwifSxpbnZvY2F0aW9uVGFyZ2V0OntcIkBpZFwiOlwic2VjOmludm9jYXRpb25UYXJnZXRcIixcIkB0eXBlXCI6XCJAaWRcIn0saW52b2tlcjp7XCJAaWRcIjpcInNlYzppbnZva2VyXCIsXCJAdHlwZVwiOlwiQGlkXCJ9LGp3czpcInNlYzpqd3NcIixrZXlBZ3JlZW1lbnQ6e1wiQGlkXCI6XCJzZWM6a2V5QWdyZWVtZW50TWV0aG9kXCIsXCJAdHlwZVwiOlwiQGlkXCIsXCJAY29udGFpbmVyXCI6XCJAc2V0XCJ9LGttc01vZHVsZTp7XCJAaWRcIjpcInNlYzprbXNNb2R1bGVcIn0scGFyZW50Q2FwYWJpbGl0eTp7XCJAaWRcIjpcInNlYzpwYXJlbnRDYXBhYmlsaXR5XCIsXCJAdHlwZVwiOlwiQGlkXCJ9LHBsYWludGV4dDpcInNlYzpwbGFpbnRleHRcIixwcm9vZjp7XCJAaWRcIjpcInNlYzpwcm9vZlwiLFwiQHR5cGVcIjpcIkBpZFwiLFwiQGNvbnRhaW5lclwiOlwiQGdyYXBoXCJ9LHByb29mUHVycG9zZTp7XCJAaWRcIjpcInNlYzpwcm9vZlB1cnBvc2VcIixcIkB0eXBlXCI6XCJAdm9jYWJcIn0scHJvb2ZWYWx1ZTpcInNlYzpwcm9vZlZhbHVlXCIscmVmZXJlbmNlSWQ6XCJzZWM6cmVmZXJlbmNlSWRcIix1bndyYXBwZWRLZXk6XCJzZWM6dW53cmFwcGVkS2V5XCIsdmVyaWZpY2F0aW9uTWV0aG9kOntcIkBpZFwiOlwic2VjOnZlcmlmaWNhdGlvbk1ldGhvZFwiLFwiQHR5cGVcIjpcIkBpZFwifSx2ZXJpZnlEYXRhOlwic2VjOnZlcmlmeURhdGFcIix3cmFwcGVkS2V5Olwic2VjOndyYXBwZWRLZXlcIn1dfTt9LGZ1bmN0aW9uKGUsdCxpKXsvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMSBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovZS5leHBvcnRzPXtTRUNVUklUWV9DT05URVhUX1YxX1VSTDpcImh0dHBzOi8vdzNpZC5vcmcvc2VjdXJpdHkvdjFcIixTRUNVUklUWV9DT05URVhUX1YyX1VSTDpcImh0dHBzOi8vdzNpZC5vcmcvc2VjdXJpdHkvdjJcIixDT05URVhUX1VSTDpcImh0dHBzOi8vdzNpZC5vcmcvc2VjdXJpdHkvdjJcIn07fV0pKTtcbn0pO1xuXG52YXIgY29udGV4dCQxID0gdW53cmFwRXhwb3J0cyhjb250ZXh0KTtcbnZhciBjb250ZXh0XzEgPSBjb250ZXh0LmNvbnRleHRzO1xudmFyIGNvbnRleHRfMiA9IGNvbnRleHQuY29uc3RhbnRzO1xudmFyIGNvbnRleHRfMyA9IGNvbnRleHQuQ09OVEVYVDtcbnZhciBjb250ZXh0XzQgPSBjb250ZXh0LkNPTlRFWFRfVVJMO1xudmFyIGNvbnRleHRfNSA9IGNvbnRleHQuU0VDVVJJVFlfQ09OVEVYVF9WMV9VUkw7XG52YXIgY29udGV4dF82ID0gY29udGV4dC5TRUNVUklUWV9DT05URVhUX1YyX1VSTDtcblxuZXhwb3J0IHsgY29udGV4dF8zIGFzIENPTlRFWFQsIGNvbnRleHRfNCBhcyBDT05URVhUX1VSTCwgY29udGV4dF81IGFzIFNFQ1VSSVRZX0NPTlRFWFRfVjFfVVJMLCBjb250ZXh0XzYgYXMgU0VDVVJJVFlfQ09OVEVYVF9WMl9VUkwsIGNvbnRleHRfMiBhcyBjb25zdGFudHMsIGNvbnRleHRfMSBhcyBjb250ZXh0cywgY29udGV4dCQxIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/security-context/dist/context.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/http-client/dist/cjs/index.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@digitalbazaar/http-client/dist/cjs/index.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar undici = __webpack_require__(/*! undici */ \"(ssr)/./node_modules/undici/index.js\");\nvar node_process = __webpack_require__(/*! node:process */ \"node:process\");\n\n/*!\n * Copyright (c) 2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n// as long as an agent has a reference to it, its associated dispatcher will\n// be kept in this cache for reuse\nconst AGENT_CACHE = new WeakMap();\n\n// can only convert agent to dispatcher option on node 18.2+\nconst [major, minor] = node_process.versions.node.split('.').map(v => parseInt(v, 10));\nconst canConvert = (major > 18) || (major === 18 && minor >= 2);\n\n// converts `agent`/`httpsAgent` option to a dispatcher option\nfunction convertAgent(options) {\n  if(!canConvert) {\n    return options;\n  }\n\n  // do not override custom fetch function from another lib\n  if(options?.fetch && !options.fetch._httpClientCustomFetch) {\n    return options;\n  }\n\n  // only override if an agent option is present\n  const agent = options?.agent || options?.httpsAgent;\n  if(!agent) {\n    return options;\n  }\n\n  // use custom fetch if agent has already been converted\n  let fetch = AGENT_CACHE.get(agent);\n  if(!fetch) {\n    const dispatcher = new undici.Agent({connect: agent.options});\n    fetch = createFetch(dispatcher);\n    fetch._httpClientCustomFetch = true;\n    AGENT_CACHE.set(agent, fetch);\n  }\n\n  return {...options, fetch};\n}\n\n// create fetch override uses custom `dispatcher`; since `ky` does not pass\n// the dispatcher option through to `fetch`, we must use this override\nfunction createFetch(dispatcher) {\n  return function fetch(...args) {\n    dispatcher = (args[1] && args[1].dispatcher) || dispatcher;\n    args[1] = {...args[1], dispatcher};\n    // eslint-disable-next-line no-undef\n    return globalThis.fetch(...args);\n  };\n}\n\nfunction deferred(f) {\n  let promise;\n\n  return {\n    then(\n      onfulfilled,\n      onrejected\n    ) {\n      // Use logical OR assignment when Node.js 14.x support is dropped\n      //promise ||= new Promise(resolve => resolve(f()));\n      promise || (promise = new Promise(resolve => resolve(f())));\n      return promise.then(\n        onfulfilled,\n        onrejected\n      );\n    },\n  };\n}\n\n/*!\n * Copyright (c) 2020-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\nconst kyOriginalPromise = deferred(() => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/web-streams-polyfill\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/ky-universal\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/node-domexception\"), __webpack_require__.e(\"vendor-chunks/event-target-shim\"), __webpack_require__.e(\"vendor-chunks/abort-controller\")]).then(__webpack_require__.bind(__webpack_require__, /*! ky-universal */ \"(ssr)/./node_modules/ky-universal/index.js\"))\n  .then(({default: ky}) => ky));\n\nconst DEFAULT_HEADERS = {\n  Accept: 'application/ld+json, application/json'\n};\n\n// methods to proxy from ky\nconst PROXY_METHODS = new Set([\n  'get', 'post', 'put', 'push', 'patch', 'head', 'delete'\n]);\n\n/**\n * Returns a custom httpClient instance. Used to specify default headers and\n * other default overrides.\n *\n * @param {object} [options={}] - Options hashmap.\n * @param {object} [options.parent] - The ky promise to inherit from.\n * @param {object} [options.headers={}] - Default header overrides.\n * @param {object} [options.params] - Other default overrides.\n *\n * @returns {Function} Custom httpClient instance.\n */\nfunction createInstance({\n  parent = kyOriginalPromise, headers = {}, ...params\n} = {}) {\n  // convert legacy agent options\n  params = convertAgent(params);\n\n  // create new ky instance that will asynchronously resolve\n  const kyPromise = deferred(() => parent.then(kyBase => {\n    let ky;\n    if(parent === kyOriginalPromise) {\n      // ensure default headers, allow overrides\n      ky = kyBase.create({\n        headers: {...DEFAULT_HEADERS, ...headers},\n        ...params\n      });\n    } else {\n      // extend parent\n      ky = kyBase.extend({headers, ...params});\n    }\n    return ky;\n  }));\n\n  return _createHttpClient(kyPromise);\n}\n\nfunction _createHttpClient(kyPromise) {\n  async function httpClient(...args) {\n    const ky = await kyPromise;\n    const method = ((args[1] && args[1].method) || 'get').toLowerCase();\n    if(PROXY_METHODS.has(method)) {\n      return httpClient[method].apply(ky[method], args);\n    }\n\n    // convert legacy agent options\n    args[1] = convertAgent(args[1]);\n    return ky.apply(ky, args);\n  }\n\n  for(const method of PROXY_METHODS) {\n    httpClient[method] = async function(...args) {\n      const ky = await kyPromise;\n      return _handleResponse(ky[method], ky, args);\n    };\n  }\n\n  httpClient.create = function({headers = {}, ...params}) {\n    return createInstance({headers, ...params});\n  };\n\n  httpClient.extend = function({headers = {}, ...params}) {\n    return createInstance({parent: kyPromise, headers, ...params});\n  };\n\n  // default async `stop` signal getter\n  Object.defineProperty(httpClient, 'stop', {\n    async get() {\n      const ky = await kyPromise;\n      return ky.stop;\n    }\n  });\n\n  return httpClient;\n}\n\nasync function _handleResponse(target, thisArg, args) {\n  // convert legacy agent options\n  args[1] = convertAgent(args[1]);\n\n  let response;\n  const [url] = args;\n  try {\n    response = await target.apply(thisArg, args);\n  } catch(error) {\n    return _handleError({error, url});\n  }\n  const {parseBody = true} = args[1] || {};\n  // always set 'data', default to undefined\n  let data;\n  if(parseBody) {\n    // a 204 will not include a content-type header\n    const contentType = response.headers.get('content-type');\n    if(contentType && contentType.includes('json')) {\n      data = await response.json();\n    }\n  }\n  Object.defineProperty(response, 'data', {value: data});\n  return response;\n}\n\n/**\n * @param {object} options - Options hashmap.\n * @param {Error} options.error - Error thrown during http operation.\n * @param {string} options.url - Target URL of the request.\n *\n * @returns {Promise} Rejects with a thrown error.\n */\nasync function _handleError({error, url}) {\n  error.requestUrl = url;\n\n  // handle network errors and system errors that do not have a response\n  if(!error.response) {\n    if(error.message === 'Failed to fetch') {\n      error.message = `Failed to fetch \"${url}\". Possible CORS error.`;\n    }\n    // ky's TimeoutError class\n    if(error.name === 'TimeoutError') {\n      error.message = `Request to \"${url}\" timed out.`;\n    }\n\n    throw error;\n  }\n\n  // always move status up to the root of error\n  error.status = error.response.status;\n\n  const contentType = error.response.headers.get('content-type');\n  if(contentType && contentType.includes('json')) {\n    const errorBody = await error.response.json();\n    // the HTTPError received from ky has a generic message based on status\n    // use that if the JSON body does not include a message\n    error.message = errorBody.message || error.message;\n    error.data = errorBody;\n  }\n  throw error;\n}\n\n/*!\n * Copyright (c) 2020-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\nconst httpClient = createInstance();\n\nexports.DEFAULT_HEADERS = DEFAULT_HEADERS;\nexports.httpClient = httpClient;\nexports.kyPromise = kyOriginalPromise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/http-client/dist/cjs/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-io/lib/CachedResolver.js":
/*!******************************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-io/lib/CachedResolver.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CachedResolver: () => (/* binding */ CachedResolver)\n/* harmony export */ });\n/* harmony import */ var _did_io_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./did-io.js */ \"(ssr)/./node_modules/@digitalbazaar/did-io/lib/did-io.js\");\n/* harmony import */ var _digitalbazaar_lru_memoize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @digitalbazaar/lru-memoize */ \"(ssr)/./node_modules/@digitalbazaar/lru-memoize/lib/index.js\");\n/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\nclass CachedResolver {\n  /**\n   * @param {object} [options={}] - Options hashmap.\n   * @param {number} [options.max=100] - Max number of items in the cache.\n   * @param {number} [options.maxAge=5000] - Max age of a cache item, in ms.\n   * @param {boolean} [options.updateAgeOnGet=false] - When using time-expiring\n   *   entries with `maxAge`, setting this to true will make each entry's\n   *   effective time update to the current time whenever it is retrieved from\n   *   cache, thereby extending the expiration date of the entry.\n   * @param {object} [options.cacheOptions] - Additional `lru-cache` options.\n   */\n  constructor({max = 100, maxAge = 5000, updateAgeOnGet = false,\n    ...cacheOptions} = {}) {\n    this._cache = new _digitalbazaar_lru_memoize__WEBPACK_IMPORTED_MODULE_1__.LruCache({max, maxAge, updateAgeOnGet, ...cacheOptions});\n    this._methods = new Map();\n  }\n\n  use(driver) {\n    const methodName = driver.method;\n    this._methods.set(methodName, driver);\n  }\n\n  /**\n   * Gets the DID Document, by selecting a registered driver based on the DID\n   * prefix (DID method).\n   * Either `did` or `url` param is required.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} [options.did] - DID uri.\n   * @param {string} [options.url] - Typically, a key ID or other DID-related\n   *   url. This is used instead of 'did' to improve code readability.\n   * @param {object} [options.args] - Options passed through to the\n   *   driver's get() operation.\n   *\n   * @returns {Promise<object>} Resolves with fetched DID Document.\n   */\n  async get({did, url, ...args} = {}) {\n    did = did || url;\n    if(!did) {\n      throw new TypeError('A string \"did\" or \"url\" parameter is required.');\n    }\n\n    const method = this._methodForDid(did);\n\n    return this._cache.memoize({\n      key: did,\n      fn: () => method.get({did, ...args})\n    });\n  }\n\n  /**\n   * Generates a new DID Document and corresponding keys.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.method - DID method id (e.g. 'key', 'v1', 'web').\n   * @param {object} options.args - Options passed through to the DID driver.\n   *\n   * @returns {Promise<object>} Resolves with result of individual DID driver's\n   *   `generate()` method call.\n   */\n  async generate({method, ...args}) {\n    const driver = this._methods.get(method);\n    if(!driver) {\n      throw new Error(`Driver for DID method \"${method}\" not found.`);\n    }\n\n    return driver.generate(args);\n  }\n\n  /**\n   * @param {string} did - DID uri.\n   *\n   * @returns {object} - DID Method driver.\n   * @private\n   */\n  _methodForDid(did) {\n    const {prefix} = (0,_did_io_js__WEBPACK_IMPORTED_MODULE_0__.parseDid)({did});\n    const method = this._methods.get(prefix);\n    if(!method) {\n      throw new Error(`Driver for DID ${did} not found.`);\n    }\n    return method;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZGlkLWlvL2xpYi9DYWNoZWRSZXNvbHZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDcUM7QUFDZTs7QUFFN0M7QUFDUDtBQUNBLGFBQWEsUUFBUSxXQUFXO0FBQ2hDLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGVBQWU7QUFDZixxQkFBcUIsSUFBSTtBQUN6QixzQkFBc0IsZ0VBQVEsRUFBRSw2Q0FBNkM7QUFDN0U7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0EsYUFBYSxtQkFBbUIsSUFBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCLGFBQWE7QUFDekMsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBLGdEQUFnRCxPQUFPO0FBQ3ZEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRLEVBQUUsb0RBQVEsRUFBRSxJQUFJO0FBQ25DO0FBQ0E7QUFDQSx3Q0FBd0MsS0FBSztBQUM3QztBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9kaWQtaW8vbGliL0NhY2hlZFJlc29sdmVyLmpzPzlmN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuaW1wb3J0IHtwYXJzZURpZH0gZnJvbSAnLi9kaWQtaW8uanMnO1xuaW1wb3J0IHtMcnVDYWNoZX0gZnJvbSAnQGRpZ2l0YWxiYXphYXIvbHJ1LW1lbW9pemUnO1xuXG5leHBvcnQgY2xhc3MgQ2FjaGVkUmVzb2x2ZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgaGFzaG1hcC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heD0xMDBdIC0gTWF4IG51bWJlciBvZiBpdGVtcyBpbiB0aGUgY2FjaGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhBZ2U9NTAwMF0gLSBNYXggYWdlIG9mIGEgY2FjaGUgaXRlbSwgaW4gbXMuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudXBkYXRlQWdlT25HZXQ9ZmFsc2VdIC0gV2hlbiB1c2luZyB0aW1lLWV4cGlyaW5nXG4gICAqICAgZW50cmllcyB3aXRoIGBtYXhBZ2VgLCBzZXR0aW5nIHRoaXMgdG8gdHJ1ZSB3aWxsIG1ha2UgZWFjaCBlbnRyeSdzXG4gICAqICAgZWZmZWN0aXZlIHRpbWUgdXBkYXRlIHRvIHRoZSBjdXJyZW50IHRpbWUgd2hlbmV2ZXIgaXQgaXMgcmV0cmlldmVkIGZyb21cbiAgICogICBjYWNoZSwgdGhlcmVieSBleHRlbmRpbmcgdGhlIGV4cGlyYXRpb24gZGF0ZSBvZiB0aGUgZW50cnkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5jYWNoZU9wdGlvbnNdIC0gQWRkaXRpb25hbCBgbHJ1LWNhY2hlYCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioe21heCA9IDEwMCwgbWF4QWdlID0gNTAwMCwgdXBkYXRlQWdlT25HZXQgPSBmYWxzZSxcbiAgICAuLi5jYWNoZU9wdGlvbnN9ID0ge30pIHtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBMcnVDYWNoZSh7bWF4LCBtYXhBZ2UsIHVwZGF0ZUFnZU9uR2V0LCAuLi5jYWNoZU9wdGlvbnN9KTtcbiAgICB0aGlzLl9tZXRob2RzID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgdXNlKGRyaXZlcikge1xuICAgIGNvbnN0IG1ldGhvZE5hbWUgPSBkcml2ZXIubWV0aG9kO1xuICAgIHRoaXMuX21ldGhvZHMuc2V0KG1ldGhvZE5hbWUsIGRyaXZlcik7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgRElEIERvY3VtZW50LCBieSBzZWxlY3RpbmcgYSByZWdpc3RlcmVkIGRyaXZlciBiYXNlZCBvbiB0aGUgRElEXG4gICAqIHByZWZpeCAoRElEIG1ldGhvZCkuXG4gICAqIEVpdGhlciBgZGlkYCBvciBgdXJsYCBwYXJhbSBpcyByZXF1aXJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGhhc2htYXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kaWRdIC0gRElEIHVyaS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnVybF0gLSBUeXBpY2FsbHksIGEga2V5IElEIG9yIG90aGVyIERJRC1yZWxhdGVkXG4gICAqICAgdXJsLiBUaGlzIGlzIHVzZWQgaW5zdGVhZCBvZiAnZGlkJyB0byBpbXByb3ZlIGNvZGUgcmVhZGFiaWxpdHkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5hcmdzXSAtIE9wdGlvbnMgcGFzc2VkIHRocm91Z2ggdG8gdGhlXG4gICAqICAgZHJpdmVyJ3MgZ2V0KCkgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBSZXNvbHZlcyB3aXRoIGZldGNoZWQgRElEIERvY3VtZW50LlxuICAgKi9cbiAgYXN5bmMgZ2V0KHtkaWQsIHVybCwgLi4uYXJnc30gPSB7fSkge1xuICAgIGRpZCA9IGRpZCB8fCB1cmw7XG4gICAgaWYoIWRpZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBzdHJpbmcgXCJkaWRcIiBvciBcInVybFwiIHBhcmFtZXRlciBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSB0aGlzLl9tZXRob2RGb3JEaWQoZGlkKTtcblxuICAgIHJldHVybiB0aGlzLl9jYWNoZS5tZW1vaXplKHtcbiAgICAgIGtleTogZGlkLFxuICAgICAgZm46ICgpID0+IG1ldGhvZC5nZXQoe2RpZCwgLi4uYXJnc30pXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgbmV3IERJRCBEb2N1bWVudCBhbmQgY29ycmVzcG9uZGluZyBrZXlzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgaGFzaG1hcC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubWV0aG9kIC0gRElEIG1ldGhvZCBpZCAoZS5nLiAna2V5JywgJ3YxJywgJ3dlYicpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5hcmdzIC0gT3B0aW9ucyBwYXNzZWQgdGhyb3VnaCB0byB0aGUgRElEIGRyaXZlci5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gUmVzb2x2ZXMgd2l0aCByZXN1bHQgb2YgaW5kaXZpZHVhbCBESUQgZHJpdmVyJ3NcbiAgICogICBgZ2VuZXJhdGUoKWAgbWV0aG9kIGNhbGwuXG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZSh7bWV0aG9kLCAuLi5hcmdzfSkge1xuICAgIGNvbnN0IGRyaXZlciA9IHRoaXMuX21ldGhvZHMuZ2V0KG1ldGhvZCk7XG4gICAgaWYoIWRyaXZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEcml2ZXIgZm9yIERJRCBtZXRob2QgXCIke21ldGhvZH1cIiBub3QgZm91bmQuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRyaXZlci5nZW5lcmF0ZShhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGlkIC0gRElEIHVyaS5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gLSBESUQgTWV0aG9kIGRyaXZlci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tZXRob2RGb3JEaWQoZGlkKSB7XG4gICAgY29uc3Qge3ByZWZpeH0gPSBwYXJzZURpZCh7ZGlkfSk7XG4gICAgY29uc3QgbWV0aG9kID0gdGhpcy5fbWV0aG9kcy5nZXQocHJlZml4KTtcbiAgICBpZighbWV0aG9kKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYERyaXZlciBmb3IgRElEICR7ZGlkfSBub3QgZm91bmQuYCk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2Q7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-io/lib/CachedResolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-io/lib/constants.js":
/*!*************************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-io/lib/constants.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERIFICATION_RELATIONSHIPS: () => (/* binding */ VERIFICATION_RELATIONSHIPS)\n/* harmony export */ });\n/*!\n * Copyright (c) 2021 Digital Bazaar. All rights reserved.\n */\n/**\n * A verification relationship expresses the relationship between the DID\n * subject and a verification method (such as a cryptographic public key).\n * Different verification relationships enable the associated verification\n * methods to be used for different purposes.\n *\n * @see https://w3c.github.io/did-core/#verification-relationships\n * @type {Set<string>}\n */\nconst VERIFICATION_RELATIONSHIPS = new Set([\n  'assertionMethod',\n  'authentication',\n  'capabilityDelegation',\n  'capabilityInvocation',\n  'keyAgreement'\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZGlkLWlvL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZGlkLWlvL2xpYi9jb25zdGFudHMuanM/N2RkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMSBEaWdpdGFsIEJhemFhci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuLyoqXG4gKiBBIHZlcmlmaWNhdGlvbiByZWxhdGlvbnNoaXAgZXhwcmVzc2VzIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgRElEXG4gKiBzdWJqZWN0IGFuZCBhIHZlcmlmaWNhdGlvbiBtZXRob2QgKHN1Y2ggYXMgYSBjcnlwdG9ncmFwaGljIHB1YmxpYyBrZXkpLlxuICogRGlmZmVyZW50IHZlcmlmaWNhdGlvbiByZWxhdGlvbnNoaXBzIGVuYWJsZSB0aGUgYXNzb2NpYXRlZCB2ZXJpZmljYXRpb25cbiAqIG1ldGhvZHMgdG8gYmUgdXNlZCBmb3IgZGlmZmVyZW50IHB1cnBvc2VzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RpZC1jb3JlLyN2ZXJpZmljYXRpb24tcmVsYXRpb25zaGlwc1xuICogQHR5cGUge1NldDxzdHJpbmc+fVxuICovXG5leHBvcnQgY29uc3QgVkVSSUZJQ0FUSU9OX1JFTEFUSU9OU0hJUFMgPSBuZXcgU2V0KFtcbiAgJ2Fzc2VydGlvbk1ldGhvZCcsXG4gICdhdXRoZW50aWNhdGlvbicsXG4gICdjYXBhYmlsaXR5RGVsZWdhdGlvbicsXG4gICdjYXBhYmlsaXR5SW52b2NhdGlvbicsXG4gICdrZXlBZ3JlZW1lbnQnXG5dKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-io/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-io/lib/did-io.js":
/*!**********************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-io/lib/did-io.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _methodById: () => (/* binding */ _methodById),\n/* harmony export */   approvesMethodFor: () => (/* binding */ approvesMethodFor),\n/* harmony export */   findVerificationMethod: () => (/* binding */ findVerificationMethod),\n/* harmony export */   initKeys: () => (/* binding */ initKeys),\n/* harmony export */   parseDid: () => (/* binding */ parseDid)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@digitalbazaar/did-io/lib/constants.js\");\n/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n/**\n * Tests whether this DID Document contains a verification relationship\n * between the subject and a method id, for a given purpose.\n *\n * @example\n * didDocument.approvesMethodFor({\n *   methodId: 'did:ex:1234#abcd', purpose: 'authentication'\n * });\n * // -> true\n * @example\n * didDocument.approvesMethodFor({\n *   methodId: 'did:ex:1234#abcd', purpose: 'assertionMethod'\n * });\n * // -> false\n *\n * @param {object} options - Options hashmap.\n * @param {object} options.doc - DID Document.\n * @param {string} options.methodId - Verification method id (a uri).\n * @param {string} options.purpose - E.g. 'authentication', etc.\n *\n * @returns {boolean} Returns whether a method id is authorized for purpose.\n */\nfunction approvesMethodFor({doc, methodId, purpose}) {\n  if(!(methodId && purpose)) {\n    throw new Error('A method id and purpose is required.');\n  }\n  const method = _methodById({doc, methodId});\n  if(!method) {\n    return false;\n  }\n  const methods = doc[purpose] || [];\n  return !!methods.find(method => {\n    return (typeof method === 'string' && method === methodId) ||\n      (typeof method === 'object' && method.id === methodId);\n  });\n}\n\n/**\n * Initializes the DID Document's keys/proof methods.\n *\n * @example\n * didDocument.id = 'did:ex:123';\n * const {keyPairs} = await initKeys({\n *   cryptoLd,\n *   keyMap: {\n *     capabilityInvocation: someExistingKey,\n *     authentication: 'Ed25519VerificationKey2020',\n *     assertionMethod: 'Ed25519VerificationKey2020',\n *     keyAgreement: 'X25519KeyAgreementKey2019'\n *   }\n * });.\n *\n * @param {object} options - Options hashmap.\n * @param {object} options.doc - DID Document.\n * @typedef {object} CryptoLD\n * @param {CryptoLD} [options.cryptoLd] - CryptoLD driver instance,\n *   initialized with the key types this DID Document intends to support.\n * @param {object} [options.keyMap] - Map of keys (or key types) by purpose.\n *\n * @returns {Promise<{keyPairs: object}>} A hashmap of public/private key\n *   pairs, by key id.\n */\nasync function initKeys({doc, cryptoLd, keyMap = {}} = {}) {\n  if(!doc.id) {\n    throw new TypeError(\n      'DID Document \"id\" property is required to initialize keys.');\n  }\n\n  const keyPairs = {};\n\n  // Set the defaults for the created keys (if needed)\n  const options = {controller: doc.id};\n\n  for(const purpose in keyMap) {\n    if(!_constants_js__WEBPACK_IMPORTED_MODULE_0__.VERIFICATION_RELATIONSHIPS.has(purpose)) {\n      throw new Error(`Unsupported key purpose: \"${purpose}\".`);\n    }\n\n    let key;\n    if(typeof keyMap[purpose] === 'string') {\n      if(!cryptoLd) {\n        throw new Error('Please provide an initialized CryptoLD instance.');\n      }\n      key = await cryptoLd.generate({type: keyMap[purpose], ...options});\n    } else {\n      // An existing key has been provided\n      key = keyMap[purpose];\n    }\n\n    this[purpose] = [key.export({publicKey: true})];\n    keyPairs[key.id] = key;\n  }\n\n  return {keyPairs};\n}\n\n/**\n * Finds a verification method for a given methodId or purpose.\n *\n * If a method id is given, returns the object for that method (for example,\n * returns the public key definition for that id).\n *\n * If a purpose (verification relationship) is given, returns the first\n * available verification method for that purpose.\n *\n * If no method is found (for the given id or purpose), returns undefined.\n *\n * @example\n * findVerificationMethod({doc, methodId: 'did:ex:123#abcd'});\n * // ->\n * {\n *   id: 'did:ex:123#abcd',\n *   controller: 'did:ex:123',\n *   type: 'Ed25519VerificationKey2020',\n *   publicKeyMultibase: '...'\n * }\n * @example\n * didDocument.findVerificationMethod({doc, purpose: 'authentication'});\n * // ->\n * {\n *   id: 'did:ex:123#abcd',\n *   controller: 'did:ex:123',\n *   type: 'Ed25519VerificationKey2020',\n *   publicKeyMultibase: '...'\n * }\n * @param {object} options - Options hashmap.\n * @param {object} options.doc - DID Document.\n *\n * One of the following is required.\n * @param {string} [options.methodId] - Verification method id.\n * @param {string} [options.purpose] - Method purpose (verification\n *   relationship).\n *\n * @returns {object} Returns the verification method, or undefined if not found.\n */\nfunction findVerificationMethod({doc, methodId, purpose} = {}) {\n  if(!doc) {\n    throw new TypeError('A DID Document is required.');\n  }\n  if(!(methodId || purpose)) {\n    throw new TypeError('A method id or purpose is required.');\n  }\n\n  if(methodId) {\n    return _methodById({doc, methodId});\n  }\n\n  // Id not given, find the first method by purpose\n  const [method] = doc[purpose] || [];\n  if(method && typeof method === 'string') {\n    // This is a reference, not the full method, attempt to find it\n    return _methodById({doc, methodId: method});\n  }\n\n  return method;\n}\n\n/**\n * Finds a verification method for a given id and returns it.\n *\n * @param {object} options - Options hashmap.\n * @param {object} options.doc - DID Document.\n * @param {string} options.methodId - Verification method id.\n *\n * @returns {object} Returns the verification method.\n */\nfunction _methodById({doc, methodId}) {\n  let result;\n\n  // First, check the 'verificationMethod' bucket, see if it's listed there\n  if(doc.verificationMethod) {\n    result = doc.verificationMethod.find(method => method.id === methodId);\n  }\n\n  for(const purpose of _constants_js__WEBPACK_IMPORTED_MODULE_0__.VERIFICATION_RELATIONSHIPS) {\n    const methods = doc[purpose] || [];\n    // Iterate through each verification method in 'authentication', etc.\n    for(const method of methods) {\n      // Only return it if the method is defined, not referenced\n      if(typeof method === 'object' && method.id === methodId) {\n        result = method;\n        break;\n      }\n    }\n    if(result) {\n      return result;\n    }\n  }\n}\n\n/**\n * Parses the DID into various component (currently, only cares about prefix).\n *\n * @example\n * parseDid({did: 'did:v1:test:nym'});\n * // -> {prefix: 'v1'}\n *\n * @param {string} did - DID uri.\n *\n * @returns {{prefix: string}} Returns the method prefix (without `did:`).\n */\nfunction parseDid({did}) {\n  if(!did) {\n    throw new TypeError('DID cannot be empty.');\n  }\n\n  const prefix = did.split(':').slice(1, 2).join(':');\n\n  return {prefix};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-io/lib/did-io.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-io/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-io/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CachedResolver: () => (/* reexport safe */ _CachedResolver_js__WEBPACK_IMPORTED_MODULE_1__.CachedResolver),\n/* harmony export */   VERIFICATION_RELATIONSHIPS: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_2__.VERIFICATION_RELATIONSHIPS),\n/* harmony export */   approvesMethodFor: () => (/* reexport safe */ _did_io_js__WEBPACK_IMPORTED_MODULE_0__.approvesMethodFor),\n/* harmony export */   findVerificationMethod: () => (/* reexport safe */ _did_io_js__WEBPACK_IMPORTED_MODULE_0__.findVerificationMethod),\n/* harmony export */   initKeys: () => (/* reexport safe */ _did_io_js__WEBPACK_IMPORTED_MODULE_0__.initKeys),\n/* harmony export */   parseDid: () => (/* reexport safe */ _did_io_js__WEBPACK_IMPORTED_MODULE_0__.parseDid)\n/* harmony export */ });\n/* harmony import */ var _did_io_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./did-io.js */ \"(ssr)/./node_modules/@digitalbazaar/did-io/lib/did-io.js\");\n/* harmony import */ var _CachedResolver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CachedResolver.js */ \"(ssr)/./node_modules/@digitalbazaar/did-io/lib/CachedResolver.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@digitalbazaar/did-io/lib/constants.js\");\n/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZGlkLWlvL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFNcUI7O0FBRThCOztBQUVPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL2RpZC1pby9saWIvaW5kZXguanM/ZjYyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMSBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5leHBvcnQge1xuICBhcHByb3Zlc01ldGhvZEZvcixcbiAgZmluZFZlcmlmaWNhdGlvbk1ldGhvZCxcbiAgaW5pdEtleXMsXG4gIHBhcnNlRGlkXG59IGZyb20gJy4vZGlkLWlvLmpzJztcblxuZXhwb3J0IHtDYWNoZWRSZXNvbHZlcn0gZnJvbSAnLi9DYWNoZWRSZXNvbHZlci5qcyc7XG5cbmV4cG9ydCB7VkVSSUZJQ0FUSU9OX1JFTEFUSU9OU0hJUFN9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-io/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/DidKeyDriver.js":
/*!************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-method-key/lib/DidKeyDriver.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DidKeyDriver: () => (/* binding */ DidKeyDriver)\n/* harmony export */ });\n/* harmony import */ var _digitalbazaar_did_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @digitalbazaar/did-io */ \"(ssr)/./node_modules/@digitalbazaar/did-io/lib/index.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/helpers.js\");\n/*!\n * Copyright (c) 2021-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\nconst DID_CONTEXT_URL = 'https://www.w3.org/ns/did/v1';\n\nclass DidKeyDriver {\n  constructor() {\n    // used by did-io to register drivers\n    this.method = 'key';\n    this._allowedKeyTypes = new Map();\n  }\n\n  /**\n   * Registers a multibase-multikey header and a multibase-multikey\n   * deserializer that is allowed to handle data using that header.\n   *\n   * @param {object} options - Options hashmap.\n   *\n   * @param {string} options.multibaseMultikeyHeader - The multibase-multikey\n   *   header to register.\n   * @param {Function} options.fromMultibase - A function that converts a\n   *  `{publicKeyMultibase}` value into a key pair interface.\n   */\n  use({multibaseMultikeyHeader, fromMultibase} = {}) {\n    if(!(multibaseMultikeyHeader &&\n      typeof multibaseMultikeyHeader === 'string')) {\n      throw new TypeError('\"multibaseMultikeyHeader\" must be a string.');\n    }\n    if(typeof fromMultibase !== 'function') {\n      throw new TypeError('\"fromMultibase\" must be a function.');\n    }\n    this._allowedKeyTypes.set(multibaseMultikeyHeader, fromMultibase);\n  }\n\n  /**\n   * Generates a DID `key` (`did:key`) method DID Document from a KeyPair.\n   *\n   * @param {object} options - Options hashmap.\n   *\n   * @param {object} [options.verificationKeyPair] - A verification KeyPair.\n   * @param {object} [options.keyAgreementKeyPair] - A keyAgreement KeyPair.\n   *\n   * @returns {Promise<{didDocument: object, keyPairs: Map,\n   *   methodFor: Function}>} Resolves with the generated DID Document, along\n   *   with the corresponding key pairs used to generate it (for storage in a\n   *   KMS).\n   */\n  async fromKeyPair({verificationKeyPair, keyAgreementKeyPair} = {}) {\n    if(!(verificationKeyPair || keyAgreementKeyPair)) {\n      throw new TypeError(\n        '\"verificationKeyPair\" or \"keyAgreementKeyPair\" must be an object.');\n    }\n    // keyPairs is a map of keyId to key pair instance, that includes the\n    // verificationKeyPair above and the keyAgreementKey pair that is\n    // optionally passed or derived from the passed verification key pair\n    const {didDocument, keyPairs} = await this._keyPairToDidDocument(\n      {keyPair: verificationKeyPair, keyAgreementKeyPair});\n\n    // convenience function that returns the public/private key pair instance\n    // for a given purpose (authentication, assertionMethod, keyAgreement, etc).\n    const methodFor = ({purpose}) => {\n      const {id: methodId} = this.publicMethodFor({\n        didDocument, purpose\n      });\n      return keyPairs.get(methodId);\n    };\n    return {didDocument, keyPairs, methodFor};\n  }\n\n  /**\n   * Returns the public key (verification method) object for a given DID\n   * Document and purpose. Useful in conjunction with a `.get()` call.\n   *\n   * @example\n   * const didDocument = await didKeyDriver.get({did});\n   * const authKeyData = didDriver.publicMethodFor({\n   *   didDocument, purpose: 'authentication'\n   * });\n   * // You can then create a suite instance object to verify signatures etc.\n   * const authPublicKey = await cryptoLd.from(authKeyData);\n   * const {verify} = authPublicKey.verifier();\n   *\n   * @param {object} options - Options hashmap.\n   * @param {object} options.didDocument - DID Document (retrieved via a\n   *   `.get()` or from some other source).\n   * @param {string} options.purpose - Verification method purpose, such as\n   *   'authentication', 'assertionMethod', 'keyAgreement' and so on.\n   *\n   * @returns {object} Returns the public key object (obtained from the DID\n   *   Document), without a `@context`.\n   */\n  publicMethodFor({didDocument, purpose} = {}) {\n    if(!didDocument) {\n      throw new TypeError('The \"didDocument\" parameter is required.');\n    }\n    if(!purpose) {\n      throw new TypeError('The \"purpose\" parameter is required.');\n    }\n\n    const method = _digitalbazaar_did_io__WEBPACK_IMPORTED_MODULE_0__.findVerificationMethod({doc: didDocument, purpose});\n    if(!method) {\n      throw new Error(`No verification method found for purpose \"${purpose}\"`);\n    }\n    return method;\n  }\n\n  /**\n   * Returns a `did:key` method DID Document for a given DID, or a key document\n   * for a given DID URL (key id).\n   * Either a `did` or `url` param is required.\n   *\n   * @example\n   * await resolver.get({did}); // -> did document\n   * await resolver.get({url: keyId}); // -> public key node\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} [options.did] - DID URL or a key id (either an ed25519 key\n   *   or an x25519 key-agreement key id).\n   * @param {string} [options.url] - Alias for the `did` url param, supported\n   *   for better readability of invoking code.\n   *\n   * @returns {Promise<object>} Resolves to a DID Document or a\n   *   public key node with context.\n   */\n  async get({did, url} = {}) {\n    did = did || url;\n    if(!did) {\n      throw new TypeError('\"did\" must be a string.');\n    }\n    const [didAuthority, keyIdFragment] = did.split('#');\n    const publicKeyMultibase = didAuthority.substring('did:key:'.length);\n    // get the multikey header from the public key value\n    const multibaseMultikeyHeader = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getMultibaseMultikeyHeader)({\n      value: publicKeyMultibase\n    });\n\n    const fromMultibase =\n      this._allowedKeyTypes.get(multibaseMultikeyHeader);\n    if(!fromMultibase) {\n      throw new Error(\n        `Unsupported \"multibaseMultikeyHeader\", \"${multibaseMultikeyHeader}\".`);\n    }\n    const {keyAgreementKeyPair, keyPair} = await (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getKeyPair)({\n      fromMultibase, publicKeyMultibase\n    });\n    const {didDocument} = await this._keyPairToDidDocument({\n      keyPair, keyAgreementKeyPair\n    });\n\n    if(keyIdFragment) {\n      // resolve an individual key\n      return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getKey)({didDocument, keyIdFragment});\n    }\n    // Resolve the full DID Document\n    return didDocument;\n  }\n\n  /**\n   * Converts a public key object to a `did:key` method DID Document.\n   * Note that unlike `generate()`, a `keyPairs` map is not returned. Use\n   * `publicMethodFor()` to fetch keys for particular proof purposes.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {object} options.publicKeyDescription - Public key object\n   *   used to generate the DID document (either an LDKeyPair instance\n   *   containing public key material, or a \"key description\" plain object\n   *   (such as that generated from a KMS)).\n   *\n   * @returns {Promise<object>} Resolves with the generated DID Document.\n   */\n  async publicKeyToDidDoc({publicKeyDescription} = {}) {\n    const {\n      keyPair, keyAgreementKeyPair\n    } = await (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getKeyPair)({publicKeyDescription});\n    const {didDocument} = await this._keyPairToDidDocument({\n      keyPair, keyAgreementKeyPair\n    });\n    return {didDocument};\n  }\n\n  /**\n   * Converts an Ed25519KeyPair object to a `did:key` method DID Document.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {object} options.keyPair - Key used to generate the DID\n   *   document (either an LDKeyPair instance containing public key material,\n   *   or a \"key description\" plain object (such as that generated from a KMS)).\n   * @param {object} [options.keyAgreementKeyPair] -  Optional\n   *   keyAgreement key pair for generating did for keyAgreement.\n   * @returns {Promise<{didDocument: object, keyPairs: Map}>}\n   *   Resolves with the generated DID Document, along with the corresponding\n   *   key pairs used to generate it (for storage in a KMS).\n   */\n  async _keyPairToDidDocument({keyPair, keyAgreementKeyPair} = {}) {\n    const keyPairs = new Map();\n    let didDocument;\n    let publicDhKey;\n    const contexts = [DID_CONTEXT_URL];\n    if(!keyPair && keyAgreementKeyPair) {\n      (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.addKeyAgreementKeyContext)({contexts, keyAgreementKeyPair});\n      const did = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getDid)({keyPair: keyAgreementKeyPair});\n      keyAgreementKeyPair.controller = did;\n      (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.setKeyPairId)({keyPair: keyAgreementKeyPair, did});\n      publicDhKey = await keyAgreementKeyPair.export({publicKey: true});\n      keyPairs.set(keyAgreementKeyPair.id, keyAgreementKeyPair);\n      didDocument = {\n        '@context': contexts,\n        id: did,\n        keyAgreement: [publicDhKey]\n      };\n      return {didDocument, keyPairs};\n    }\n    let {publicKeyMultibase} = keyPair;\n    if(!publicKeyMultibase && keyPair.publicKeyBase58) {\n      // handle backwards compatibility w/older key pair interfaces\n      publicKeyMultibase = await keyPair.fingerprint();\n    }\n    // get the multibaseMultikeyHeader from the public key value\n    const multibaseMultikeyHeader = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getMultibaseMultikeyHeader)({\n      value: publicKeyMultibase\n    });\n    const fromMultibase = this._allowedKeyTypes.get(multibaseMultikeyHeader);\n    if(!fromMultibase) {\n      throw new Error(\n        `Unsupported \"multibaseMultikeyHeader\", \"${multibaseMultikeyHeader}\".`);\n    }\n    const verificationKeyPair = await fromMultibase({publicKeyMultibase});\n\n    const did = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getDid)({keyPair: verificationKeyPair});\n    verificationKeyPair.controller = did;\n    // Now set the source key's id\n    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.setKeyPairId)({keyPair: verificationKeyPair, did});\n    // get the public components of verification keypair\n    const verificationPublicKey = await verificationKeyPair.export({\n      publicKey: true,\n      includeContext: true\n    });\n    contexts.push(verificationPublicKey['@context']);\n    // delete context from verificationPublicKey\n    delete verificationPublicKey['@context'];\n    // get the keyAgreement keypair\n    if(!keyAgreementKeyPair) {\n      ({keyAgreementKeyPair} = await (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getKeyAgreementKeyPair)({\n        contexts, verificationPublicKey\n      }));\n    }\n\n    // get the public components of keyAgreement keypair\n    if(keyAgreementKeyPair) {\n      (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.addKeyAgreementKeyContext)({contexts, keyAgreementKeyPair});\n      const did = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getDid)({keyPair: keyAgreementKeyPair});\n      if(!keyAgreementKeyPair.controller) {\n        keyAgreementKeyPair.controller = did;\n      }\n      if(!keyAgreementKeyPair.id) {\n        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.setKeyPairId)({keyPair: keyAgreementKeyPair, did});\n      }\n      publicDhKey = await keyAgreementKeyPair.export({publicKey: true});\n    }\n\n    // Compose the DID Document\n    didDocument = {\n      // Note that did:key does not have its own method-specific context,\n      // and only uses the general DID Core context, and key-specific contexts.\n      '@context': contexts,\n      id: did,\n      verificationMethod: [verificationPublicKey],\n      authentication: [verificationPublicKey.id],\n      assertionMethod: [verificationPublicKey.id],\n      capabilityDelegation: [verificationPublicKey.id],\n      capabilityInvocation: [verificationPublicKey.id],\n    };\n    if(publicDhKey) {\n      didDocument.keyAgreement = [publicDhKey];\n    }\n    // create the key pairs map\n    keyPairs.set(verificationKeyPair.id, verificationKeyPair);\n    if(keyAgreementKeyPair) {\n      keyPairs.set(keyAgreementKeyPair.id, keyAgreementKeyPair);\n    }\n\n    return {didDocument, keyPairs};\n  }\n\n  /**\n   * Computes and returns the id of a given key pair. Used by `did-io` drivers.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {object} options.keyPair - The key pair used when computing the\n   *   identifier.\n   *\n   * @returns {string} Returns the key's id.\n   */\n  async computeId({keyPair}) {\n    return `did:key:${keyPair.fingerprint()}#${keyPair.fingerprint()}`;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/DidKeyDriver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/helpers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-method-key/lib/helpers.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addKeyAgreementKeyContext: () => (/* binding */ addKeyAgreementKeyContext),\n/* harmony export */   getDid: () => (/* binding */ getDid),\n/* harmony export */   getKey: () => (/* binding */ getKey),\n/* harmony export */   getKeyAgreementKeyPair: () => (/* binding */ getKeyAgreementKeyPair),\n/* harmony export */   getKeyPair: () => (/* binding */ getKeyPair),\n/* harmony export */   getMultibaseMultikeyHeader: () => (/* binding */ getMultibaseMultikeyHeader),\n/* harmony export */   setKeyPairId: () => (/* binding */ setKeyPairId)\n/* harmony export */ });\n/* harmony import */ var _digitalbazaar_x25519_key_agreement_key_2019__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @digitalbazaar/x25519-key-agreement-key-2019 */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/index.js\");\n/* harmony import */ var _digitalbazaar_x25519_key_agreement_key_2020__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @digitalbazaar/x25519-key-agreement-key-2020 */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/index.js\");\n/*!\n * Copyright (c) 2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\nconst ED25519_KEY_2018_CONTEXT_URL =\n  'https://w3id.org/security/suites/ed25519-2018/v1';\nconst ED25519_KEY_2020_CONTEXT_URL =\n  'https://w3id.org/security/suites/ed25519-2020/v1';\nconst MULTIKEY_CONTEXT_V1_URL = 'https://w3id.org/security/multikey/v1';\n\nconst contextsBySuite = new Map([\n  ['Ed25519VerificationKey2020', ED25519_KEY_2020_CONTEXT_URL],\n  ['Ed25519VerificationKey2018', ED25519_KEY_2018_CONTEXT_URL],\n  ['Multikey', MULTIKEY_CONTEXT_V1_URL],\n  [_digitalbazaar_x25519_key_agreement_key_2020__WEBPACK_IMPORTED_MODULE_1__.X25519KeyAgreementKey2020.suite, _digitalbazaar_x25519_key_agreement_key_2020__WEBPACK_IMPORTED_MODULE_1__.X25519KeyAgreementKey2020.SUITE_CONTEXT],\n  [_digitalbazaar_x25519_key_agreement_key_2019__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2019.suite, _digitalbazaar_x25519_key_agreement_key_2019__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2019.SUITE_CONTEXT]\n]);\n\n/**\n * Returns the public key object for a given key id fragment.\n *\n * @param {object} options - Options hashmap.\n * @param {object} options.didDocument - The DID Document to use when generating\n *   the id.\n * @param {string} options.keyIdFragment - The key identifier fragment.\n *\n * @returns {object} Returns the public key node, with `@context`.\n */\nfunction getKey({didDocument, keyIdFragment}) {\n  // Determine if the key id fragment belongs to the \"main\" public key,\n  // or the keyAgreement key\n  const keyId = didDocument.id + '#' + keyIdFragment;\n  let publicKey;\n  if(didDocument.verificationMethod?.[0].id === keyId) {\n    // Return the public key node for the main public key\n    publicKey = didDocument.verificationMethod[0];\n  } else {\n    // Return the public key node for the X25519 key-agreement key\n    publicKey = didDocument.keyAgreement[0];\n  }\n\n  return {\n    '@context': contextsBySuite.get(publicKey.type),\n    ...publicKey\n  };\n}\n\nfunction getDid({keyPair}) {\n  return keyPair.fingerprint ? `did:key:${keyPair.fingerprint()}` :\n    `did:key:${keyPair.publicKeyMultibase}`;\n}\n\nfunction setKeyPairId({keyPair, did}) {\n  keyPair.id = keyPair.fingerprint ? `${did}#${keyPair.fingerprint()}` :\n    `${did}#${keyPair.publicKeyMultibase}`;\n}\n\nfunction getKeyAgreementKeyPair({contexts, verificationPublicKey}) {\n  // The KAK pair will use the source key's controller, but may generate\n  // its own .id\n  let keyAgreementKeyPair;\n\n  switch(verificationPublicKey.type) {\n    case 'Ed25519VerificationKey2018': {\n      keyAgreementKeyPair = _digitalbazaar_x25519_key_agreement_key_2019__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2019\n        .fromEd25519VerificationKey2018({keyPair: verificationPublicKey});\n      contexts.push(_digitalbazaar_x25519_key_agreement_key_2019__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2019.SUITE_CONTEXT);\n      break;\n    }\n    case 'Ed25519VerificationKey2020': {\n      keyAgreementKeyPair = _digitalbazaar_x25519_key_agreement_key_2020__WEBPACK_IMPORTED_MODULE_1__.X25519KeyAgreementKey2020\n        .fromEd25519VerificationKey2020({keyPair: verificationPublicKey});\n      contexts.push(_digitalbazaar_x25519_key_agreement_key_2020__WEBPACK_IMPORTED_MODULE_1__.X25519KeyAgreementKey2020.SUITE_CONTEXT);\n      break;\n    }\n    case 'Multikey': {\n      // FIXME: Add keyAgreementKeyPair interface for Multikey.\n      break;\n    }\n    default: {\n      throw new Error(\n        `Cannot derive key agreement key from verification key type\n          \"${verificationPublicKey.type}\".`);\n    }\n  }\n  return {keyAgreementKeyPair};\n}\n\nfunction getMultibaseMultikeyHeader({value}) {\n  if(!value) {\n    throw new TypeError('\"publicKeyMultibase\" must be a string.');\n  }\n  return value.slice(0, 4);\n}\n\nfunction addKeyAgreementKeyContext({contexts, keyAgreementKeyPair}) {\n  const {type} = keyAgreementKeyPair;\n  switch(type) {\n    case 'X25519KeyAgreementKey2019': {\n      if(!contexts.includes(_digitalbazaar_x25519_key_agreement_key_2019__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2019.SUITE_CONTEXT)) {\n        contexts.push(_digitalbazaar_x25519_key_agreement_key_2019__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2019.SUITE_CONTEXT);\n      }\n      break;\n    }\n    case 'X25519KeyAgreementKey2020': {\n      if(!contexts.includes(_digitalbazaar_x25519_key_agreement_key_2020__WEBPACK_IMPORTED_MODULE_1__.X25519KeyAgreementKey2020.SUITE_CONTEXT)) {\n        contexts.push(_digitalbazaar_x25519_key_agreement_key_2020__WEBPACK_IMPORTED_MODULE_1__.X25519KeyAgreementKey2020.SUITE_CONTEXT);\n      }\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported key agreement key type, \"${type}\".`);\n    }\n  }\n}\n\nasync function getKeyPair({\n  fromMultibase, publicKeyMultibase, publicKeyDescription\n} = {}) {\n  let keyPair;\n  if(fromMultibase && publicKeyMultibase) {\n    keyPair = await fromMultibase({publicKeyMultibase});\n  } else {\n    keyPair = publicKeyDescription;\n  }\n  const {type} = keyPair;\n  let keyAgreementKeyPair;\n  if(type === 'X25519KeyAgreementKey2020' ||\n    type === 'X25519KeyAgreementKey2019') {\n    keyAgreementKeyPair = keyPair;\n    keyPair = null;\n  }\n  return {keyPair, keyAgreementKeyPair};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-method-key/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DidKeyDriver: () => (/* reexport safe */ _DidKeyDriver_js__WEBPACK_IMPORTED_MODULE_1__.DidKeyDriver),\n/* harmony export */   createFromMultibase: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_0__.createFromMultibase),\n/* harmony export */   driver: () => (/* binding */ driver)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/util.js\");\n/* harmony import */ var _DidKeyDriver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DidKeyDriver.js */ \"(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/DidKeyDriver.js\");\n/*!\n * Copyright (c) 2021-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n/**\n * Helper method to match the `.driver()` API of other `did-io` plugins.\n *\n * @returns {DidKeyDriver} Returns an instance of a did:key resolver driver.\n */\nfunction driver() {\n  return new _DidKeyDriver_js__WEBPACK_IMPORTED_MODULE_1__.DidKeyDriver();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZGlkLW1ldGhvZC1rZXkvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzhDO0FBQ0M7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0EsYUFBYSwwREFBWTtBQUN6Qjs7QUFFbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZGlkLW1ldGhvZC1rZXkvbGliL2luZGV4LmpzP2UyMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEtMjAyMyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5pbXBvcnQge2NyZWF0ZUZyb21NdWx0aWJhc2V9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQge0RpZEtleURyaXZlcn0gZnJvbSAnLi9EaWRLZXlEcml2ZXIuanMnO1xuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gbWF0Y2ggdGhlIGAuZHJpdmVyKClgIEFQSSBvZiBvdGhlciBgZGlkLWlvYCBwbHVnaW5zLlxuICpcbiAqIEByZXR1cm5zIHtEaWRLZXlEcml2ZXJ9IFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYSBkaWQ6a2V5IHJlc29sdmVyIGRyaXZlci5cbiAqL1xuZnVuY3Rpb24gZHJpdmVyKCkge1xuICByZXR1cm4gbmV3IERpZEtleURyaXZlcigpO1xufVxuXG5leHBvcnQge2NyZWF0ZUZyb21NdWx0aWJhc2UsIGRyaXZlciwgRGlkS2V5RHJpdmVyfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@digitalbazaar/did-method-key/lib/util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFromMultibase: () => (/* binding */ createFromMultibase)\n/* harmony export */ });\n/*!\n * Copyright (c) 2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * A utility function to create a multibase-multikey deserializer function.\n *\n * @param {object} options - Options hashmap.\n * @param {Function} options.fromFingerprint - A method that creates a KeyPair\n *   from a key fingerprint.\n *\n * @returns {Function} - Multibase-multikey deserializer.\n */\nfunction createFromMultibase({fromFingerprint}) {\n  return async function fromMultibase({publicKeyMultibase}) {\n    return fromFingerprint({fingerprint: publicKeyMultibase});\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZGlkLW1ldGhvZC1rZXkvbGliL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDTyw4QkFBOEIsZ0JBQWdCO0FBQ3JELHVDQUF1QyxtQkFBbUI7QUFDMUQsNEJBQTRCLGdDQUFnQztBQUM1RDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL2RpZC1tZXRob2Qta2V5L2xpYi91dGlsLmpzPzMwMDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjMgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG4vKipcbiAqIEEgdXRpbGl0eSBmdW5jdGlvbiB0byBjcmVhdGUgYSBtdWx0aWJhc2UtbXVsdGlrZXkgZGVzZXJpYWxpemVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBoYXNobWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5mcm9tRmluZ2VycHJpbnQgLSBBIG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBLZXlQYWlyXG4gKiAgIGZyb20gYSBrZXkgZmluZ2VycHJpbnQuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIE11bHRpYmFzZS1tdWx0aWtleSBkZXNlcmlhbGl6ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGcm9tTXVsdGliYXNlKHtmcm9tRmluZ2VycHJpbnR9KSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiBmcm9tTXVsdGliYXNlKHtwdWJsaWNLZXlNdWx0aWJhc2V9KSB7XG4gICAgcmV0dXJuIGZyb21GaW5nZXJwcmludCh7ZmluZ2VycHJpbnQ6IHB1YmxpY0tleU11bHRpYmFzZX0pO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/did-method-key/lib/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/constants.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/constants.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ED25519_SIGNATURE_2018_V1_URL: () => (/* binding */ ED25519_SIGNATURE_2018_V1_URL),\n/* harmony export */   ED25519_SIGNATURE_2020_V1_URL: () => (/* binding */ ED25519_SIGNATURE_2020_V1_URL),\n/* harmony export */   MULTIBASE_BASE58BTC_HEADER: () => (/* binding */ MULTIBASE_BASE58BTC_HEADER),\n/* harmony export */   MULTICODEC_PRIV_HEADER: () => (/* binding */ MULTICODEC_PRIV_HEADER),\n/* harmony export */   MULTICODEC_PUB_HEADER: () => (/* binding */ MULTICODEC_PUB_HEADER),\n/* harmony export */   MULTIKEY_CONTEXT_V1_URL: () => (/* binding */ MULTIKEY_CONTEXT_V1_URL),\n/* harmony export */   PUBLIC_KEY_SIZE: () => (/* binding */ PUBLIC_KEY_SIZE),\n/* harmony export */   SECRET_KEY_SIZE: () => (/* binding */ SECRET_KEY_SIZE)\n/* harmony export */ });\n/*!\n * Copyright (c) 2022-2024 Digital Bazaar, Inc. All rights reserved.\n */\n\n// Ed25519 Signature 2018 Context v1 URL\nconst ED25519_SIGNATURE_2018_V1_URL =\n  'https://w3id.org/security/suites/ed25519-2018/v1';\n// Ed25519 Signature 2020 Context v1 URL\nconst ED25519_SIGNATURE_2020_V1_URL =\n  'https://w3id.org/security/suites/ed25519-2020/v1';\n// multibase base58-btc header\nconst MULTIBASE_BASE58BTC_HEADER = 'z';\n// multicodec ed25519-pub header as varint\nconst MULTICODEC_PUB_HEADER = new Uint8Array([0xed, 0x01]);\n// multicodec ed25519-priv header as varint\nconst MULTICODEC_PRIV_HEADER = new Uint8Array([0x80, 0x26]);\n// multikey context v1 url\nconst MULTIKEY_CONTEXT_V1_URL = 'https://w3id.org/security/multikey/v1';\n// Ed25519 public key size in bytes\nconst PUBLIC_KEY_SIZE = 32;\n// Ed25519 secret key size in bytes\nconst SECRET_KEY_SIZE = 32;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1tdWx0aWtleS9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9lZDI1NTE5LW11bHRpa2V5L2xpYi9jb25zdGFudHMuanM/NGJmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMi0yMDI0IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuLy8gRWQyNTUxOSBTaWduYXR1cmUgMjAxOCBDb250ZXh0IHYxIFVSTFxuZXhwb3J0IGNvbnN0IEVEMjU1MTlfU0lHTkFUVVJFXzIwMThfVjFfVVJMID1cbiAgJ2h0dHBzOi8vdzNpZC5vcmcvc2VjdXJpdHkvc3VpdGVzL2VkMjU1MTktMjAxOC92MSc7XG4vLyBFZDI1NTE5IFNpZ25hdHVyZSAyMDIwIENvbnRleHQgdjEgVVJMXG5leHBvcnQgY29uc3QgRUQyNTUxOV9TSUdOQVRVUkVfMjAyMF9WMV9VUkwgPVxuICAnaHR0cHM6Ly93M2lkLm9yZy9zZWN1cml0eS9zdWl0ZXMvZWQyNTUxOS0yMDIwL3YxJztcbi8vIG11bHRpYmFzZSBiYXNlNTgtYnRjIGhlYWRlclxuZXhwb3J0IGNvbnN0IE1VTFRJQkFTRV9CQVNFNThCVENfSEVBREVSID0gJ3onO1xuLy8gbXVsdGljb2RlYyBlZDI1NTE5LXB1YiBoZWFkZXIgYXMgdmFyaW50XG5leHBvcnQgY29uc3QgTVVMVElDT0RFQ19QVUJfSEVBREVSID0gbmV3IFVpbnQ4QXJyYXkoWzB4ZWQsIDB4MDFdKTtcbi8vIG11bHRpY29kZWMgZWQyNTUxOS1wcml2IGhlYWRlciBhcyB2YXJpbnRcbmV4cG9ydCBjb25zdCBNVUxUSUNPREVDX1BSSVZfSEVBREVSID0gbmV3IFVpbnQ4QXJyYXkoWzB4ODAsIDB4MjZdKTtcbi8vIG11bHRpa2V5IGNvbnRleHQgdjEgdXJsXG5leHBvcnQgY29uc3QgTVVMVElLRVlfQ09OVEVYVF9WMV9VUkwgPSAnaHR0cHM6Ly93M2lkLm9yZy9zZWN1cml0eS9tdWx0aWtleS92MSc7XG4vLyBFZDI1NTE5IHB1YmxpYyBrZXkgc2l6ZSBpbiBieXRlc1xuZXhwb3J0IGNvbnN0IFBVQkxJQ19LRVlfU0laRSA9IDMyO1xuLy8gRWQyNTUxOSBzZWNyZXQga2V5IHNpemUgaW4gYnl0ZXNcbmV4cG9ydCBjb25zdCBTRUNSRVRfS0VZX1NJWkUgPSAzMjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/ed25519.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/ed25519.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   generateKeyPairFromSeed: () => (/* binding */ generateKeyPairFromSeed),\n/* harmony export */   sha256digest: () => (/* binding */ sha256digest),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validators.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/validators.js\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:util */ \"node:util\");\n/*!\n * Copyright (c) 2020-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\nconst randomBytesAsync = (0,node_util__WEBPACK_IMPORTED_MODULE_2__.promisify)(node_crypto__WEBPACK_IMPORTED_MODULE_1__.randomBytes);\n\n// used to export node's public keys to buffers\nconst publicKeyEncoding = {format: 'der', type: 'spki'};\n// used to turn secret key bytes into a buffer in DER format\nconst DER_PRIVATE_KEY_PREFIX = Buffer.from(\n  '302e020100300506032b657004220420', 'hex');\n// used to turn public key bytes into a buffer in DER format\nconst DER_PUBLIC_KEY_PREFIX = Buffer.from('302a300506032b6570032100', 'hex');\n\n/**\n * Generates a key using a 32 byte Uint8Array.\n *\n * @param {Uint8Array} seedBytes - The bytes for the secret key.\n *\n * @returns {object} The object with the public and secret key material.\n*/\nasync function generateKeyPairFromSeed(seedBytes) {\n  const secretKey = await node_crypto__WEBPACK_IMPORTED_MODULE_1__.createPrivateKey({\n    // node is more than happy to create a new secret key using a DER\n    key: _secretKeyDerEncode({seedBytes}),\n    format: 'der',\n    type: 'pkcs8'\n  });\n  // this expects either a PEM encoded key or a node secretKeyObject\n  const publicKey = await node_crypto__WEBPACK_IMPORTED_MODULE_1__.createPublicKey(secretKey);\n  const publicKeyBuffer = publicKey.export(publicKeyEncoding);\n  const publicKeyBytes = _getKeyMaterial(publicKeyBuffer);\n  return {\n    publicKey: publicKeyBytes,\n    secretKey: Buffer.concat([seedBytes, publicKeyBytes])\n  };\n}\n\n// generates an ed25519 key using a random seed\nasync function generateKeyPair() {\n  const seed = await randomBytesAsync(32);\n  return generateKeyPairFromSeed(seed);\n}\n\nasync function sign(secretKeyBytes, data) {\n  const secretKey = await node_crypto__WEBPACK_IMPORTED_MODULE_1__.createPrivateKey({\n    key: _secretKeyDerEncode({secretKeyBytes}),\n    format: 'der',\n    type: 'pkcs8'\n  });\n  return node_crypto__WEBPACK_IMPORTED_MODULE_1__.sign(null, data, secretKey);\n}\n\nasync function verify(publicKeyBytes, data, signature) {\n  const publicKey = await node_crypto__WEBPACK_IMPORTED_MODULE_1__.createPublicKey({\n    key: _publicKeyDerEncode({publicKeyBytes}),\n    format: 'der',\n    type: 'spki'\n  });\n  return node_crypto__WEBPACK_IMPORTED_MODULE_1__.verify(null, data, publicKey, signature);\n}\n\nasync function sha256digest({data}) {\n  return node_crypto__WEBPACK_IMPORTED_MODULE_1__.createHash('sha256').update(data).digest();\n}\n\n/**\n * The key material is the part of the buffer after the DER Prefix.\n *\n * @param {Buffer} buffer - A DER encoded key buffer.\n *\n * @throws {Error} If the buffer does not contain a valid DER Prefix.\n *\n * @returns {Buffer} The key material part of the Buffer.\n*/\nfunction _getKeyMaterial(buffer) {\n  if(buffer.indexOf(DER_PUBLIC_KEY_PREFIX) === 0) {\n    return buffer.slice(DER_PUBLIC_KEY_PREFIX.length, buffer.length);\n  }\n  if(buffer.indexOf(DER_PRIVATE_KEY_PREFIX) === 0) {\n    return buffer.slice(DER_PRIVATE_KEY_PREFIX.length, buffer.length);\n  }\n  throw new Error('Expected Buffer to match Ed25519 Public or Private Prefix');\n}\n\n/**\n * Takes a Buffer or Uint8Array with the raw secret key and encodes it\n * in DER-encoded PKCS#8 format.\n * Allows Uint8Arrays to be interoperable with node's crypto functions.\n *\n * @param {object} options - Options to use.\n * @param {Buffer} [options.secretKeyBytes] - Required if no seedBytes.\n * @param {Buffer} [options.seedBytes] - Required if no secretKeyBytes.\n *\n * @throws {TypeError} Throws if the supplied buffer is not of the right size\n *  or not a Uint8Array or Buffer.\n *\n * @returns {Buffer} DER secret key prefix + key bytes.\n*/\nfunction _secretKeyDerEncode({secretKeyBytes, seedBytes}) {\n  if(!(secretKeyBytes || seedBytes)) {\n    throw new TypeError('`secretKeyBytes` or `seedBytes` is required.');\n  }\n  if(!secretKeyBytes) {\n    (0,_validators_js__WEBPACK_IMPORTED_MODULE_0__.assertKeyBytes)({\n      bytes: seedBytes,\n      expectedLength: 32\n    });\n  }\n  if(!seedBytes) {\n    (0,_validators_js__WEBPACK_IMPORTED_MODULE_0__.assertKeyBytes)({\n      bytes: secretKeyBytes,\n      // allow 32 bytes or 64 bytes\n      expectedLength: secretKeyBytes.length === 32 ? 32 : 64\n    });\n  }\n  let p;\n  if(seedBytes) {\n    p = seedBytes;\n  } else {\n    // extract the first 32 bytes of the 64 byte secret key representation\n    p = secretKeyBytes.slice(0, 32);\n  }\n  return Buffer.concat([DER_PRIVATE_KEY_PREFIX, p]);\n}\n\n/**\n * Takes a Uint8Array of public key bytes and encodes it in DER-encoded\n * SubjectPublicKeyInfo (SPKI) format.\n * Allows Uint8Arrays to be interoperable with node's crypto functions.\n *\n * @param {object} options - Options to use.\n * @param {Uint8Array} options.publicKeyBytes - The keyBytes.\n *\n * @throws {TypeError} Throws if the bytes are not Uint8Array or of length 32.\n *\n * @returns {Buffer} DER Public key Prefix + key bytes.\n*/\nfunction _publicKeyDerEncode({publicKeyBytes}) {\n  (0,_validators_js__WEBPACK_IMPORTED_MODULE_0__.assertKeyBytes)({\n    bytes: publicKeyBytes,\n    expectedLength: 32,\n    code: 'invalidPublicKeyLength'\n  });\n  return Buffer.concat([DER_PUBLIC_KEY_PREFIX, publicKeyBytes]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/ed25519.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/factory.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/factory.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSigner: () => (/* binding */ createSigner),\n/* harmony export */   createVerifier: () => (/* binding */ createVerifier)\n/* harmony export */ });\n/* harmony import */ var _ed25519_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ed25519.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/ed25519.js\");\n/*!\n * Copyright (c) 2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst ALGORITHM = 'Ed25519';\n\nfunction createSigner({id, secretKey}) {\n  if(!secretKey) {\n    throw new Error('A secret key is not available for signing.');\n  }\n  return {\n    algorithm: ALGORITHM,\n    id,\n    async sign({data}) {\n      return _ed25519_js__WEBPACK_IMPORTED_MODULE_0__.sign(secretKey, data);\n    },\n  };\n}\n\nfunction createVerifier({id, publicKey}) {\n  if(!publicKey) {\n    throw new Error('A public key is not available for verifying.');\n  }\n  return {\n    algorithm: ALGORITHM,\n    id,\n    async verify({data, signature}) {\n      return _ed25519_js__WEBPACK_IMPORTED_MODULE_0__.verify(publicKey, data, signature);\n    },\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1tdWx0aWtleS9saWIvZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDd0M7O0FBRXhDOztBQUVPLHVCQUF1QixjQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixLQUFLO0FBQ3JCLGFBQWEsNkNBQVk7QUFDekIsS0FBSztBQUNMO0FBQ0E7O0FBRU8seUJBQXlCLGNBQWM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQyxhQUFhLCtDQUFjO0FBQzNCLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL2VkMjU1MTktbXVsdGlrZXkvbGliL2ZhY3RvcnkuanM/NzhkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMiBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5pbXBvcnQgKiBhcyBlZDI1NTE5IGZyb20gJy4vZWQyNTUxOS5qcyc7XG5cbmNvbnN0IEFMR09SSVRITSA9ICdFZDI1NTE5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNpZ25lcih7aWQsIHNlY3JldEtleX0pIHtcbiAgaWYoIXNlY3JldEtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBzZWNyZXQga2V5IGlzIG5vdCBhdmFpbGFibGUgZm9yIHNpZ25pbmcuJyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhbGdvcml0aG06IEFMR09SSVRITSxcbiAgICBpZCxcbiAgICBhc3luYyBzaWduKHtkYXRhfSkge1xuICAgICAgcmV0dXJuIGVkMjU1MTkuc2lnbihzZWNyZXRLZXksIGRhdGEpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWZXJpZmllcih7aWQsIHB1YmxpY0tleX0pIHtcbiAgaWYoIXB1YmxpY0tleSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQSBwdWJsaWMga2V5IGlzIG5vdCBhdmFpbGFibGUgZm9yIHZlcmlmeWluZy4nKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFsZ29yaXRobTogQUxHT1JJVEhNLFxuICAgIGlkLFxuICAgIGFzeW5jIHZlcmlmeSh7ZGF0YSwgc2lnbmF0dXJlfSkge1xuICAgICAgcmV0dXJuIGVkMjU1MTkudmVyaWZ5KHB1YmxpY0tleSwgZGF0YSwgc2lnbmF0dXJlKTtcbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/factory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/helpers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/helpers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mbDecodeKeyPair: () => (/* binding */ mbDecodeKeyPair),\n/* harmony export */   mbEncodeKeyPair: () => (/* binding */ mbEncodeKeyPair)\n/* harmony export */ });\n/* harmony import */ var base58_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base58-universal */ \"(ssr)/./node_modules/base58-universal/lib/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/constants.js\");\n/*!\n * Copyright (c) 2020-2024 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\nfunction mbEncodeKeyPair({keyPair}) {\n  const result = {};\n  if(keyPair.publicKey) {\n    result.publicKeyMultibase = _encodeMbKey(\n      _constants_js__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_PUB_HEADER, keyPair.publicKey);\n  }\n  if(keyPair.secretKey) {\n    result.secretKeyMultibase = _encodeMbKey(\n      _constants_js__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_PRIV_HEADER, keyPair.secretKey);\n  }\n  return result;\n}\n\nfunction mbDecodeKeyPair({publicKeyMultibase, secretKeyMultibase}) {\n  if(!(publicKeyMultibase && typeof publicKeyMultibase === 'string' &&\n  publicKeyMultibase[0] === 'z')) {\n    throw new Error(\n      '\"publicKeyMultibase\" must be a multibase, base58-encoded string.');\n  }\n  // remove multibase header\n  const publicKeyMulticodec = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(publicKeyMultibase.substr(1));\n  // remove multicodec header\n  const publicKey = publicKeyMulticodec.slice(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_PUB_HEADER.length);\n\n  let secretKey;\n  if(secretKeyMultibase) {\n    if(!(typeof secretKeyMultibase === 'string' &&\n    secretKeyMultibase[0] === 'z')) {\n      throw new Error(\n        '\"secretKeyMultibase\" must be a multibase, base58-encoded string.');\n    }\n    // remove multibase header\n    const secretKeyMulticodec = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(secretKeyMultibase.substr(1));\n    // remove multicodec header\n    secretKey = secretKeyMulticodec.slice(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_PRIV_HEADER.length);\n  }\n\n  return {\n    publicKey,\n    secretKey\n  };\n}\n\n// encode a multibase base58-btc multicodec key\nfunction _encodeMbKey(header, key) {\n  const mbKey = new Uint8Array(header.length + key.length);\n\n  mbKey.set(header);\n  mbKey.set(key, header.length);\n\n  return _constants_js__WEBPACK_IMPORTED_MODULE_1__.MULTIBASE_BASE58BTC_HEADER + base58_universal__WEBPACK_IMPORTED_MODULE_0__.encode(mbKey);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1tdWx0aWtleS9saWIvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzhDO0FBS3RCOztBQUVqQiwwQkFBMEIsUUFBUTtBQUN6QztBQUNBO0FBQ0E7QUFDQSxNQUFNLGdFQUFxQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLGlFQUFzQjtBQUM1QjtBQUNBO0FBQ0E7O0FBRU8sMEJBQTBCLHVDQUF1QztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsb0RBQWdCO0FBQzlDO0FBQ0EsOENBQThDLGdFQUFxQjs7QUFFbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxvREFBZ0I7QUFDaEQ7QUFDQSwwQ0FBMEMsaUVBQXNCO0FBQ2hFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsU0FBUyxxRUFBMEIsR0FBRyxvREFBZ0I7QUFDdEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1tdWx0aWtleS9saWIvaGVscGVycy5qcz84N2FhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwLTIwMjQgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuaW1wb3J0ICogYXMgYmFzZTU4YnRjIGZyb20gJ2Jhc2U1OC11bml2ZXJzYWwnO1xuaW1wb3J0IHtcbiAgTVVMVElCQVNFX0JBU0U1OEJUQ19IRUFERVIsXG4gIE1VTFRJQ09ERUNfUFJJVl9IRUFERVIsXG4gIE1VTFRJQ09ERUNfUFVCX0hFQURFUlxufSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYkVuY29kZUtleVBhaXIoe2tleVBhaXJ9KSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBpZihrZXlQYWlyLnB1YmxpY0tleSkge1xuICAgIHJlc3VsdC5wdWJsaWNLZXlNdWx0aWJhc2UgPSBfZW5jb2RlTWJLZXkoXG4gICAgICBNVUxUSUNPREVDX1BVQl9IRUFERVIsIGtleVBhaXIucHVibGljS2V5KTtcbiAgfVxuICBpZihrZXlQYWlyLnNlY3JldEtleSkge1xuICAgIHJlc3VsdC5zZWNyZXRLZXlNdWx0aWJhc2UgPSBfZW5jb2RlTWJLZXkoXG4gICAgICBNVUxUSUNPREVDX1BSSVZfSEVBREVSLCBrZXlQYWlyLnNlY3JldEtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1iRGVjb2RlS2V5UGFpcih7cHVibGljS2V5TXVsdGliYXNlLCBzZWNyZXRLZXlNdWx0aWJhc2V9KSB7XG4gIGlmKCEocHVibGljS2V5TXVsdGliYXNlICYmIHR5cGVvZiBwdWJsaWNLZXlNdWx0aWJhc2UgPT09ICdzdHJpbmcnICYmXG4gIHB1YmxpY0tleU11bHRpYmFzZVswXSA9PT0gJ3onKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdcInB1YmxpY0tleU11bHRpYmFzZVwiIG11c3QgYmUgYSBtdWx0aWJhc2UsIGJhc2U1OC1lbmNvZGVkIHN0cmluZy4nKTtcbiAgfVxuICAvLyByZW1vdmUgbXVsdGliYXNlIGhlYWRlclxuICBjb25zdCBwdWJsaWNLZXlNdWx0aWNvZGVjID0gYmFzZTU4YnRjLmRlY29kZShwdWJsaWNLZXlNdWx0aWJhc2Uuc3Vic3RyKDEpKTtcbiAgLy8gcmVtb3ZlIG11bHRpY29kZWMgaGVhZGVyXG4gIGNvbnN0IHB1YmxpY0tleSA9IHB1YmxpY0tleU11bHRpY29kZWMuc2xpY2UoTVVMVElDT0RFQ19QVUJfSEVBREVSLmxlbmd0aCk7XG5cbiAgbGV0IHNlY3JldEtleTtcbiAgaWYoc2VjcmV0S2V5TXVsdGliYXNlKSB7XG4gICAgaWYoISh0eXBlb2Ygc2VjcmV0S2V5TXVsdGliYXNlID09PSAnc3RyaW5nJyAmJlxuICAgIHNlY3JldEtleU11bHRpYmFzZVswXSA9PT0gJ3onKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnXCJzZWNyZXRLZXlNdWx0aWJhc2VcIiBtdXN0IGJlIGEgbXVsdGliYXNlLCBiYXNlNTgtZW5jb2RlZCBzdHJpbmcuJyk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSBtdWx0aWJhc2UgaGVhZGVyXG4gICAgY29uc3Qgc2VjcmV0S2V5TXVsdGljb2RlYyA9IGJhc2U1OGJ0Yy5kZWNvZGUoc2VjcmV0S2V5TXVsdGliYXNlLnN1YnN0cigxKSk7XG4gICAgLy8gcmVtb3ZlIG11bHRpY29kZWMgaGVhZGVyXG4gICAgc2VjcmV0S2V5ID0gc2VjcmV0S2V5TXVsdGljb2RlYy5zbGljZShNVUxUSUNPREVDX1BSSVZfSEVBREVSLmxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHB1YmxpY0tleSxcbiAgICBzZWNyZXRLZXlcbiAgfTtcbn1cblxuLy8gZW5jb2RlIGEgbXVsdGliYXNlIGJhc2U1OC1idGMgbXVsdGljb2RlYyBrZXlcbmZ1bmN0aW9uIF9lbmNvZGVNYktleShoZWFkZXIsIGtleSkge1xuICBjb25zdCBtYktleSA9IG5ldyBVaW50OEFycmF5KGhlYWRlci5sZW5ndGggKyBrZXkubGVuZ3RoKTtcblxuICBtYktleS5zZXQoaGVhZGVyKTtcbiAgbWJLZXkuc2V0KGtleSwgaGVhZGVyLmxlbmd0aCk7XG5cbiAgcmV0dXJuIE1VTFRJQkFTRV9CQVNFNThCVENfSEVBREVSICsgYmFzZTU4YnRjLmVuY29kZShtYktleSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromJwk: () => (/* binding */ fromJwk),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   toJwk: () => (/* binding */ toJwk)\n/* harmony export */ });\n/* harmony import */ var base64url_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64url-universal */ \"(ssr)/./node_modules/base64url-universal/lib/index.js\");\n/* harmony import */ var _ed25519_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ed25519.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/ed25519.js\");\n/* harmony import */ var _factory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factory.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/factory.js\");\n/* harmony import */ var _serialize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./serialize.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/serialize.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/helpers.js\");\n/* harmony import */ var _keyPairTranslator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./keyPairTranslator.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslator.js\");\n/*!\n * Copyright (c) 2020-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\n\n\n\n\nasync function generate({id, controller, seed} = {}) {\n  let key;\n  if(seed) {\n    key = await _ed25519_js__WEBPACK_IMPORTED_MODULE_1__.generateKeyPairFromSeed(seed);\n  } else {\n    key = await _ed25519_js__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair();\n  }\n\n  const {publicKeyMultibase, secretKeyMultibase} = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.mbEncodeKeyPair)({\n    keyPair: key\n  });\n  if(controller && !id) {\n    id = `${controller}#${publicKeyMultibase}`;\n  }\n  const keyPair = {\n    id,\n    controller,\n    publicKeyMultibase,\n    secretKeyMultibase,\n    ...key,\n  };\n  return _createKeyPairInterface({keyPair});\n}\n\n// import key pair from JSON Multikey\nasync function from(key) {\n  let multikey = {...key};\n  if(multikey.type !== 'Multikey') {\n    // attempt loading from JWK if `publicKeyJwk` is present\n    if(multikey.publicKeyJwk) {\n      let id;\n      let controller;\n      if(multikey.type === 'JsonWebKey' || multikey.type === 'JsonWebKey2020') {\n        ({id, controller} = multikey);\n      }\n      return fromJwk({\n        jwk: multikey.publicKeyJwk, secretKey: false, id, controller\n      });\n    }\n    if(multikey.type) {\n      multikey = await (0,_keyPairTranslator_js__WEBPACK_IMPORTED_MODULE_6__.toMultikey)({keyPair: multikey});\n      return _createKeyPairInterface({keyPair: multikey});\n    }\n  }\n  if(!multikey.type) {\n    multikey.type = 'Multikey';\n  }\n  if(!multikey['@context']) {\n    multikey['@context'] = _constants_js__WEBPACK_IMPORTED_MODULE_4__.MULTIKEY_CONTEXT_V1_URL;\n  }\n\n  _assertMultikey(multikey);\n  return _createKeyPairInterface({keyPair: multikey});\n}\n\n// imports key pair from JWK\nasync function fromJwk({jwk, secretKey = false, id, controller} = {}) {\n  const multikey = {\n    '@context': _constants_js__WEBPACK_IMPORTED_MODULE_4__.MULTIKEY_CONTEXT_V1_URL,\n    type: 'Multikey',\n    publicKeyMultibase: (0,_serialize_js__WEBPACK_IMPORTED_MODULE_3__.jwkToPublicKeyMultibase)({jwk})\n  };\n  if(typeof id === 'string') {\n    multikey.id = id;\n  }\n  if(typeof controller === 'string') {\n    multikey.controller = controller;\n  }\n  if(secretKey && jwk.d) {\n    multikey.secretKeyMultibase = (0,_serialize_js__WEBPACK_IMPORTED_MODULE_3__.jwkToSecretKeyMultibase)({jwk});\n  }\n  return from(multikey);\n}\n\n// converts key pair to JWK\nasync function toJwk({keyPair, secretKey = false} = {}) {\n  const jwk = {\n    kty: 'OKP',\n    crv: 'Ed25519',\n    x: base64url_universal__WEBPACK_IMPORTED_MODULE_0__.encode(keyPair.publicKey)\n  };\n  const useSecretKey = secretKey && !!keyPair.secretKey;\n  if(useSecretKey) {\n    jwk.d = base64url_universal__WEBPACK_IMPORTED_MODULE_0__.encode(keyPair.secretKey);\n  }\n  return jwk;\n}\n\nasync function _createKeyPairInterface({keyPair}) {\n  if(!keyPair.publicKey) {\n    keyPair = await (0,_serialize_js__WEBPACK_IMPORTED_MODULE_3__.importKeyPair)(keyPair);\n  }\n  keyPair = {\n    ...keyPair,\n    async export({\n      publicKey = true, secretKey = false, includeContext = true, raw = false,\n      canonicalize = false\n    } = {}) {\n      if(raw) {\n        const {publicKey, secretKey} = keyPair;\n        const result = {};\n        if(publicKey) {\n          result.publicKey = publicKey.slice();\n        }\n        if(secretKey) {\n          if(canonicalize && secretKey.length > _constants_js__WEBPACK_IMPORTED_MODULE_4__.SECRET_KEY_SIZE) {\n            result.secretKey = secretKey.subarray(0, _constants_js__WEBPACK_IMPORTED_MODULE_4__.SECRET_KEY_SIZE).slice();\n          } else {\n            result.secretKey = secretKey;\n          }\n        }\n        return result;\n      }\n      return (0,_serialize_js__WEBPACK_IMPORTED_MODULE_3__.exportKeyPair)({\n        keyPair, publicKey, secretKey, includeContext, canonicalize\n      });\n    },\n    signer() {\n      const {id, secretKey} = keyPair;\n      return (0,_factory_js__WEBPACK_IMPORTED_MODULE_2__.createSigner)({id, secretKey});\n    },\n    verifier() {\n      const {id, publicKey} = keyPair;\n      return (0,_factory_js__WEBPACK_IMPORTED_MODULE_2__.createVerifier)({id, publicKey});\n    }\n  };\n\n  return keyPair;\n}\n\nfunction _assertMultikey(key) {\n  if(!(key && typeof key === 'object')) {\n    throw new TypeError('\"key\" must be an object.');\n  }\n  if(key.type !== 'Multikey') {\n    throw new Error('\"key\" must be a Multikey with type \"Multikey\".');\n  }\n  if(!(key['@context'] === _constants_js__WEBPACK_IMPORTED_MODULE_4__.MULTIKEY_CONTEXT_V1_URL ||\n    (Array.isArray(key['@context']) &&\n    key['@context'].includes(_constants_js__WEBPACK_IMPORTED_MODULE_4__.MULTIKEY_CONTEXT_V1_URL)))) {\n    throw new TypeError(\n      '\"key\" must be a Multikey with context ' +\n      `\"${_constants_js__WEBPACK_IMPORTED_MODULE_4__.MULTIKEY_CONTEXT_V1_URL}\".`);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslationMap.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslationMap.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyPairTranslationMap: () => (/* binding */ keyPairTranslationMap)\n/* harmony export */ });\n/* harmony import */ var base58_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base58-universal */ \"(ssr)/./node_modules/base58-universal/lib/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/constants.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/helpers.js\");\n/*!\n * Copyright (c) 2022-2024 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\nconst keyPairTranslationMap = new Map([\n  ['Ed25519VerificationKey2020', {\n    contextUrl: _constants_js__WEBPACK_IMPORTED_MODULE_1__.ED25519_SIGNATURE_2020_V1_URL,\n    translationFn: _translateEd25519VerificationKey2020\n  }],\n  ['Ed25519VerificationKey2018', {\n    contextUrl: _constants_js__WEBPACK_IMPORTED_MODULE_1__.ED25519_SIGNATURE_2018_V1_URL,\n    translationFn: _translateEd25519VerificationKey2018\n  }]\n]);\n\nasync function _translateEd25519VerificationKey2020({keyPair}) {\n  return {\n    ...keyPair,\n    type: 'Multikey',\n    '@context': _constants_js__WEBPACK_IMPORTED_MODULE_1__.MULTIKEY_CONTEXT_V1_URL,\n    secretKeyMultibase: keyPair.privateKeyMultibase\n  };\n}\n\nasync function _translateEd25519VerificationKey2018({keyPair}) {\n  const key = {\n    publicKey: base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(keyPair.publicKeyBase58),\n    secretKey: undefined\n  };\n\n  if(keyPair.privateKeyBase58) {\n    key.secretKey = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(keyPair.privateKeyBase58);\n  }\n\n  const {publicKeyMultibase, secretKeyMultibase} = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.mbEncodeKeyPair)({\n    keyPair: key\n  });\n\n  return {\n    '@context': _constants_js__WEBPACK_IMPORTED_MODULE_1__.MULTIKEY_CONTEXT_V1_URL,\n    id: keyPair.id,\n    type: 'Multikey',\n    controller: keyPair.controller,\n    revoked: keyPair.revoked,\n    publicKeyMultibase,\n    secretKeyMultibase,\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1tdWx0aWtleS9saWIva2V5UGFpclRyYW5zbGF0aW9uTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDOEM7QUFLdEI7QUFDcUI7O0FBRTdDO0FBQ0E7QUFDQSxnQkFBZ0Isd0VBQTZCO0FBQzdDO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0JBQWdCLHdFQUE2QjtBQUM3QztBQUNBLEdBQUc7QUFDSDs7QUFFQSxxREFBcUQsUUFBUTtBQUM3RDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0VBQXVCO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQSxxREFBcUQsUUFBUTtBQUM3RDtBQUNBLGVBQWUsb0RBQWdCO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0Isb0RBQWdCO0FBQ3BDOztBQUVBLFNBQVMsd0NBQXdDLEVBQUUsNERBQWU7QUFDbEU7QUFDQSxHQUFHOztBQUVIO0FBQ0EsZ0JBQWdCLGtFQUF1QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9lZDI1NTE5LW11bHRpa2V5L2xpYi9rZXlQYWlyVHJhbnNsYXRpb25NYXAuanM/MDQ1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMi0yMDI0IERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbmltcG9ydCAqIGFzIGJhc2U1OGJ0YyBmcm9tICdiYXNlNTgtdW5pdmVyc2FsJztcbmltcG9ydCB7XG4gIEVEMjU1MTlfU0lHTkFUVVJFXzIwMThfVjFfVVJMLFxuICBFRDI1NTE5X1NJR05BVFVSRV8yMDIwX1YxX1VSTCxcbiAgTVVMVElLRVlfQ09OVEVYVF9WMV9VUkxcbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHttYkVuY29kZUtleVBhaXJ9IGZyb20gJy4vaGVscGVycy5qcyc7XG5cbmNvbnN0IGtleVBhaXJUcmFuc2xhdGlvbk1hcCA9IG5ldyBNYXAoW1xuICBbJ0VkMjU1MTlWZXJpZmljYXRpb25LZXkyMDIwJywge1xuICAgIGNvbnRleHRVcmw6IEVEMjU1MTlfU0lHTkFUVVJFXzIwMjBfVjFfVVJMLFxuICAgIHRyYW5zbGF0aW9uRm46IF90cmFuc2xhdGVFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAyMFxuICB9XSxcbiAgWydFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAxOCcsIHtcbiAgICBjb250ZXh0VXJsOiBFRDI1NTE5X1NJR05BVFVSRV8yMDE4X1YxX1VSTCxcbiAgICB0cmFuc2xhdGlvbkZuOiBfdHJhbnNsYXRlRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMThcbiAgfV1cbl0pO1xuXG5hc3luYyBmdW5jdGlvbiBfdHJhbnNsYXRlRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjAoe2tleVBhaXJ9KSB7XG4gIHJldHVybiB7XG4gICAgLi4ua2V5UGFpcixcbiAgICB0eXBlOiAnTXVsdGlrZXknLFxuICAgICdAY29udGV4dCc6IE1VTFRJS0VZX0NPTlRFWFRfVjFfVVJMLFxuICAgIHNlY3JldEtleU11bHRpYmFzZToga2V5UGFpci5wcml2YXRlS2V5TXVsdGliYXNlXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIF90cmFuc2xhdGVFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAxOCh7a2V5UGFpcn0pIHtcbiAgY29uc3Qga2V5ID0ge1xuICAgIHB1YmxpY0tleTogYmFzZTU4YnRjLmRlY29kZShrZXlQYWlyLnB1YmxpY0tleUJhc2U1OCksXG4gICAgc2VjcmV0S2V5OiB1bmRlZmluZWRcbiAgfTtcblxuICBpZihrZXlQYWlyLnByaXZhdGVLZXlCYXNlNTgpIHtcbiAgICBrZXkuc2VjcmV0S2V5ID0gYmFzZTU4YnRjLmRlY29kZShrZXlQYWlyLnByaXZhdGVLZXlCYXNlNTgpO1xuICB9XG5cbiAgY29uc3Qge3B1YmxpY0tleU11bHRpYmFzZSwgc2VjcmV0S2V5TXVsdGliYXNlfSA9IG1iRW5jb2RlS2V5UGFpcih7XG4gICAga2V5UGFpcjoga2V5XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgJ0Bjb250ZXh0JzogTVVMVElLRVlfQ09OVEVYVF9WMV9VUkwsXG4gICAgaWQ6IGtleVBhaXIuaWQsXG4gICAgdHlwZTogJ011bHRpa2V5JyxcbiAgICBjb250cm9sbGVyOiBrZXlQYWlyLmNvbnRyb2xsZXIsXG4gICAgcmV2b2tlZDoga2V5UGFpci5yZXZva2VkLFxuICAgIHB1YmxpY0tleU11bHRpYmFzZSxcbiAgICBzZWNyZXRLZXlNdWx0aWJhc2UsXG4gIH07XG59XG5cbmV4cG9ydCB7a2V5UGFpclRyYW5zbGF0aW9uTWFwfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslationMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslator.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslator.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toMultikey: () => (/* binding */ toMultikey)\n/* harmony export */ });\n/* harmony import */ var _keyPairTranslationMap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyPairTranslationMap.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslationMap.js\");\n/*!\n * Copyright (c) 2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nasync function toMultikey({keyPair}) {\n  const translationResult = _keyPairTranslationMap_js__WEBPACK_IMPORTED_MODULE_0__.keyPairTranslationMap.get(keyPair.type);\n  if(!translationResult) {\n    throw new Error(`Unsupported key type \"${keyPair.type}\".`);\n  }\n\n  const {contextUrl, translationFn} = translationResult;\n  if(!keyPair['@context']) {\n    keyPair['@context'] = contextUrl;\n  }\n  if(!_includesContext({document: keyPair, contextUrl})) {\n    throw new Error(`Context not supported \"${keyPair['@context']}\".`);\n  }\n\n  return translationFn({keyPair});\n}\n\nfunction _includesContext({document, contextUrl}) {\n  const context = document['@context'];\n  return context === contextUrl ||\n    (Array.isArray(context) && context.includes(contextUrl));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1tdWx0aWtleS9saWIva2V5UGFpclRyYW5zbGF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDaUU7O0FBRTFELDJCQUEyQixRQUFRO0FBQzFDLDRCQUE0Qiw0RUFBcUI7QUFDakQ7QUFDQSw2Q0FBNkMsYUFBYTtBQUMxRDs7QUFFQSxTQUFTLDJCQUEyQjtBQUNwQztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsOEJBQThCO0FBQ3RELDhDQUE4QyxvQkFBb0I7QUFDbEU7O0FBRUEsd0JBQXdCLFFBQVE7QUFDaEM7O0FBRUEsMkJBQTJCLHFCQUFxQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9lZDI1NTE5LW11bHRpa2V5L2xpYi9rZXlQYWlyVHJhbnNsYXRvci5qcz8wMWMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIyIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbmltcG9ydCB7a2V5UGFpclRyYW5zbGF0aW9uTWFwfSBmcm9tICcuL2tleVBhaXJUcmFuc2xhdGlvbk1hcC5qcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0b011bHRpa2V5KHtrZXlQYWlyfSkge1xuICBjb25zdCB0cmFuc2xhdGlvblJlc3VsdCA9IGtleVBhaXJUcmFuc2xhdGlvbk1hcC5nZXQoa2V5UGFpci50eXBlKTtcbiAgaWYoIXRyYW5zbGF0aW9uUmVzdWx0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBrZXkgdHlwZSBcIiR7a2V5UGFpci50eXBlfVwiLmApO1xuICB9XG5cbiAgY29uc3Qge2NvbnRleHRVcmwsIHRyYW5zbGF0aW9uRm59ID0gdHJhbnNsYXRpb25SZXN1bHQ7XG4gIGlmKCFrZXlQYWlyWydAY29udGV4dCddKSB7XG4gICAga2V5UGFpclsnQGNvbnRleHQnXSA9IGNvbnRleHRVcmw7XG4gIH1cbiAgaWYoIV9pbmNsdWRlc0NvbnRleHQoe2RvY3VtZW50OiBrZXlQYWlyLCBjb250ZXh0VXJsfSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbnRleHQgbm90IHN1cHBvcnRlZCBcIiR7a2V5UGFpclsnQGNvbnRleHQnXX1cIi5gKTtcbiAgfVxuXG4gIHJldHVybiB0cmFuc2xhdGlvbkZuKHtrZXlQYWlyfSk7XG59XG5cbmZ1bmN0aW9uIF9pbmNsdWRlc0NvbnRleHQoe2RvY3VtZW50LCBjb250ZXh0VXJsfSkge1xuICBjb25zdCBjb250ZXh0ID0gZG9jdW1lbnRbJ0Bjb250ZXh0J107XG4gIHJldHVybiBjb250ZXh0ID09PSBjb250ZXh0VXJsIHx8XG4gICAgKEFycmF5LmlzQXJyYXkoY29udGV4dCkgJiYgY29udGV4dC5pbmNsdWRlcyhjb250ZXh0VXJsKSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/keyPairTranslator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/serialize.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/serialize.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exportKeyPair: () => (/* binding */ exportKeyPair),\n/* harmony export */   importKeyPair: () => (/* binding */ importKeyPair),\n/* harmony export */   jwkToPublicKeyBytes: () => (/* binding */ jwkToPublicKeyBytes),\n/* harmony export */   jwkToPublicKeyMultibase: () => (/* binding */ jwkToPublicKeyMultibase),\n/* harmony export */   jwkToSecretKeyBytes: () => (/* binding */ jwkToSecretKeyBytes),\n/* harmony export */   jwkToSecretKeyMultibase: () => (/* binding */ jwkToSecretKeyMultibase),\n/* harmony export */   rawToPublicKeyMultibase: () => (/* binding */ rawToPublicKeyMultibase),\n/* harmony export */   rawToSecretKeyMultibase: () => (/* binding */ rawToSecretKeyMultibase)\n/* harmony export */ });\n/* harmony import */ var base64url_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base64url-universal */ \"(ssr)/./node_modules/base64url-universal/lib/index.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/helpers.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/constants.js\");\n/*!\n * Copyright (c) 2022-2024 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\nconst LEGACY_SECRET_KEY_SIZE = _constants_js__WEBPACK_IMPORTED_MODULE_2__.SECRET_KEY_SIZE + _constants_js__WEBPACK_IMPORTED_MODULE_2__.PUBLIC_KEY_SIZE;\n\nasync function exportKeyPair({\n  keyPair, secretKey, publicKey, includeContext, canonicalize = false\n} = {}) {\n  if(!(publicKey || secretKey)) {\n    throw new TypeError(\n      'Export requires specifying either \"publicKey\" or \"secretKey\".');\n  }\n\n  const useSecretKey = secretKey && !!keyPair.secretKey;\n\n  // export as Multikey\n  const exported = {};\n  if(includeContext) {\n    exported['@context'] = _constants_js__WEBPACK_IMPORTED_MODULE_2__.MULTIKEY_CONTEXT_V1_URL;\n  }\n  exported.id = keyPair.id;\n  exported.type = 'Multikey';\n  exported.controller = keyPair.controller;\n\n  if(publicKey) {\n    exported.publicKeyMultibase = rawToPublicKeyMultibase(keyPair);\n  }\n  if(useSecretKey) {\n    exported.secretKeyMultibase = rawToSecretKeyMultibase({\n      ...keyPair, canonicalize\n    });\n  }\n\n  if(keyPair.revoked) {\n    exported.revoked = keyPair.revoked;\n  }\n\n  return exported;\n}\n\nasync function importKeyPair({\n  id, controller, secretKeyMultibase, publicKeyMultibase, revoked\n}) {\n  if(!publicKeyMultibase) {\n    throw new TypeError('The \"publicKeyMultibase\" property is required.');\n  }\n\n  const {\n    publicKey, secretKey\n  } = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.mbDecodeKeyPair)({publicKeyMultibase, secretKeyMultibase});\n\n  if(controller && !id) {\n    id = `${controller}#${publicKeyMultibase}`;\n  }\n\n  return {\n    id,\n    controller,\n    publicKey,\n    secretKey,\n    publicKeyMultibase,\n    secretKeyMultibase,\n    revoked,\n  };\n}\n\nfunction jwkToPublicKeyBytes({jwk} = {}) {\n  const {kty, crv, x} = jwk;\n  if(kty !== 'OKP') {\n    throw new TypeError('\"jwk.kty\" must be \"OKP\".');\n  }\n  if(crv !== 'Ed25519') {\n    throw new TypeError('\"jwk.crv\" must be \"Ed25519\".');\n  }\n  if(typeof x !== 'string') {\n    throw new TypeError('\"jwk.x\" must be a string.');\n  }\n  const publicKey = base64url_universal__WEBPACK_IMPORTED_MODULE_0__.decode(jwk.x);\n  if(publicKey.length !== _constants_js__WEBPACK_IMPORTED_MODULE_2__.PUBLIC_KEY_SIZE) {\n    throw new Error(\n      `Invalid public key size (${publicKey.length}); ` +\n      `expected ${_constants_js__WEBPACK_IMPORTED_MODULE_2__.PUBLIC_KEY_SIZE}.`);\n  }\n  return publicKey;\n}\n\nfunction jwkToPublicKeyMultibase({jwk} = {}) {\n  const publicKey = jwkToPublicKeyBytes({jwk});\n  const {publicKeyMultibase} = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.mbEncodeKeyPair)({\n    keyPair: {publicKey}\n  });\n  return publicKeyMultibase;\n}\n\nfunction jwkToSecretKeyBytes({jwk} = {}) {\n  const {kty, crv, d} = jwk;\n  if(kty !== 'OKP') {\n    throw new TypeError('\"jwk.kty\" must be \"OKP\".');\n  }\n  if(crv !== 'Ed25519') {\n    throw new TypeError('\"jwk.crv\" must be \"Ed25519\".');\n  }\n  if(typeof d !== 'string') {\n    throw new TypeError('\"jwk.d\" must be a string.');\n  }\n  const secretKey = Uint8Array.from(base64url_universal__WEBPACK_IMPORTED_MODULE_0__.decode(jwk.d));\n  if(secretKey.length !== _constants_js__WEBPACK_IMPORTED_MODULE_2__.SECRET_KEY_SIZE) {\n    throw new Error(\n      `Invalid secret key size (${secretKey.length}); ` +\n      `expected ${_constants_js__WEBPACK_IMPORTED_MODULE_2__.SECRET_KEY_SIZE}.`);\n  }\n  return secretKey;\n}\n\nfunction jwkToSecretKeyMultibase({jwk} = {}) {\n  const secretKey = jwkToSecretKeyBytes({jwk});\n  const {secretKeyMultibase} = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.mbEncodeKeyPair)({\n    keyPair: {secretKey}\n  });\n  return secretKeyMultibase;\n}\n\nfunction rawToPublicKeyMultibase({publicKey} = {}) {\n  if(publicKey.length !== _constants_js__WEBPACK_IMPORTED_MODULE_2__.PUBLIC_KEY_SIZE) {\n    throw new Error(\n      `Invalid public key size (${publicKey.length}); ` +\n      `expected ${_constants_js__WEBPACK_IMPORTED_MODULE_2__.PUBLIC_KEY_SIZE}.`);\n  }\n  const {publicKeyMultibase} = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.mbEncodeKeyPair)({\n    keyPair: {publicKey}\n  });\n  return publicKeyMultibase;\n}\n\nfunction rawToSecretKeyMultibase({\n  secretKey, canonicalize = false\n} = {}) {\n  if(secretKey.length !== _constants_js__WEBPACK_IMPORTED_MODULE_2__.SECRET_KEY_SIZE) {\n    if(secretKey.length !== LEGACY_SECRET_KEY_SIZE) {\n      throw new Error(\n        `Invalid secret key size (${secretKey.length}); ` +\n        `expected ${_constants_js__WEBPACK_IMPORTED_MODULE_2__.SECRET_KEY_SIZE}.`);\n    }\n    // handle legacy concatenated (secret key + public key)\n    if(canonicalize) {\n      secretKey = secretKey.subarray(0, _constants_js__WEBPACK_IMPORTED_MODULE_2__.SECRET_KEY_SIZE);\n    }\n  }\n  const {secretKeyMultibase} = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.mbEncodeKeyPair)({\n    keyPair: {secretKey}\n  });\n  return secretKeyMultibase;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/serialize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/validators.js":
/*!************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-multikey/lib/validators.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertKeyBytes: () => (/* binding */ assertKeyBytes)\n/* harmony export */ });\n/*!\n * Copyright (c) 2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * Asserts that key bytes have a type of Uint8Array and a specific length.\n *\n * @throws {TypeError|SyntaxError} - Throws a Type or Syntax error.\n *\n * @param {object} options - Options to use.\n * @param {Uint8Array} options.bytes - The bytes being checked.\n * @param {number} [options.expectedLength=32] - The expected bytes length.\n * @param {string} [options.code] - An optional code for the error.\n *\n * @returns {undefined} Returns on success throws on error.\n */\nfunction assertKeyBytes({bytes, expectedLength = 32, code}) {\n  if(!(bytes instanceof Uint8Array)) {\n    throw new TypeError('\"bytes\" must be a Uint8Array.');\n  }\n  if(bytes.length !== expectedLength) {\n    const error = new Error(\n      `\"bytes\" must be a ${expectedLength}-byte Uint8Array.`);\n    // we need DataError for invalid byte length\n    error.name = 'DataError';\n    // add the error code from the did:key spec if provided\n    if(code) {\n      error.code = code;\n    }\n    throw error;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1tdWx0aWtleS9saWIvdmFsaWRhdG9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ08seUJBQXlCLGlDQUFpQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGVBQWU7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL2VkMjU1MTktbXVsdGlrZXkvbGliL3ZhbGlkYXRvcnMuanM/YjUyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMiBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGtleSBieXRlcyBoYXZlIGEgdHlwZSBvZiBVaW50OEFycmF5IGFuZCBhIHNwZWNpZmljIGxlbmd0aC5cbiAqXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J8U3ludGF4RXJyb3J9IC0gVGhyb3dzIGEgVHlwZSBvciBTeW50YXggZXJyb3IuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIHRvIHVzZS5cbiAqIEBwYXJhbSB7VWludDhBcnJheX0gb3B0aW9ucy5ieXRlcyAtIFRoZSBieXRlcyBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmV4cGVjdGVkTGVuZ3RoPTMyXSAtIFRoZSBleHBlY3RlZCBieXRlcyBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuY29kZV0gLSBBbiBvcHRpb25hbCBjb2RlIGZvciB0aGUgZXJyb3IuXG4gKlxuICogQHJldHVybnMge3VuZGVmaW5lZH0gUmV0dXJucyBvbiBzdWNjZXNzIHRocm93cyBvbiBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEtleUJ5dGVzKHtieXRlcywgZXhwZWN0ZWRMZW5ndGggPSAzMiwgY29kZX0pIHtcbiAgaWYoIShieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJieXRlc1wiIG11c3QgYmUgYSBVaW50OEFycmF5LicpO1xuICB9XG4gIGlmKGJ5dGVzLmxlbmd0aCAhPT0gZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgIGBcImJ5dGVzXCIgbXVzdCBiZSBhICR7ZXhwZWN0ZWRMZW5ndGh9LWJ5dGUgVWludDhBcnJheS5gKTtcbiAgICAvLyB3ZSBuZWVkIERhdGFFcnJvciBmb3IgaW52YWxpZCBieXRlIGxlbmd0aFxuICAgIGVycm9yLm5hbWUgPSAnRGF0YUVycm9yJztcbiAgICAvLyBhZGQgdGhlIGVycm9yIGNvZGUgZnJvbSB0aGUgZGlkOmtleSBzcGVjIGlmIHByb3ZpZGVkXG4gICAgaWYoY29kZSkge1xuICAgICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-signature-2020/lib/Ed25519Signature2020.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-signature-2020/lib/Ed25519Signature2020.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519Signature2020: () => (/* binding */ Ed25519Signature2020)\n/* harmony export */ });\n/* harmony import */ var base58_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base58-universal */ \"(ssr)/./node_modules/base58-universal/lib/index.js\");\n/* harmony import */ var _digitalbazaar_ed25519_multikey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @digitalbazaar/ed25519-multikey */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-multikey/lib/index.js\");\n/* harmony import */ var _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @digitalbazaar/ed25519-verification-key-2020 */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js\");\n/* harmony import */ var jsonld_signatures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jsonld-signatures */ \"(ssr)/./node_modules/jsonld-signatures/lib/jsonld-signatures.js\");\n/* harmony import */ var ed25519_signature_2020_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ed25519-signature-2020-context */ \"(ssr)/./node_modules/ed25519-signature-2020-context/dist/context.esm.js\");\n/*!\n * Copyright (c) 2020-2024 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\nconst {suites: {LinkedDataSignature}} = jsonld_signatures__WEBPACK_IMPORTED_MODULE_3__;\n\n\n// 'https://w3id.org/security/suites/ed25519-2020/v1'\nconst SUITE_CONTEXT_URL = ed25519_signature_2020_context__WEBPACK_IMPORTED_MODULE_4__[\"default\"].constants.CONTEXT_URL;\n\n// multibase base58-btc header\nconst MULTIBASE_BASE58BTC_HEADER = 'z';\n\nclass Ed25519Signature2020 extends LinkedDataSignature {\n  /**\n   * @param {object} options - Options hashmap.\n   *\n   * Either a `key` OR at least one of `signer`/`verifier` is required:\n   *\n   * @param {object} [options.key] - An optional key object (containing an\n   *   `id` property, and either `signer` or `verifier`, depending on the\n   *   intended operation. Useful for when the application is managing keys\n   *   itself (when using a KMS, you never have access to the private key,\n   *   and so should use the `signer` param instead).\n   * @param {Function} [options.signer] - Signer function that returns an\n   *   object with an async sign() method. This is useful when interfacing\n   *   with a KMS (since you don't get access to the private key and its\n   *   `signer()`, the KMS client gives you only the signer function to use).\n   * @param {Function} [options.verifier] - Verifier function that returns\n   *   an object with an async `verify()` method. Useful when working with a\n   *   KMS-provided verifier function.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param {object} [options.proof] - A JSON-LD document with options to use\n   *   for the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2).\n   * @param {string|Date} [options.date] - Signing date to use if not passed.\n   * @param {boolean} [options.useNativeCanonize] - Whether to use a native\n   *   canonize algorithm.\n   * @param {object} [options.canonizeOptions] - Options to pass to\n   *   canonize algorithm.\n   */\n  constructor({\n    key, signer, verifier, proof, date, useNativeCanonize, canonizeOptions\n  } = {}) {\n    super({\n      type: 'Ed25519Signature2020', LDKeyClass: _digitalbazaar_ed25519_verification_key_2020__WEBPACK_IMPORTED_MODULE_2__.Ed25519VerificationKey2020,\n      contextUrl: SUITE_CONTEXT_URL,\n      key, signer, verifier, proof, date, useNativeCanonize,\n      canonizeOptions\n    });\n    // some operations may be performed with `Ed25519VerificationKey2018` or\n    // `Multikey`; so, `Ed25519VerificationKey2020` is recommended, but not\n    // strictly required\n    this.requiredKeyType = 'Ed25519VerificationKey2020';\n  }\n\n  /**\n   * Adds a signature (proofValue) field to the proof object. Called by\n   * LinkedDataSignature.createProof().\n   *\n   * @param {object} options - The options to use.\n   * @param {Uint8Array} options.verifyData - Data to be signed (extracted\n   *   from document, according to the suite's spec).\n   * @param {object} options.proof - Proof object (containing the proofPurpose,\n   *   verificationMethod, etc).\n   *\n   * @returns {Promise<object>} Resolves with the proof containing the signature\n   *   value.\n   */\n  async sign({verifyData, proof}) {\n    if(!(this.signer && typeof this.signer.sign === 'function')) {\n      throw new Error('A signer API has not been specified.');\n    }\n\n    const signatureBytes = await this.signer.sign({data: verifyData});\n    proof.proofValue =\n      MULTIBASE_BASE58BTC_HEADER + base58_universal__WEBPACK_IMPORTED_MODULE_0__.encode(signatureBytes);\n\n    return proof;\n  }\n\n  /**\n   * Verifies the proof signature against the given data.\n   *\n   * @param {object} options - The options to use.\n   * @param {Uint8Array} options.verifyData - Canonicalized hashed data.\n   * @param {object} options.verificationMethod - Key object.\n   * @param {object} options.proof - The proof to be verified.\n   *\n   * @returns {Promise<boolean>} Resolves with the verification result.\n   */\n  async verifySignature({verifyData, verificationMethod, proof}) {\n    const {proofValue} = proof;\n    if(!(proofValue && typeof proofValue === 'string')) {\n      throw new TypeError(\n        'The proof does not include a valid \"proofValue\" property.');\n    }\n    if(proofValue[0] !== MULTIBASE_BASE58BTC_HEADER) {\n      throw new Error('Only base58btc multibase encoding is supported.');\n    }\n    const signatureBytes = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(proofValue.substr(1));\n\n    let {verifier} = this;\n    if(!verifier) {\n      const key = await _digitalbazaar_ed25519_multikey__WEBPACK_IMPORTED_MODULE_1__.from(verificationMethod);\n      verifier = key.verifier();\n    }\n    return verifier.verify({data: verifyData, signature: signatureBytes});\n  }\n\n  async assertVerificationMethod({verificationMethod}) {\n    let contextUrl;\n    if(verificationMethod.type === 'Ed25519VerificationKey2020') {\n      contextUrl = SUITE_CONTEXT_URL;\n    } else {\n      throw new Error(`Unsupported key type \"${verificationMethod.type}\".`);\n    }\n    if(!_includesContext({document: verificationMethod, contextUrl})) {\n      // For DID Documents, since keys do not have their own contexts,\n      // the suite context is usually provided by the documentLoader logic\n      throw new TypeError(\n        `The verification method (key) must contain \"${contextUrl}\" context.`\n      );\n    }\n\n    // ensure verification method has not been revoked\n    if(verificationMethod.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.');\n    }\n  }\n\n  async getVerificationMethod({proof, documentLoader}) {\n    if(this.key) {\n      // This happens most often during sign() operations. For verify(),\n      // the expectation is that the verification method will be fetched\n      // by the documentLoader (below), not provided as a `key` parameter.\n      return this.key.export({publicKey: true});\n    }\n\n    let {verificationMethod} = proof;\n\n    if(typeof verificationMethod === 'object') {\n      verificationMethod = verificationMethod.id;\n    }\n\n    if(!verificationMethod) {\n      throw new Error('No \"verificationMethod\" found in proof.');\n    }\n\n    const {document} = await documentLoader(verificationMethod);\n\n    verificationMethod = typeof document === 'string' ?\n      JSON.parse(document) : document;\n\n    // for maximum compatibility, import using multikey library and convert to\n    // type `Ed25519Signature2020`\n    const key = await _digitalbazaar_ed25519_multikey__WEBPACK_IMPORTED_MODULE_1__.from(verificationMethod);\n    verificationMethod = {\n      ...await key.export({publicKey: true, includeContext: true}),\n      '@context': SUITE_CONTEXT_URL,\n      type: 'Ed25519VerificationKey2020'\n    };\n    await this.assertVerificationMethod({verificationMethod});\n\n    return verificationMethod;\n  }\n\n  async matchProof({proof, document, purpose, documentLoader}) {\n    if(!_includesContext({document, contextUrl: SUITE_CONTEXT_URL})) {\n      return false;\n    }\n\n    if(!await super.matchProof({proof, document, purpose, documentLoader})) {\n      return false;\n    }\n    if(!this.key) {\n      // no key specified, so assume this suite matches and it can be retrieved\n      return true;\n    }\n\n    const {verificationMethod} = proof;\n\n    // only match if the key specified matches the one in the proof\n    if(typeof verificationMethod === 'object') {\n      return verificationMethod.id === this.key.id;\n    }\n    return verificationMethod === this.key.id;\n  }\n}\n\n/**\n * Tests whether a provided JSON-LD document includes a context url in its\n * `@context` property.\n *\n * @param {object} options - Options hashmap.\n * @param {object} options.document - A JSON-LD document.\n * @param {string} options.contextUrl - A context url.\n *\n * @returns {boolean} Returns true if document includes context.\n */\nfunction _includesContext({document, contextUrl}) {\n  const context = document['@context'];\n  return context === contextUrl ||\n    (Array.isArray(context) && context.includes(contextUrl));\n}\n\nEd25519Signature2020.CONTEXT_URL = SUITE_CONTEXT_URL;\nEd25519Signature2020.CONTEXT = ed25519_signature_2020_context__WEBPACK_IMPORTED_MODULE_4__[\"default\"].contexts.get(SUITE_CONTEXT_URL);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-signature-2020/lib/Ed25519Signature2020.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-signature-2020/lib/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-signature-2020/lib/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519Signature2020: () => (/* reexport safe */ _Ed25519Signature2020_js__WEBPACK_IMPORTED_MODULE_1__.Ed25519Signature2020),\n/* harmony export */   suiteContext: () => (/* reexport safe */ ed25519_signature_2020_context__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var ed25519_signature_2020_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ed25519-signature-2020-context */ \"(ssr)/./node_modules/ed25519-signature-2020-context/dist/context.esm.js\");\n/* harmony import */ var _Ed25519Signature2020_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Ed25519Signature2020.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-signature-2020/lib/Ed25519Signature2020.js\");\n/*!\n * Copyright (c) 2020-2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS1zaWduYXR1cmUtMjAyMC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMwRDs7QUFFSztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9lZDI1NTE5LXNpZ25hdHVyZS0yMDIwL2xpYi9pbmRleC5qcz8xMjA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwLTIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuaW1wb3J0IHN1aXRlQ29udGV4dCBmcm9tICdlZDI1NTE5LXNpZ25hdHVyZS0yMDIwLWNvbnRleHQnO1xuXG5leHBvcnQge0VkMjU1MTlTaWduYXR1cmUyMDIwfSBmcm9tICcuL0VkMjU1MTlTaWduYXR1cmUyMDIwLmpzJztcbmV4cG9ydCB7c3VpdGVDb250ZXh0fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-signature-2020/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/Ed25519VerificationKey2020.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/Ed25519VerificationKey2020.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519VerificationKey2020: () => (/* binding */ Ed25519VerificationKey2020)\n/* harmony export */ });\n/* harmony import */ var base58_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base58-universal */ \"(ssr)/./node_modules/base58-universal/lib/index.js\");\n/* harmony import */ var base64url_universal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! base64url-universal */ \"(ssr)/./node_modules/base64url-universal/lib/index.js\");\n/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validators.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/validators.js\");\n/* harmony import */ var _ed25519_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ed25519.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/ed25519.js\");\n/* harmony import */ var crypto_ld__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! crypto-ld */ \"(ssr)/./node_modules/crypto-ld/lib/index.js\");\n/*!\n * Copyright (c) 2021-2024 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\n\n\nconst SUITE_ID = 'Ed25519VerificationKey2020';\n// multibase base58-btc header\nconst MULTIBASE_BASE58BTC_HEADER = 'z';\n// multicodec ed25519-pub header as varint\nconst MULTICODEC_ED25519_PUB_HEADER = new Uint8Array([0xed, 0x01]);\n// multicodec ed25519-priv header as varint\nconst MULTICODEC_ED25519_PRIV_HEADER = new Uint8Array([0x80, 0x26]);\n\nclass Ed25519VerificationKey2020 extends crypto_ld__WEBPACK_IMPORTED_MODULE_4__.LDKeyPair {\n  /**\n   * An implementation of the Ed25519VerificationKey2020 spec, for use with\n   * Linked Data Proofs.\n   *\n   * @see https://w3c-ccg.github.io/lds-ed25519-2020/#ed25519verificationkey2020\n   * @see https://github.com/digitalbazaar/jsonld-signatures\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.controller - Controller DID or document url.\n   * @param {string} [options.id] - The key ID. If not provided, will be\n   *   composed of controller and key fingerprint as hash fragment.\n   * @param {string} options.publicKeyMultibase - Multibase encoded public key\n   *   with a multicodec ed25519-pub varint header [0xed, 0x01].\n   * @param {string} [options.privateKeyMultibase] - Multibase private key\n   *   with a multicodec ed25519-priv varint header [0x80, 0x26].\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is considered\n   *   not revoked. Note that this mechanism is slightly different than DID\n   *   Document key revocation, where a DID controller can revoke a key from\n   *   that DID by removing it from the DID Document.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.type = SUITE_ID;\n    const {publicKeyMultibase, privateKeyMultibase} = options;\n\n    if(!publicKeyMultibase) {\n      throw new TypeError('The \"publicKeyMultibase\" property is required.');\n    }\n\n    if(!publicKeyMultibase || !_isValidKeyHeader(\n      publicKeyMultibase, MULTICODEC_ED25519_PUB_HEADER)) {\n      throw new Error(\n        '\"publicKeyMultibase\" has invalid header bytes: ' +\n        `\"${publicKeyMultibase}\".`);\n    }\n\n    if(privateKeyMultibase && !_isValidKeyHeader(\n      privateKeyMultibase, MULTICODEC_ED25519_PRIV_HEADER)) {\n      throw new Error('\"privateKeyMultibase\" has invalid header bytes.');\n    }\n\n    // assign valid key values\n    this.publicKeyMultibase = publicKeyMultibase;\n    this.privateKeyMultibase = privateKeyMultibase;\n\n    // set key identifier if controller is provided\n    if(this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n    // check that the passed in keyBytes are 32 bytes\n    (0,_validators_js__WEBPACK_IMPORTED_MODULE_2__.assertKeyBytes)({\n      bytes: this._publicKeyBuffer,\n      code: 'invalidPublicKeyLength',\n      expectedLength: 32\n    });\n  }\n\n  /**\n   * Creates an Ed25519 Key Pair from an existing serialized key pair.\n   *\n   * @param {object} options - Key pair options (see constructor).\n   * @example\n   * > const keyPair = await Ed25519VerificationKey2020.from({\n   * controller: 'did:ex:1234',\n   * type: 'Ed25519VerificationKey2020',\n   * publicKeyMultibase,\n   * privateKeyMultibase\n   * });\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} An Ed25519 Key Pair.\n   */\n  static async from(options) {\n    if(options.type === 'Ed25519VerificationKey2018') {\n      return Ed25519VerificationKey2020.fromEd25519VerificationKey2018(options);\n    }\n    if(options.type === 'JsonWebKey' || options.type === 'JsonWebKey2020') {\n      return Ed25519VerificationKey2020.fromJsonWebKey(options);\n    }\n    return new Ed25519VerificationKey2020(options);\n  }\n\n  /**\n   * Instance creation method for backwards compatibility with the\n   * `Ed25519VerificationKey2018` key suite.\n   *\n   * @see https://github.com/digitalbazaar/ed25519-verification-key-2018\n   * @typedef {object} Ed25519VerificationKey2018\n   * @param {Ed25519VerificationKey2018} keyPair - Ed25519 2018 suite key pair.\n   *\n   * @returns {Ed25519VerificationKey2020} - 2020 suite instance.\n   */\n  static fromEd25519VerificationKey2018({keyPair} = {}) {\n    const publicKeyMultibase = _encodeMbKey(\n      MULTICODEC_ED25519_PUB_HEADER, base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(keyPair.publicKeyBase58));\n    const keyPair2020 = new Ed25519VerificationKey2020({\n      id: keyPair.id,\n      controller: keyPair.controller,\n      publicKeyMultibase\n    });\n\n    if(keyPair.privateKeyBase58) {\n      keyPair2020.privateKeyMultibase = _encodeMbKey(\n        MULTICODEC_ED25519_PRIV_HEADER,\n        base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(keyPair.privateKeyBase58));\n    }\n\n    return keyPair2020;\n  }\n\n  /**\n   * Creates a key pair instance (public key only) from a JsonWebKey2020\n   * object.\n   *\n   * @see https://w3c-ccg.github.io/lds-jws2020/#json-web-key-2020\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.id - Key id.\n   * @param {string} options.type - Key suite type.\n   * @param {string} options.controller - Key controller.\n   * @param {object} options.publicKeyJwk - JWK object.\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} Resolves with key pair.\n   */\n  static fromJsonWebKey2020({id, type, controller, publicKeyJwk} = {}) {\n    if(type !== 'JsonWebKey2020') {\n      throw new TypeError(`Invalid key type: \"${type}\".`);\n    }\n    return Ed25519VerificationKey2020.fromJsonWebKey({\n      id, type, controller, publicKeyJwk\n    });\n  }\n\n  /**\n   * Creates a key pair instance (public key only) from a JsonWebKey object.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.id - Key id.\n   * @param {string} options.type - Key suite type.\n   * @param {string} options.controller - Key controller.\n   * @param {object} options.publicKeyJwk - JWK object.\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} Resolves with key pair.\n   */\n  static fromJsonWebKey({id, type, controller, publicKeyJwk} = {}) {\n    if(!(type === 'JsonWebKey' || type === 'JsonWebKey2020')) {\n      throw new TypeError(`Invalid key type: \"${type}\".`);\n    }\n    if(!publicKeyJwk) {\n      throw new TypeError('\"publicKeyJwk\" property is required.');\n    }\n    const {kty, crv} = publicKeyJwk;\n    if(kty !== 'OKP') {\n      throw new TypeError('\"kty\" is required to be \"OKP\".');\n    }\n    if(crv !== 'Ed25519') {\n      throw new TypeError('\"crv\" is required to be \"Ed25519\".');\n    }\n    const {x: publicKeyBase64Url} = publicKeyJwk;\n    const publicKeyMultibase = _encodeMbKey(\n      MULTICODEC_ED25519_PUB_HEADER,\n      base64url_universal__WEBPACK_IMPORTED_MODULE_1__.decode(publicKeyBase64Url));\n\n    return Ed25519VerificationKey2020.from({\n      id, controller, publicKeyMultibase\n    });\n  }\n\n  /**\n   * Generates a KeyPair with an optional deterministic seed.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {Uint8Array} [options.seed] - A 32-byte array seed for a\n   *   deterministic key.\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} Resolves with generated\n   *   public/private key pair.\n   */\n  static async generate({seed, ...keyPairOptions} = {}) {\n    let keyObject;\n    if(seed) {\n      keyObject = await _ed25519_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].generateKeyPairFromSeed(seed);\n    } else {\n      keyObject = await _ed25519_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].generateKeyPair();\n    }\n    const publicKeyMultibase =\n      _encodeMbKey(MULTICODEC_ED25519_PUB_HEADER, keyObject.publicKey);\n\n    const privateKeyMultibase =\n      _encodeMbKey(MULTICODEC_ED25519_PRIV_HEADER, keyObject.secretKey);\n\n    return new Ed25519VerificationKey2020({\n      publicKeyMultibase,\n      privateKeyMultibase,\n      ...keyPairOptions\n    });\n  }\n\n  /**\n   * Creates an instance of Ed25519VerificationKey2020 from a key fingerprint.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.fingerprint - Multibase encoded key fingerprint.\n   *\n   * @returns {Ed25519VerificationKey2020} Returns key pair instance (with\n   *   public key only).\n   */\n  static fromFingerprint({fingerprint} = {}) {\n    return new Ed25519VerificationKey2020({publicKeyMultibase: fingerprint});\n  }\n\n  /**\n   * @returns {Uint8Array} Public key bytes.\n   */\n  get _publicKeyBuffer() {\n    if(!this.publicKeyMultibase) {\n      return;\n    }\n    // remove multibase header\n    const publicKeyMulticodec =\n      base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(this.publicKeyMultibase.substr(1));\n    // remove multicodec header\n    const publicKeyBytes =\n      publicKeyMulticodec.slice(MULTICODEC_ED25519_PUB_HEADER.length);\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * @returns {Uint8Array} Private key bytes.\n   */\n  get _privateKeyBuffer() {\n    if(!this.privateKeyMultibase) {\n      return;\n    }\n    // remove multibase header\n    const privateKeyMulticodec =\n      base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(this.privateKeyMultibase.substr(1));\n    // remove multicodec header\n    const privateKeyBytes =\n      privateKeyMulticodec.slice(MULTICODEC_ED25519_PRIV_HEADER.length);\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   *\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    return this.publicKeyMultibase;\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair\n   * and other information that JSON-LD Signatures can use to form a proof.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   * @param {boolean} [options.includeContext] - Include JSON-LD context?\n   *\n   * @returns {object} A plain js object that's ready for serialization\n   *   (to JSON, etc), for use in DIDs, Linked Data Proofs, etc.\n   */\n  export({publicKey = false, privateKey = false, includeContext = false} = {}) {\n    if(!(publicKey || privateKey)) {\n      throw new TypeError(\n        'Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const exportedKey = {\n      id: this.id,\n      type: this.type\n    };\n    if(includeContext) {\n      exportedKey['@context'] = Ed25519VerificationKey2020.SUITE_CONTEXT;\n    }\n    if(this.controller) {\n      exportedKey.controller = this.controller;\n    }\n    if(publicKey) {\n      exportedKey.publicKeyMultibase = this.publicKeyMultibase;\n    }\n    if(privateKey) {\n      exportedKey.privateKeyMultibase = this.privateKeyMultibase;\n    }\n    if(this.revoked) {\n      exportedKey.revoked = this.revoked;\n    }\n    return exportedKey;\n  }\n\n  /**\n   * Returns the JWK representation of this key pair.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc8037\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Include public key?\n   * @param {boolean} [options.privateKey] - Include private key?\n   *\n   * @returns {{kty: string, crv: string, x: string, d: string}} JWK\n   *   representation.\n   */\n  toJwk({publicKey = true, privateKey = false} = {}) {\n    if(!(publicKey || privateKey)) {\n      throw TypeError('Either a \"publicKey\" or a \"privateKey\" is required.');\n    }\n    const jwk = {crv: 'Ed25519', kty: 'OKP'};\n    if(publicKey) {\n      jwk.x = base64url_universal__WEBPACK_IMPORTED_MODULE_1__.encode(this._publicKeyBuffer);\n    }\n    if(privateKey) {\n      jwk.d = base64url_universal__WEBPACK_IMPORTED_MODULE_1__.encode(this._privateKeyBuffer);\n    }\n    return jwk;\n  }\n\n  /**\n   * @see https://datatracker.ietf.org/doc/html/rfc8037#appendix-A.3\n   *\n   * @returns {Promise<string>} JWK Thumbprint.\n   */\n  async jwkThumbprint() {\n    const publicKey = base64url_universal__WEBPACK_IMPORTED_MODULE_1__.encode(this._publicKeyBuffer);\n    const serialized = `{\"crv\":\"Ed25519\",\"kty\":\"OKP\",\"x\":\"${publicKey}\"}`;\n    const data = new TextEncoder().encode(serialized);\n    return base64url_universal__WEBPACK_IMPORTED_MODULE_1__.encode(\n      new Uint8Array(await _ed25519_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].sha256digest({data})));\n  }\n\n  /**\n   * Returns the JsonWebKey representation of this key pair.\n   *\n   * @returns {Promise<object>} JsonWebKey representation.\n   */\n  async toJsonWebKey() {\n    return {\n      '@context': 'https://w3id.org/security/jwk/v1',\n      id: this.controller + '#' + await this.jwkThumbprint(),\n      type: 'JsonWebKey',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk({publicKey: true})\n    };\n  }\n\n  /**\n   * Returns the JsonWebKey2020 representation of this key pair.\n   *\n   * @see https://w3c-ccg.github.io/lds-jws2020/#json-web-key-2020\n   *\n   * @returns {Promise<object>} JsonWebKey2020 representation.\n   */\n  async toJsonWebKey2020() {\n    return {\n      '@context': 'https://w3id.org/security/jws/v1',\n      id: this.controller + '#' + await this.jwkThumbprint(),\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk({publicKey: true})\n    };\n  }\n\n  /**\n   * Tests whether the fingerprint was generated from a given key pair.\n   *\n   * @example\n   * > edKeyPair.verifyFingerprint({fingerprint: 'z6Mk2S2Q...6MkaFJewa'});\n   * {valid: true};\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.fingerprint - A public key fingerprint.\n   *\n   * @returns {{valid: boolean, error: *}} Result of verification.\n   */\n  verifyFingerprint({fingerprint} = {}) {\n    // fingerprint should have multibase base58-btc header\n    if(!(typeof fingerprint === 'string' &&\n      fingerprint[0] === MULTIBASE_BASE58BTC_HEADER)) {\n      return {\n        error: new Error('\"fingerprint\" must be a multibase encoded string.'),\n        valid: false\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(fingerprint.substr(1));\n      if(!fingerprintBuffer) {\n        throw new TypeError('Invalid encoding of fingerprint.');\n      }\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n\n    const buffersEqual = _isEqualBuffer(this._publicKeyBuffer,\n      fingerprintBuffer.slice(2));\n\n    // validate the first two multicodec bytes\n    const valid =\n      fingerprintBuffer[0] === MULTICODEC_ED25519_PUB_HEADER[0] &&\n      fingerprintBuffer[1] === MULTICODEC_ED25519_PUB_HEADER[1] &&\n      buffersEqual;\n    if(!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false\n      };\n    }\n    return {valid};\n  }\n\n  signer() {\n    const privateKeyBuffer = this._privateKeyBuffer;\n\n    return {\n      async sign({data}) {\n        if(!privateKeyBuffer) {\n          throw new Error('A private key is not available for signing.');\n        }\n        return _ed25519_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].sign(privateKeyBuffer, data);\n      },\n      id: this.id\n    };\n  }\n\n  verifier() {\n    const publicKeyBuffer = this._publicKeyBuffer;\n\n    return {\n      async verify({data, signature}) {\n        if(!publicKeyBuffer) {\n          throw new Error('A public key is not available for verifying.');\n        }\n        return _ed25519_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].verify(publicKeyBuffer, data, signature);\n      },\n      id: this.id\n    };\n  }\n}\n// Used by CryptoLD harness for dispatching.\nEd25519VerificationKey2020.suite = SUITE_ID;\n// Used by CryptoLD harness's fromKeyId() method.\nEd25519VerificationKey2020.SUITE_CONTEXT =\n  'https://w3id.org/security/suites/ed25519-2020/v1';\n\n// check to ensure that two buffers are byte-for-byte equal\n// WARNING: this function must only be used to check public information as\n//          timing attacks can be used for non-constant time checks on\n//          secret information.\nfunction _isEqualBuffer(buf1, buf2) {\n  if(buf1.length !== buf2.length) {\n    return false;\n  }\n  for(let i = 0; i < buf1.length; i++) {\n    if(buf1[i] !== buf2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// check a multibase key for an expected header\nfunction _isValidKeyHeader(multibaseKey, expectedHeader) {\n  if(!(typeof multibaseKey === 'string' &&\n    multibaseKey[0] === MULTIBASE_BASE58BTC_HEADER)) {\n    return false;\n  }\n\n  const keyBytes = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(multibaseKey.slice(1));\n  return expectedHeader.every((val, i) => keyBytes[i] === val);\n}\n\n// encode a multibase base58-btc multicodec key\nfunction _encodeMbKey(header, key) {\n  const mbKey = new Uint8Array(header.length + key.length);\n\n  mbKey.set(header);\n  mbKey.set(key, header.length);\n\n  return MULTIBASE_BASE58BTC_HEADER + base58_universal__WEBPACK_IMPORTED_MODULE_0__.encode(mbKey);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/Ed25519VerificationKey2020.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/ed25519.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/ed25519.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validators.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/validators.js\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:util */ \"node:util\");\n/*!\n * Copyright (c) 2020-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\nconst randomBytesAsync = (0,node_util__WEBPACK_IMPORTED_MODULE_2__.promisify)(node_crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes);\n\n// used to export node's public keys to buffers\nconst publicKeyEncoding = {format: 'der', type: 'spki'};\n// used to turn private key bytes into a buffer in DER format\nconst DER_PRIVATE_KEY_PREFIX = Buffer.from(\n  '302e020100300506032b657004220420', 'hex');\n// used to turn public key bytes into a buffer in DER format\nconst DER_PUBLIC_KEY_PREFIX = Buffer.from('302a300506032b6570032100', 'hex');\n\nconst api = {\n  /**\n   * Generates a key using a 32 byte Uint8Array.\n   *\n   * @param {Uint8Array} seedBytes - The bytes for the private key.\n   *\n   * @returns {object} The object with the public and private key material.\n  */\n  async generateKeyPairFromSeed(seedBytes) {\n    const privateKey = await (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey)({\n      // node is more than happy to create a new private key using a DER\n      key: privateKeyDerEncode({seedBytes}),\n      format: 'der',\n      type: 'pkcs8'\n    });\n    // this expects either a PEM encoded key or a node privateKeyObject\n    const publicKey = await (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPublicKey)(privateKey);\n    const publicKeyBuffer = publicKey.export(publicKeyEncoding);\n    const publicKeyBytes = getKeyMaterial(publicKeyBuffer);\n    return {\n      publicKey: publicKeyBytes,\n      secretKey: Buffer.concat([seedBytes, publicKeyBytes])\n    };\n  },\n  // generates an ed25519 key using a random seed\n  async generateKeyPair() {\n    const seed = await randomBytesAsync(32);\n    return api.generateKeyPairFromSeed(seed);\n  },\n  async sign(privateKeyBytes, data) {\n    const privateKey = await (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey)({\n      key: privateKeyDerEncode({privateKeyBytes}),\n      format: 'der',\n      type: 'pkcs8'\n    });\n    return (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.sign)(null, data, privateKey);\n  },\n  async verify(publicKeyBytes, data, signature) {\n    const publicKey = await (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPublicKey)({\n      key: publicKeyDerEncode({publicKeyBytes}),\n      format: 'der',\n      type: 'spki'\n    });\n    return (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.verify)(null, data, publicKey, signature);\n  },\n  async sha256digest({data}) {\n    return (0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)('sha256').update(data).digest();\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (api);\n\n/**\n * The key material is the part of the buffer after the DER Prefix.\n *\n * @param {Buffer} buffer - A DER encoded key buffer.\n *\n * @throws {Error} If the buffer does not contain a valid DER Prefix.\n *\n * @returns {Buffer} The key material part of the Buffer.\n*/\nfunction getKeyMaterial(buffer) {\n  if(buffer.indexOf(DER_PUBLIC_KEY_PREFIX) === 0) {\n    return buffer.slice(DER_PUBLIC_KEY_PREFIX.length, buffer.length);\n  }\n  if(buffer.indexOf(DER_PRIVATE_KEY_PREFIX) === 0) {\n    return buffer.slice(DER_PRIVATE_KEY_PREFIX.length, buffer.length);\n  }\n  throw new Error('Expected Buffer to match Ed25519 Public or Private Prefix');\n}\n\n/**\n * Takes a Buffer or Uint8Array with the raw private key and encodes it\n * in DER-encoded PKCS#8 format.\n * Allows Uint8Arrays to be interoperable with node's crypto functions.\n *\n * @param {object} options - Options to use.\n * @param {Buffer} [options.privateKeyBytes] - Required if no seedBytes.\n * @param {Buffer} [options.seedBytes] - Required if no privateKeyBytes.\n *\n * @throws {TypeError} Throws if the supplied buffer is not of the right size\n *  or not a Uint8Array or Buffer.\n *\n * @returns {Buffer} DER private key prefix + key bytes.\n*/\nfunction privateKeyDerEncode({privateKeyBytes, seedBytes}) {\n  if(!(privateKeyBytes || seedBytes)) {\n    throw new TypeError('`privateKeyBytes` or `seedBytes` is required.');\n  }\n  if(!privateKeyBytes) {\n    (0,_validators_js__WEBPACK_IMPORTED_MODULE_1__.assertKeyBytes)({\n      bytes: seedBytes,\n      expectedLength: 32\n    });\n  }\n  if(!seedBytes) {\n    (0,_validators_js__WEBPACK_IMPORTED_MODULE_1__.assertKeyBytes)({\n      bytes: privateKeyBytes,\n      expectedLength: 64\n    });\n  }\n  let p;\n  if(seedBytes) {\n    p = seedBytes;\n  } else {\n    // extract the first 32 bytes of the 64 byte private key representation\n    p = privateKeyBytes.slice(0, 32);\n  }\n  return Buffer.concat([DER_PRIVATE_KEY_PREFIX, p]);\n}\n\n/**\n * Takes a Uint8Array of public key bytes and encodes it in DER-encoded\n * SubjectPublicKeyInfo (SPKI) format.\n * Allows Uint8Arrays to be interoperable with node's crypto functions.\n *\n * @param {object} options - Options to use.\n * @param {Uint8Array} options.publicKeyBytes - The keyBytes.\n *\n * @throws {TypeError} Throws if the bytes are not Uint8Array or of length 32.\n *\n * @returns {Buffer} DER Public key Prefix + key bytes.\n*/\nfunction publicKeyDerEncode({publicKeyBytes}) {\n  (0,_validators_js__WEBPACK_IMPORTED_MODULE_1__.assertKeyBytes)({\n    bytes: publicKeyBytes,\n    expectedLength: 32,\n    code: 'invalidPublicKeyLength'\n  });\n  return Buffer.concat([DER_PUBLIC_KEY_PREFIX, publicKeyBytes]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS12ZXJpZmljYXRpb24ta2V5LTIwMjAvbGliL2VkMjU1MTkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQVFxQjtBQUMwQjtBQUNYOztBQUVwQyx5QkFBeUIsb0RBQVMsQ0FBQyxvREFBVzs7QUFFOUM7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsNkJBQTZCLDZEQUFnQjtBQUM3QztBQUNBLGdDQUFnQyxVQUFVO0FBQzFDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw0QkFBNEIsNERBQWU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsNkJBQTZCLDZEQUFnQjtBQUM3QyxnQ0FBZ0MsZ0JBQWdCO0FBQ2hEO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsV0FBVyxpREFBSTtBQUNmLEdBQUc7QUFDSDtBQUNBLDRCQUE0Qiw0REFBZTtBQUMzQywrQkFBK0IsZUFBZTtBQUM5QztBQUNBO0FBQ0EsS0FBSztBQUNMLFdBQVcsbURBQU07QUFDakIsR0FBRztBQUNILHNCQUFzQixLQUFLO0FBQzNCLFdBQVcsdURBQVU7QUFDckI7QUFDQTs7QUFFQSxpRUFBZSxHQUFHLEVBQUM7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLDhCQUE4QiwyQkFBMkI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDhEQUFjO0FBQ2xCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUksOERBQWM7QUFDbEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsNkJBQTZCLGVBQWU7QUFDNUMsRUFBRSw4REFBYztBQUNoQjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9lZDI1NTE5LXZlcmlmaWNhdGlvbi1rZXktMjAyMC9saWIvZWQyNTUxOS5qcz83M2MyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwLTIwMjIgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuaW1wb3J0IHtcbiAgc2lnbixcbiAgdmVyaWZ5LFxuICBjcmVhdGVIYXNoLFxuICBjcmVhdGVQcml2YXRlS2V5LFxuICBjcmVhdGVQdWJsaWNLZXksXG4gIHJhbmRvbUJ5dGVzXG59IGZyb20gJ25vZGU6Y3J5cHRvJztcbmltcG9ydCB7YXNzZXJ0S2V5Qnl0ZXN9IGZyb20gJy4vdmFsaWRhdG9ycy5qcyc7XG5pbXBvcnQge3Byb21pc2lmeX0gZnJvbSAnbm9kZTp1dGlsJztcblxuY29uc3QgcmFuZG9tQnl0ZXNBc3luYyA9IHByb21pc2lmeShyYW5kb21CeXRlcyk7XG5cbi8vIHVzZWQgdG8gZXhwb3J0IG5vZGUncyBwdWJsaWMga2V5cyB0byBidWZmZXJzXG5jb25zdCBwdWJsaWNLZXlFbmNvZGluZyA9IHtmb3JtYXQ6ICdkZXInLCB0eXBlOiAnc3BraSd9O1xuLy8gdXNlZCB0byB0dXJuIHByaXZhdGUga2V5IGJ5dGVzIGludG8gYSBidWZmZXIgaW4gREVSIGZvcm1hdFxuY29uc3QgREVSX1BSSVZBVEVfS0VZX1BSRUZJWCA9IEJ1ZmZlci5mcm9tKFxuICAnMzAyZTAyMDEwMDMwMDUwNjAzMmI2NTcwMDQyMjA0MjAnLCAnaGV4Jyk7XG4vLyB1c2VkIHRvIHR1cm4gcHVibGljIGtleSBieXRlcyBpbnRvIGEgYnVmZmVyIGluIERFUiBmb3JtYXRcbmNvbnN0IERFUl9QVUJMSUNfS0VZX1BSRUZJWCA9IEJ1ZmZlci5mcm9tKCczMDJhMzAwNTA2MDMyYjY1NzAwMzIxMDAnLCAnaGV4Jyk7XG5cbmNvbnN0IGFwaSA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIGtleSB1c2luZyBhIDMyIGJ5dGUgVWludDhBcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBzZWVkQnl0ZXMgLSBUaGUgYnl0ZXMgZm9yIHRoZSBwcml2YXRlIGtleS5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gVGhlIG9iamVjdCB3aXRoIHRoZSBwdWJsaWMgYW5kIHByaXZhdGUga2V5IG1hdGVyaWFsLlxuICAqL1xuICBhc3luYyBnZW5lcmF0ZUtleVBhaXJGcm9tU2VlZChzZWVkQnl0ZXMpIHtcbiAgICBjb25zdCBwcml2YXRlS2V5ID0gYXdhaXQgY3JlYXRlUHJpdmF0ZUtleSh7XG4gICAgICAvLyBub2RlIGlzIG1vcmUgdGhhbiBoYXBweSB0byBjcmVhdGUgYSBuZXcgcHJpdmF0ZSBrZXkgdXNpbmcgYSBERVJcbiAgICAgIGtleTogcHJpdmF0ZUtleURlckVuY29kZSh7c2VlZEJ5dGVzfSksXG4gICAgICBmb3JtYXQ6ICdkZXInLFxuICAgICAgdHlwZTogJ3BrY3M4J1xuICAgIH0pO1xuICAgIC8vIHRoaXMgZXhwZWN0cyBlaXRoZXIgYSBQRU0gZW5jb2RlZCBrZXkgb3IgYSBub2RlIHByaXZhdGVLZXlPYmplY3RcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBhd2FpdCBjcmVhdGVQdWJsaWNLZXkocHJpdmF0ZUtleSk7XG4gICAgY29uc3QgcHVibGljS2V5QnVmZmVyID0gcHVibGljS2V5LmV4cG9ydChwdWJsaWNLZXlFbmNvZGluZyk7XG4gICAgY29uc3QgcHVibGljS2V5Qnl0ZXMgPSBnZXRLZXlNYXRlcmlhbChwdWJsaWNLZXlCdWZmZXIpO1xuICAgIHJldHVybiB7XG4gICAgICBwdWJsaWNLZXk6IHB1YmxpY0tleUJ5dGVzLFxuICAgICAgc2VjcmV0S2V5OiBCdWZmZXIuY29uY2F0KFtzZWVkQnl0ZXMsIHB1YmxpY0tleUJ5dGVzXSlcbiAgICB9O1xuICB9LFxuICAvLyBnZW5lcmF0ZXMgYW4gZWQyNTUxOSBrZXkgdXNpbmcgYSByYW5kb20gc2VlZFxuICBhc3luYyBnZW5lcmF0ZUtleVBhaXIoKSB7XG4gICAgY29uc3Qgc2VlZCA9IGF3YWl0IHJhbmRvbUJ5dGVzQXN5bmMoMzIpO1xuICAgIHJldHVybiBhcGkuZ2VuZXJhdGVLZXlQYWlyRnJvbVNlZWQoc2VlZCk7XG4gIH0sXG4gIGFzeW5jIHNpZ24ocHJpdmF0ZUtleUJ5dGVzLCBkYXRhKSB7XG4gICAgY29uc3QgcHJpdmF0ZUtleSA9IGF3YWl0IGNyZWF0ZVByaXZhdGVLZXkoe1xuICAgICAga2V5OiBwcml2YXRlS2V5RGVyRW5jb2RlKHtwcml2YXRlS2V5Qnl0ZXN9KSxcbiAgICAgIGZvcm1hdDogJ2RlcicsXG4gICAgICB0eXBlOiAncGtjczgnXG4gICAgfSk7XG4gICAgcmV0dXJuIHNpZ24obnVsbCwgZGF0YSwgcHJpdmF0ZUtleSk7XG4gIH0sXG4gIGFzeW5jIHZlcmlmeShwdWJsaWNLZXlCeXRlcywgZGF0YSwgc2lnbmF0dXJlKSB7XG4gICAgY29uc3QgcHVibGljS2V5ID0gYXdhaXQgY3JlYXRlUHVibGljS2V5KHtcbiAgICAgIGtleTogcHVibGljS2V5RGVyRW5jb2RlKHtwdWJsaWNLZXlCeXRlc30pLFxuICAgICAgZm9ybWF0OiAnZGVyJyxcbiAgICAgIHR5cGU6ICdzcGtpJ1xuICAgIH0pO1xuICAgIHJldHVybiB2ZXJpZnkobnVsbCwgZGF0YSwgcHVibGljS2V5LCBzaWduYXR1cmUpO1xuICB9LFxuICBhc3luYyBzaGEyNTZkaWdlc3Qoe2RhdGF9KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXBpO1xuXG4vKipcbiAqIFRoZSBrZXkgbWF0ZXJpYWwgaXMgdGhlIHBhcnQgb2YgdGhlIGJ1ZmZlciBhZnRlciB0aGUgREVSIFByZWZpeC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIC0gQSBERVIgZW5jb2RlZCBrZXkgYnVmZmVyLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgYnVmZmVyIGRvZXMgbm90IGNvbnRhaW4gYSB2YWxpZCBERVIgUHJlZml4LlxuICpcbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFRoZSBrZXkgbWF0ZXJpYWwgcGFydCBvZiB0aGUgQnVmZmVyLlxuKi9cbmZ1bmN0aW9uIGdldEtleU1hdGVyaWFsKGJ1ZmZlcikge1xuICBpZihidWZmZXIuaW5kZXhPZihERVJfUFVCTElDX0tFWV9QUkVGSVgpID09PSAwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZShERVJfUFVCTElDX0tFWV9QUkVGSVgubGVuZ3RoLCBidWZmZXIubGVuZ3RoKTtcbiAgfVxuICBpZihidWZmZXIuaW5kZXhPZihERVJfUFJJVkFURV9LRVlfUFJFRklYKSA9PT0gMCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoREVSX1BSSVZBVEVfS0VZX1BSRUZJWC5sZW5ndGgsIGJ1ZmZlci5sZW5ndGgpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgQnVmZmVyIHRvIG1hdGNoIEVkMjU1MTkgUHVibGljIG9yIFByaXZhdGUgUHJlZml4Jyk7XG59XG5cbi8qKlxuICogVGFrZXMgYSBCdWZmZXIgb3IgVWludDhBcnJheSB3aXRoIHRoZSByYXcgcHJpdmF0ZSBrZXkgYW5kIGVuY29kZXMgaXRcbiAqIGluIERFUi1lbmNvZGVkIFBLQ1MjOCBmb3JtYXQuXG4gKiBBbGxvd3MgVWludDhBcnJheXMgdG8gYmUgaW50ZXJvcGVyYWJsZSB3aXRoIG5vZGUncyBjcnlwdG8gZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byB1c2UuXG4gKiBAcGFyYW0ge0J1ZmZlcn0gW29wdGlvbnMucHJpdmF0ZUtleUJ5dGVzXSAtIFJlcXVpcmVkIGlmIG5vIHNlZWRCeXRlcy5cbiAqIEBwYXJhbSB7QnVmZmVyfSBbb3B0aW9ucy5zZWVkQnl0ZXNdIC0gUmVxdWlyZWQgaWYgbm8gcHJpdmF0ZUtleUJ5dGVzLlxuICpcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gVGhyb3dzIGlmIHRoZSBzdXBwbGllZCBidWZmZXIgaXMgbm90IG9mIHRoZSByaWdodCBzaXplXG4gKiAgb3Igbm90IGEgVWludDhBcnJheSBvciBCdWZmZXIuXG4gKlxuICogQHJldHVybnMge0J1ZmZlcn0gREVSIHByaXZhdGUga2V5IHByZWZpeCArIGtleSBieXRlcy5cbiovXG5mdW5jdGlvbiBwcml2YXRlS2V5RGVyRW5jb2RlKHtwcml2YXRlS2V5Qnl0ZXMsIHNlZWRCeXRlc30pIHtcbiAgaWYoIShwcml2YXRlS2V5Qnl0ZXMgfHwgc2VlZEJ5dGVzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bwcml2YXRlS2V5Qnl0ZXNgIG9yIGBzZWVkQnl0ZXNgIGlzIHJlcXVpcmVkLicpO1xuICB9XG4gIGlmKCFwcml2YXRlS2V5Qnl0ZXMpIHtcbiAgICBhc3NlcnRLZXlCeXRlcyh7XG4gICAgICBieXRlczogc2VlZEJ5dGVzLFxuICAgICAgZXhwZWN0ZWRMZW5ndGg6IDMyXG4gICAgfSk7XG4gIH1cbiAgaWYoIXNlZWRCeXRlcykge1xuICAgIGFzc2VydEtleUJ5dGVzKHtcbiAgICAgIGJ5dGVzOiBwcml2YXRlS2V5Qnl0ZXMsXG4gICAgICBleHBlY3RlZExlbmd0aDogNjRcbiAgICB9KTtcbiAgfVxuICBsZXQgcDtcbiAgaWYoc2VlZEJ5dGVzKSB7XG4gICAgcCA9IHNlZWRCeXRlcztcbiAgfSBlbHNlIHtcbiAgICAvLyBleHRyYWN0IHRoZSBmaXJzdCAzMiBieXRlcyBvZiB0aGUgNjQgYnl0ZSBwcml2YXRlIGtleSByZXByZXNlbnRhdGlvblxuICAgIHAgPSBwcml2YXRlS2V5Qnl0ZXMuc2xpY2UoMCwgMzIpO1xuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KFtERVJfUFJJVkFURV9LRVlfUFJFRklYLCBwXSk7XG59XG5cbi8qKlxuICogVGFrZXMgYSBVaW50OEFycmF5IG9mIHB1YmxpYyBrZXkgYnl0ZXMgYW5kIGVuY29kZXMgaXQgaW4gREVSLWVuY29kZWRcbiAqIFN1YmplY3RQdWJsaWNLZXlJbmZvIChTUEtJKSBmb3JtYXQuXG4gKiBBbGxvd3MgVWludDhBcnJheXMgdG8gYmUgaW50ZXJvcGVyYWJsZSB3aXRoIG5vZGUncyBjcnlwdG8gZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byB1c2UuXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IG9wdGlvbnMucHVibGljS2V5Qnl0ZXMgLSBUaGUga2V5Qnl0ZXMuXG4gKlxuICogQHRocm93cyB7VHlwZUVycm9yfSBUaHJvd3MgaWYgdGhlIGJ5dGVzIGFyZSBub3QgVWludDhBcnJheSBvciBvZiBsZW5ndGggMzIuXG4gKlxuICogQHJldHVybnMge0J1ZmZlcn0gREVSIFB1YmxpYyBrZXkgUHJlZml4ICsga2V5IGJ5dGVzLlxuKi9cbmZ1bmN0aW9uIHB1YmxpY0tleURlckVuY29kZSh7cHVibGljS2V5Qnl0ZXN9KSB7XG4gIGFzc2VydEtleUJ5dGVzKHtcbiAgICBieXRlczogcHVibGljS2V5Qnl0ZXMsXG4gICAgZXhwZWN0ZWRMZW5ndGg6IDMyLFxuICAgIGNvZGU6ICdpbnZhbGlkUHVibGljS2V5TGVuZ3RoJ1xuICB9KTtcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW0RFUl9QVUJMSUNfS0VZX1BSRUZJWCwgcHVibGljS2V5Qnl0ZXNdKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/ed25519.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519VerificationKey2020: () => (/* reexport safe */ _Ed25519VerificationKey2020_js__WEBPACK_IMPORTED_MODULE_0__.Ed25519VerificationKey2020)\n/* harmony export */ });\n/* harmony import */ var _Ed25519VerificationKey2020_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ed25519VerificationKey2020.js */ \"(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/Ed25519VerificationKey2020.js\");\n/*!\n * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS12ZXJpZmljYXRpb24ta2V5LTIwMjAvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzJFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL2VkMjU1MTktdmVyaWZpY2F0aW9uLWtleS0yMDIwL2xpYi9pbmRleC5qcz84Yjk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbmV4cG9ydCB7RWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjB9IGZyb20gJy4vRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjAuanMnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/validators.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/validators.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertKeyBytes: () => (/* binding */ assertKeyBytes)\n/* harmony export */ });\n/*!\n * Copyright (c) 2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * Asserts that key bytes have a type of Uint8Array and a specific length.\n *\n * @throws {TypeError|SyntaxError} - Throws a Type or Syntax error.\n *\n * @param {object} options - Options to use.\n * @param {Uint8Array} options.bytes - The bytes being checked.\n * @param {number} [options.expectedLength=32] - The expected bytes length.\n * @param {string} [options.code] - An optional code for the error.\n *\n * @returns {undefined} Returns on success throws on error.\n */\nfunction assertKeyBytes({bytes, expectedLength = 32, code}) {\n  if(!(bytes instanceof Uint8Array)) {\n    throw new TypeError('\"bytes\" must be a Uint8Array.');\n  }\n  if(bytes.length !== expectedLength) {\n    const error = new Error(\n      `\"bytes\" must be a ${expectedLength}-byte Uint8Array.`);\n    // we need DataError for invalid byte length\n    error.name = 'DataError';\n    // add the error code from the did:key spec if provided\n    if(code) {\n      error.code = code;\n    }\n    throw error;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvZWQyNTUxOS12ZXJpZmljYXRpb24ta2V5LTIwMjAvbGliL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVCQUF1QjtBQUNuQztBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFlBQVk7QUFDdkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNPLHlCQUF5QixpQ0FBaUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixlQUFlO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9lZDI1NTE5LXZlcmlmaWNhdGlvbi1rZXktMjAyMC9saWIvdmFsaWRhdG9ycy5qcz8wZTYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIyIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQga2V5IGJ5dGVzIGhhdmUgYSB0eXBlIG9mIFVpbnQ4QXJyYXkgYW5kIGEgc3BlY2lmaWMgbGVuZ3RoLlxuICpcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcnxTeW50YXhFcnJvcn0gLSBUaHJvd3MgYSBUeXBlIG9yIFN5bnRheCBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gdXNlLlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBvcHRpb25zLmJ5dGVzIC0gVGhlIGJ5dGVzIGJlaW5nIGNoZWNrZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZXhwZWN0ZWRMZW5ndGg9MzJdIC0gVGhlIGV4cGVjdGVkIGJ5dGVzIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb2RlXSAtIEFuIG9wdGlvbmFsIGNvZGUgZm9yIHRoZSBlcnJvci5cbiAqXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfSBSZXR1cm5zIG9uIHN1Y2Nlc3MgdGhyb3dzIG9uIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0S2V5Qnl0ZXMoe2J5dGVzLCBleHBlY3RlZExlbmd0aCA9IDMyLCBjb2RlfSkge1xuICBpZighKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ5dGVzXCIgbXVzdCBiZSBhIFVpbnQ4QXJyYXkuJyk7XG4gIH1cbiAgaWYoYnl0ZXMubGVuZ3RoICE9PSBleHBlY3RlZExlbmd0aCkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgYFwiYnl0ZXNcIiBtdXN0IGJlIGEgJHtleHBlY3RlZExlbmd0aH0tYnl0ZSBVaW50OEFycmF5LmApO1xuICAgIC8vIHdlIG5lZWQgRGF0YUVycm9yIGZvciBpbnZhbGlkIGJ5dGUgbGVuZ3RoXG4gICAgZXJyb3IubmFtZSA9ICdEYXRhRXJyb3InO1xuICAgIC8vIGFkZCB0aGUgZXJyb3IgY29kZSBmcm9tIHRoZSBkaWQ6a2V5IHNwZWMgaWYgcHJvdmlkZWRcbiAgICBpZihjb2RlKSB7XG4gICAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgICB9XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/lru-memoize/lib/LruCache.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@digitalbazaar/lru-memoize/lib/LruCache.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LruCache: () => (/* binding */ LruCache)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/@digitalbazaar/lru-memoize/node_modules/lru-cache/index.js\");\n/*!\n * Copyright (c) 2020-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n/**\n * LruCache uses the npm module `lru-cache` to memoize promises.\n *\n * @see https://www.npmjs.com/package/lru-cache\n * @see https://en.wikipedia.org/wiki/Memoization\n * @param {object} cacheOptions - Options for `lru-cache`.\n *   See the npm docs for more options.\n * @param {number} [cacheOptions.max] - The max size of the cache.\n * @param {number} [cacheOptions.maxAge] - The maxAge of an item in ms.\n * @param {boolean} [cacheOptions.updateAgeOnGet=false] - When using\n *   time-expiring entries with maxAge, setting this to true will make\n *   each entry's effective time update to the current time whenever it is\n *   retrieved from cache, thereby extending the expiration date of the entry.\n  * @param {boolean} [cacheOptions.disposeOnSettle=false] - When set to true\n *   entries will be removed from cache once they've settled. This is to only\n *   be used when one needs a promise queue.\n *\n * @returns {LruCache} The class.\n*/\nclass LruCache {\n  constructor(cacheOptions = {}) {\n    this.options = cacheOptions;\n    this.cache = new lru_cache__WEBPACK_IMPORTED_MODULE_0__(cacheOptions);\n  }\n\n  /**\n   * Deletes a key from the LRU cache.\n   *\n   * @param {string} key - A key for the cache.\n   *\n   * @returns {undefined}\n  */\n  delete(key) {\n    return this.cache.del(key);\n  }\n\n  /**\n   * Memoizes a promise via an LRU cache.\n   *\n   * @param {object} options - Options to use.\n   * @param {string} options.key - A key for the cache.\n   * @param {Function<Promise>} options.fn - A Function that returns a\n   *   promise to memoize.\n   * @param {object} options.options - The LRU cache options to pass\n   *   if setting the value in the cache; note: only those options supported\n   *   by the underlying LRU cache instance will be supported.\n   *\n   * @returns {Promise} - The result of the memoized promise.\n  */\n  async memoize({key, fn, options = {}} = {}) {\n    let promise = this.cache.get(key);\n    if(promise) {\n      return promise;\n    }\n\n    // cache miss\n    const cacheOptions = {...this.options, ...options};\n    promise = fn();\n    // this version only supports `maxAge` and `disposeOnSettle`; a future\n    // version will support more cache options\n    const {maxAge} = cacheOptions;\n    this.cache.set(key, promise, maxAge);\n\n    try {\n      await promise;\n    } catch(e) {\n      // if the promise rejects, delete it if the cache entry hasn't changed\n      if(promise === this.cache.get(key)) {\n        this.cache.del(key);\n      }\n      throw e;\n    }\n\n    // dispose promise once settled (provided the cache entry hasn't changed)\n    if(cacheOptions.disposeOnSettle && promise === this.cache.get(key)) {\n      this.cache.del(key);\n    }\n\n    return promise;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvbHJ1LW1lbW9pemUvbGliL0xydUNhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzRCOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNPO0FBQ1AsK0JBQStCO0FBQy9CO0FBQ0EscUJBQXFCLHNDQUFHO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLDBDQUEwQztBQUMxQztBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0EsaUJBQWlCLHVCQUF1QixJQUFJO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0EsV0FBVyxRQUFRO0FBQ25COztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci9scnUtbWVtb2l6ZS9saWIvTHJ1Q2FjaGUuanM/YzliZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMC0yMDIzIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbmltcG9ydCBMUlUgZnJvbSAnbHJ1LWNhY2hlJztcblxuLyoqXG4gKiBMcnVDYWNoZSB1c2VzIHRoZSBucG0gbW9kdWxlIGBscnUtY2FjaGVgIHRvIG1lbW9pemUgcHJvbWlzZXMuXG4gKlxuICogQHNlZSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9scnUtY2FjaGVcbiAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWVtb2l6YXRpb25cbiAqIEBwYXJhbSB7b2JqZWN0fSBjYWNoZU9wdGlvbnMgLSBPcHRpb25zIGZvciBgbHJ1LWNhY2hlYC5cbiAqICAgU2VlIHRoZSBucG0gZG9jcyBmb3IgbW9yZSBvcHRpb25zLlxuICogQHBhcmFtIHtudW1iZXJ9IFtjYWNoZU9wdGlvbnMubWF4XSAtIFRoZSBtYXggc2l6ZSBvZiB0aGUgY2FjaGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW2NhY2hlT3B0aW9ucy5tYXhBZ2VdIC0gVGhlIG1heEFnZSBvZiBhbiBpdGVtIGluIG1zLlxuICogQHBhcmFtIHtib29sZWFufSBbY2FjaGVPcHRpb25zLnVwZGF0ZUFnZU9uR2V0PWZhbHNlXSAtIFdoZW4gdXNpbmdcbiAqICAgdGltZS1leHBpcmluZyBlbnRyaWVzIHdpdGggbWF4QWdlLCBzZXR0aW5nIHRoaXMgdG8gdHJ1ZSB3aWxsIG1ha2VcbiAqICAgZWFjaCBlbnRyeSdzIGVmZmVjdGl2ZSB0aW1lIHVwZGF0ZSB0byB0aGUgY3VycmVudCB0aW1lIHdoZW5ldmVyIGl0IGlzXG4gKiAgIHJldHJpZXZlZCBmcm9tIGNhY2hlLCB0aGVyZWJ5IGV4dGVuZGluZyB0aGUgZXhwaXJhdGlvbiBkYXRlIG9mIHRoZSBlbnRyeS5cbiAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjYWNoZU9wdGlvbnMuZGlzcG9zZU9uU2V0dGxlPWZhbHNlXSAtIFdoZW4gc2V0IHRvIHRydWVcbiAqICAgZW50cmllcyB3aWxsIGJlIHJlbW92ZWQgZnJvbSBjYWNoZSBvbmNlIHRoZXkndmUgc2V0dGxlZC4gVGhpcyBpcyB0byBvbmx5XG4gKiAgIGJlIHVzZWQgd2hlbiBvbmUgbmVlZHMgYSBwcm9taXNlIHF1ZXVlLlxuICpcbiAqIEByZXR1cm5zIHtMcnVDYWNoZX0gVGhlIGNsYXNzLlxuKi9cbmV4cG9ydCBjbGFzcyBMcnVDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKGNhY2hlT3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5vcHRpb25zID0gY2FjaGVPcHRpb25zO1xuICAgIHRoaXMuY2FjaGUgPSBuZXcgTFJVKGNhY2hlT3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhIGtleSBmcm9tIHRoZSBMUlUgY2FjaGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBBIGtleSBmb3IgdGhlIGNhY2hlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAqL1xuICBkZWxldGUoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogTWVtb2l6ZXMgYSBwcm9taXNlIHZpYSBhbiBMUlUgY2FjaGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byB1c2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmtleSAtIEEga2V5IGZvciB0aGUgY2FjaGUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb248UHJvbWlzZT59IG9wdGlvbnMuZm4gLSBBIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhXG4gICAqICAgcHJvbWlzZSB0byBtZW1vaXplLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5vcHRpb25zIC0gVGhlIExSVSBjYWNoZSBvcHRpb25zIHRvIHBhc3NcbiAgICogICBpZiBzZXR0aW5nIHRoZSB2YWx1ZSBpbiB0aGUgY2FjaGU7IG5vdGU6IG9ubHkgdGhvc2Ugb3B0aW9ucyBzdXBwb3J0ZWRcbiAgICogICBieSB0aGUgdW5kZXJseWluZyBMUlUgY2FjaGUgaW5zdGFuY2Ugd2lsbCBiZSBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFRoZSByZXN1bHQgb2YgdGhlIG1lbW9pemVkIHByb21pc2UuXG4gICovXG4gIGFzeW5jIG1lbW9pemUoe2tleSwgZm4sIG9wdGlvbnMgPSB7fX0gPSB7fSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICBpZihwcm9taXNlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICAvLyBjYWNoZSBtaXNzXG4gICAgY29uc3QgY2FjaGVPcHRpb25zID0gey4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgcHJvbWlzZSA9IGZuKCk7XG4gICAgLy8gdGhpcyB2ZXJzaW9uIG9ubHkgc3VwcG9ydHMgYG1heEFnZWAgYW5kIGBkaXNwb3NlT25TZXR0bGVgOyBhIGZ1dHVyZVxuICAgIC8vIHZlcnNpb24gd2lsbCBzdXBwb3J0IG1vcmUgY2FjaGUgb3B0aW9uc1xuICAgIGNvbnN0IHttYXhBZ2V9ID0gY2FjaGVPcHRpb25zO1xuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgcHJvbWlzZSwgbWF4QWdlKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwcm9taXNlO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgLy8gaWYgdGhlIHByb21pc2UgcmVqZWN0cywgZGVsZXRlIGl0IGlmIHRoZSBjYWNoZSBlbnRyeSBoYXNuJ3QgY2hhbmdlZFxuICAgICAgaWYocHJvbWlzZSA9PT0gdGhpcy5jYWNoZS5nZXQoa2V5KSkge1xuICAgICAgICB0aGlzLmNhY2hlLmRlbChrZXkpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICAvLyBkaXNwb3NlIHByb21pc2Ugb25jZSBzZXR0bGVkIChwcm92aWRlZCB0aGUgY2FjaGUgZW50cnkgaGFzbid0IGNoYW5nZWQpXG4gICAgaWYoY2FjaGVPcHRpb25zLmRpc3Bvc2VPblNldHRsZSAmJiBwcm9taXNlID09PSB0aGlzLmNhY2hlLmdldChrZXkpKSB7XG4gICAgICB0aGlzLmNhY2hlLmRlbChrZXkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/lru-memoize/lib/LruCache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/lru-memoize/lib/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@digitalbazaar/lru-memoize/lib/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LruCache: () => (/* reexport safe */ _LruCache_js__WEBPACK_IMPORTED_MODULE_0__.LruCache)\n/* harmony export */ });\n/* harmony import */ var _LruCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LruCache.js */ \"(ssr)/./node_modules/@digitalbazaar/lru-memoize/lib/LruCache.js\");\n/*!\n * Copyright (c) 2020-2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvbHJ1LW1lbW9pemUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3VDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL2xydS1tZW1vaXplL2xpYi9pbmRleC5qcz82Zjg5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwLTIwMjEgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuZXhwb3J0IHtMcnVDYWNoZX0gZnJvbSAnLi9McnVDYWNoZS5qcyc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/lru-memoize/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialIssuancePurpose: () => (/* binding */ CredentialIssuancePurpose)\n/* harmony export */ });\n/* harmony import */ var jsonld_signatures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonld-signatures */ \"(ssr)/./node_modules/jsonld-signatures/lib/jsonld-signatures.js\");\n/* harmony import */ var jsonld__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonld */ \"(ssr)/./node_modules/jsonld/lib/index.js\");\n/*!\n * Copyright (c) 2019-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\nconst {purposes: {AssertionProofPurpose}} = jsonld_signatures__WEBPACK_IMPORTED_MODULE_0__;\n\n/**\n * Creates a proof purpose that will validate whether or not the verification\n * method in a proof was authorized by its declared controller for the\n * proof's purpose.\n */\nclass CredentialIssuancePurpose extends AssertionProofPurpose {\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} [options.controller] - The description of the controller,\n   *   if it is not to be dereferenced via a `documentLoader`.\n   * @param {string|Date|number} [options.date] - The expected date for\n   *   the creation of the proof.\n   * @param {number} [options.maxTimestampDelta=Infinity] - A maximum number\n   *   of seconds that the date on the signature can deviate from.\n   */\n  constructor({controller, date, maxTimestampDelta} = {}) {\n    super({controller, date, maxTimestampDelta});\n  }\n\n  /**\n   * Validates the purpose of a proof. This method is called during\n   * proof verification, after the proof value has been checked against the\n   * given verification method (in the case of a digital signature, the\n   * signature has been cryptographically verified against the public key).\n   *\n   * @param {object} proof - The proof to validate.\n   * @param {object} options - The options to use.\n   * @param {object} options.document - The document whose signature is\n   *   being verified.\n   * @param {object} options.suite - Signature suite used in\n   *   the proof.\n   * @param {string} options.verificationMethod - Key id URL to the paired\n   *   public key.\n   * @param {object} [options.documentLoader] - A document loader.\n   *\n   * @throws {Error} If verification method not authorized by controller.\n   * @throws {Error} If proof's created timestamp is out of range.\n   *\n   * @returns {Promise<{valid: boolean, error: Error}>} Resolves on completion.\n   */\n  async validate(proof, {\n    document, suite, verificationMethod, documentLoader\n  }) {\n    try {\n      const result = await super.validate(proof, {\n        document, suite, verificationMethod, documentLoader\n      });\n\n      if(!result.valid) {\n        throw result.error;\n      }\n\n      const issuer = jsonld__WEBPACK_IMPORTED_MODULE_1__.getValues(document, 'issuer');\n\n      if(!issuer || issuer.length === 0) {\n        throw new Error('Credential issuer is required.');\n      }\n\n      const issuerId = typeof issuer[0] === 'string' ? issuer[0] : issuer[0].id;\n\n      if(result.controller.id !== issuerId) {\n        throw new Error(\n          'Credential issuer must match the verification method controller.');\n      }\n\n      return {valid: true};\n    } catch(error) {\n      return {valid: false, error};\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvdmMvbGliL0NyZWRlbnRpYWxJc3N1YW5jZVB1cnBvc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3NDO0FBQ1Y7O0FBRTVCLE9BQU8sV0FBVyx3QkFBd0IsRUFBRSw4Q0FBSzs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxvQkFBb0I7QUFDakM7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLGVBQWUscUNBQXFDLElBQUk7QUFDeEQsV0FBVyxvQ0FBb0M7QUFDL0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0EsZUFBZSxTQUFTLDZCQUE2QixHQUFHO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsNkNBQWdCOztBQUVyQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYztBQUNkLE1BQU07QUFDTixjQUFjO0FBQ2Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL3ZjL2xpYi9DcmVkZW50aWFsSXNzdWFuY2VQdXJwb3NlLmpzPzNmNDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTktMjAyMyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5pbXBvcnQganNpZ3MgZnJvbSAnanNvbmxkLXNpZ25hdHVyZXMnO1xuaW1wb3J0IGpzb25sZCBmcm9tICdqc29ubGQnO1xuXG5jb25zdCB7cHVycG9zZXM6IHtBc3NlcnRpb25Qcm9vZlB1cnBvc2V9fSA9IGpzaWdzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBwcm9vZiBwdXJwb3NlIHRoYXQgd2lsbCB2YWxpZGF0ZSB3aGV0aGVyIG9yIG5vdCB0aGUgdmVyaWZpY2F0aW9uXG4gKiBtZXRob2QgaW4gYSBwcm9vZiB3YXMgYXV0aG9yaXplZCBieSBpdHMgZGVjbGFyZWQgY29udHJvbGxlciBmb3IgdGhlXG4gKiBwcm9vZidzIHB1cnBvc2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBDcmVkZW50aWFsSXNzdWFuY2VQdXJwb3NlIGV4dGVuZHMgQXNzZXJ0aW9uUHJvb2ZQdXJwb3NlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gdXNlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuY29udHJvbGxlcl0gLSBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGNvbnRyb2xsZXIsXG4gICAqICAgaWYgaXQgaXMgbm90IHRvIGJlIGRlcmVmZXJlbmNlZCB2aWEgYSBgZG9jdW1lbnRMb2FkZXJgLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xEYXRlfG51bWJlcn0gW29wdGlvbnMuZGF0ZV0gLSBUaGUgZXhwZWN0ZWQgZGF0ZSBmb3JcbiAgICogICB0aGUgY3JlYXRpb24gb2YgdGhlIHByb29mLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4VGltZXN0YW1wRGVsdGE9SW5maW5pdHldIC0gQSBtYXhpbXVtIG51bWJlclxuICAgKiAgIG9mIHNlY29uZHMgdGhhdCB0aGUgZGF0ZSBvbiB0aGUgc2lnbmF0dXJlIGNhbiBkZXZpYXRlIGZyb20uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7Y29udHJvbGxlciwgZGF0ZSwgbWF4VGltZXN0YW1wRGVsdGF9ID0ge30pIHtcbiAgICBzdXBlcih7Y29udHJvbGxlciwgZGF0ZSwgbWF4VGltZXN0YW1wRGVsdGF9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhlIHB1cnBvc2Ugb2YgYSBwcm9vZi4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGR1cmluZ1xuICAgKiBwcm9vZiB2ZXJpZmljYXRpb24sIGFmdGVyIHRoZSBwcm9vZiB2YWx1ZSBoYXMgYmVlbiBjaGVja2VkIGFnYWluc3QgdGhlXG4gICAqIGdpdmVuIHZlcmlmaWNhdGlvbiBtZXRob2QgKGluIHRoZSBjYXNlIG9mIGEgZGlnaXRhbCBzaWduYXR1cmUsIHRoZVxuICAgKiBzaWduYXR1cmUgaGFzIGJlZW4gY3J5cHRvZ3JhcGhpY2FsbHkgdmVyaWZpZWQgYWdhaW5zdCB0aGUgcHVibGljIGtleSkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9vZiAtIFRoZSBwcm9vZiB0byB2YWxpZGF0ZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byB1c2UuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmRvY3VtZW50IC0gVGhlIGRvY3VtZW50IHdob3NlIHNpZ25hdHVyZSBpc1xuICAgKiAgIGJlaW5nIHZlcmlmaWVkLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5zdWl0ZSAtIFNpZ25hdHVyZSBzdWl0ZSB1c2VkIGluXG4gICAqICAgdGhlIHByb29mLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy52ZXJpZmljYXRpb25NZXRob2QgLSBLZXkgaWQgVVJMIHRvIHRoZSBwYWlyZWRcbiAgICogICBwdWJsaWMga2V5LlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuZG9jdW1lbnRMb2FkZXJdIC0gQSBkb2N1bWVudCBsb2FkZXIuXG4gICAqXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB2ZXJpZmljYXRpb24gbWV0aG9kIG5vdCBhdXRob3JpemVkIGJ5IGNvbnRyb2xsZXIuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBwcm9vZidzIGNyZWF0ZWQgdGltZXN0YW1wIGlzIG91dCBvZiByYW5nZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8e3ZhbGlkOiBib29sZWFuLCBlcnJvcjogRXJyb3J9Pn0gUmVzb2x2ZXMgb24gY29tcGxldGlvbi5cbiAgICovXG4gIGFzeW5jIHZhbGlkYXRlKHByb29mLCB7XG4gICAgZG9jdW1lbnQsIHN1aXRlLCB2ZXJpZmljYXRpb25NZXRob2QsIGRvY3VtZW50TG9hZGVyXG4gIH0pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIudmFsaWRhdGUocHJvb2YsIHtcbiAgICAgICAgZG9jdW1lbnQsIHN1aXRlLCB2ZXJpZmljYXRpb25NZXRob2QsIGRvY3VtZW50TG9hZGVyXG4gICAgICB9KTtcblxuICAgICAgaWYoIXJlc3VsdC52YWxpZCkge1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzc3VlciA9IGpzb25sZC5nZXRWYWx1ZXMoZG9jdW1lbnQsICdpc3N1ZXInKTtcblxuICAgICAgaWYoIWlzc3VlciB8fCBpc3N1ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ3JlZGVudGlhbCBpc3N1ZXIgaXMgcmVxdWlyZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzc3VlcklkID0gdHlwZW9mIGlzc3VlclswXSA9PT0gJ3N0cmluZycgPyBpc3N1ZXJbMF0gOiBpc3N1ZXJbMF0uaWQ7XG5cbiAgICAgIGlmKHJlc3VsdC5jb250cm9sbGVyLmlkICE9PSBpc3N1ZXJJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0NyZWRlbnRpYWwgaXNzdWVyIG11c3QgbWF0Y2ggdGhlIHZlcmlmaWNhdGlvbiBtZXRob2QgY29udHJvbGxlci4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHt2YWxpZDogdHJ1ZX07XG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgcmV0dXJuIHt2YWxpZDogZmFsc2UsIGVycm9yfTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/vc/lib/contexts/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@digitalbazaar/vc/lib/contexts/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contexts: () => (/* binding */ contexts)\n/* harmony export */ });\n/* harmony import */ var credentials_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! credentials-context */ \"(ssr)/./node_modules/credentials-context/dist/context.esm.js\");\n/*!\n * Copyright (c) 2019-2023 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nconst contexts = new Map();\n\nfor(const [url, context] of credentials_context__WEBPACK_IMPORTED_MODULE_0__.contexts.entries()) {\n  contexts.set(url, context);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvdmMvbGliL2NvbnRleHRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRzZCOztBQUV0Qjs7QUFFUCw0QkFBNEIseURBQWtCO0FBQzlDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvdmMvbGliL2NvbnRleHRzL2luZGV4LmpzPzZmMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTktMjAyMyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5pbXBvcnQge1xuICBjb250ZXh0cyBhcyBjcmVkZW50aWFsQ29udGV4dHNcbn0gZnJvbSAnY3JlZGVudGlhbHMtY29udGV4dCc7XG5cbmV4cG9ydCBjb25zdCBjb250ZXh0cyA9IG5ldyBNYXAoKTtcblxuZm9yKGNvbnN0IFt1cmwsIGNvbnRleHRdIG9mIGNyZWRlbnRpYWxDb250ZXh0cy5lbnRyaWVzKCkpIHtcbiAgY29udGV4dHMuc2V0KHVybCwgY29udGV4dCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/vc/lib/contexts/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/vc/lib/documentLoader.js":
/*!**************************************************************!*\
  !*** ./node_modules/@digitalbazaar/vc/lib/documentLoader.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   documentLoader: () => (/* binding */ documentLoader)\n/* harmony export */ });\n/* harmony import */ var _contexts_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contexts/index.js */ \"(ssr)/./node_modules/@digitalbazaar/vc/lib/contexts/index.js\");\n/*!\n * Copyright (c) 2019-2023 Digital Bazaar, Inc. All rights reserved.\n */\n// load locally embedded contexts\n\n\nasync function documentLoader(url) {\n  const context = _contexts_index_js__WEBPACK_IMPORTED_MODULE_0__.contexts.get(url);\n  if(context !== undefined) {\n    return {\n      contextUrl: null,\n      documentUrl: url,\n      document: context\n    };\n  }\n  throw new Error(`Document loader unable to load URL \"${url}\".`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvdmMvbGliL2RvY3VtZW50TG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNkM7O0FBRXRDO0FBQ1Asa0JBQWtCLHdEQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELElBQUk7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIvdmMvbGliL2RvY3VtZW50TG9hZGVyLmpzP2YwZGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTktMjAyMyBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG4vLyBsb2FkIGxvY2FsbHkgZW1iZWRkZWQgY29udGV4dHNcbmltcG9ydCB7Y29udGV4dHN9IGZyb20gJy4vY29udGV4dHMvaW5kZXguanMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9jdW1lbnRMb2FkZXIodXJsKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBjb250ZXh0cy5nZXQodXJsKTtcbiAgaWYoY29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRleHRVcmw6IG51bGwsXG4gICAgICBkb2N1bWVudFVybDogdXJsLFxuICAgICAgZG9jdW1lbnQ6IGNvbnRleHRcbiAgICB9O1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgRG9jdW1lbnQgbG9hZGVyIHVuYWJsZSB0byBsb2FkIFVSTCBcIiR7dXJsfVwiLmApO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/vc/lib/documentLoader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/vc/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@digitalbazaar/vc/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialIssuancePurpose: () => (/* reexport safe */ _CredentialIssuancePurpose_js__WEBPACK_IMPORTED_MODULE_1__.CredentialIssuancePurpose),\n/* harmony export */   _checkCredential: () => (/* binding */ _checkCredential),\n/* harmony export */   _checkPresentation: () => (/* binding */ _checkPresentation),\n/* harmony export */   createPresentation: () => (/* binding */ createPresentation),\n/* harmony export */   dateRegex: () => (/* binding */ dateRegex),\n/* harmony export */   defaultDocumentLoader: () => (/* binding */ defaultDocumentLoader),\n/* harmony export */   derive: () => (/* binding */ derive),\n/* harmony export */   issue: () => (/* binding */ issue),\n/* harmony export */   signPresentation: () => (/* binding */ signPresentation),\n/* harmony export */   verify: () => (/* binding */ verify),\n/* harmony export */   verifyCredential: () => (/* binding */ verifyCredential)\n/* harmony export */ });\n/* harmony import */ var _documentLoader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documentLoader.js */ \"(ssr)/./node_modules/@digitalbazaar/vc/lib/documentLoader.js\");\n/* harmony import */ var _CredentialIssuancePurpose_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CredentialIssuancePurpose.js */ \"(ssr)/./node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js\");\n/* harmony import */ var jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonld-signatures */ \"(ssr)/./node_modules/jsonld-signatures/lib/jsonld-signatures.js\");\n/* harmony import */ var jsonld__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jsonld */ \"(ssr)/./node_modules/jsonld/lib/index.js\");\n/* harmony import */ var credentials_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! credentials-context */ \"(ssr)/./node_modules/credentials-context/dist/context.esm.js\");\n/**\n * A JavaScript implementation of Verifiable Credentials.\n *\n * @author Dave Longley\n * @author David I. Lehn\n *\n * @license BSD 3-Clause License\n * Copyright (c) 2017-2023 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n\n\n\nconst defaultDocumentLoader =\n  jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__.extendContextLoader(_documentLoader_js__WEBPACK_IMPORTED_MODULE_0__.documentLoader);\n\n\nconst {AssertionProofPurpose, AuthenticationProofPurpose} = jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__.purposes;\nconst {constants: {CREDENTIALS_CONTEXT_V1_URL}} = credentials_context__WEBPACK_IMPORTED_MODULE_4__;\n\n\n\n// Z and T can be lowercase\n// RFC3339 regex\nconst dateRegex = new RegExp('^(\\\\d{4})-(0[1-9]|1[0-2])-' +\n    '(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):' +\n    '([0-5][0-9]):([0-5][0-9]|60)' +\n    '(\\\\.[0-9]+)?(Z|(\\\\+|-)([01][0-9]|2[0-3]):' +\n    '([0-5][0-9]))$', 'i');\n\n/**\n * @typedef {object} LinkedDataSignature\n */\n\n/**\n * @typedef {object} Presentation\n */\n\n/**\n * @typedef {object} ProofPurpose\n */\n\n/**\n * @typedef {object} VerifiableCredential\n */\n\n/**\n * @typedef {object} VerifiablePresentation\n */\n\n/**\n * @typedef {object} VerifyPresentationResult\n * @property {boolean} verified - True if verified, false if not.\n * @property {object} presentationResult\n * @property {Array} credentialResults\n * @property {object} error\n */\n\n/**\n * @typedef {object} VerifyCredentialResult\n * @property {boolean} verified - True if verified, false if not.\n * @property {object} statusResult\n * @property {Array} results\n * @property {object} error\n */\n\n/**\n * Issues a verifiable credential (by taking a base credential document,\n * and adding a digital signature to it).\n *\n * @param {object} [options={}] - The options to use.\n *\n * @param {object} options.credential - Base credential document.\n * @param {LinkedDataSignature} options.suite - Signature suite (with private\n *   key material or an API to use it), passed in to sign().\n *\n * @param {ProofPurpose} [options.purpose] - A ProofPurpose. If not specified,\n *   a default purpose will be created.\n *\n * Other optional params passed to `sign()`:\n * @param {object} [options.documentLoader] - A document loader.\n * @param {string|Date} [options.now] - A string representing date time in\n *   ISO 8601 format or an instance of Date. Defaults to current date time.\n *\n * @throws {Error} If missing required properties.\n *\n * @returns {Promise<VerifiableCredential>} Resolves on completion.\n */\nasync function issue({\n  credential, suite,\n  purpose = new _CredentialIssuancePurpose_js__WEBPACK_IMPORTED_MODULE_1__.CredentialIssuancePurpose(),\n  documentLoader = defaultDocumentLoader,\n  now\n} = {}) {\n  // check to make sure the `suite` has required params\n  // Note: verificationMethod defaults to publicKey.id, in suite constructor\n  if(!suite) {\n    throw new TypeError('\"suite\" parameter is required for issuing.');\n  }\n  if(!suite.verificationMethod) {\n    throw new TypeError('\"suite.verificationMethod\" property is required.');\n  }\n\n  if(!credential) {\n    throw new TypeError('\"credential\" parameter is required for issuing.');\n  }\n\n  // Set the issuance date to now(), if missing\n  if(!credential.issuanceDate) {\n    const now = (new Date()).toJSON();\n    credential.issuanceDate = `${now.slice(0, now.length - 5)}Z`;\n  }\n\n  // run common credential checks\n  _checkCredential({credential, now, mode: 'issue'});\n\n  return jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__.sign(credential, {purpose, documentLoader, suite});\n}\n\n/**\n * Derives a proof from the given verifiable credential, resulting in a new\n * verifiable credential. This method is usually used to generate selective\n * disclosure and / or unlinkable proofs.\n *\n * @param {object} [options={}] - The options to use.\n *\n * @param {object} options.verifiableCredential - The verifiable credential\n *   containing a base proof to derive another proof from.\n * @param {LinkedDataSignature} options.suite - Derived proof signature suite.\n *\n * Other optional params passed to `derive()`:\n * @param {object} [options.documentLoader] - A document loader.\n *\n * @throws {Error} If missing required properties.\n *\n * @returns {Promise<VerifiableCredential>} Resolves on completion.\n */\nasync function derive({\n  verifiableCredential, suite,\n  documentLoader = defaultDocumentLoader\n} = {}) {\n  if(!verifiableCredential) {\n    throw new TypeError(\n      '\"verifiableCredential\" parameter is required for deriving.');\n  }\n  if(!suite) {\n    throw new TypeError('\"suite\" parameter is required for deriving.');\n  }\n\n  // run common credential checks\n  _checkCredential({credential: verifiableCredential, mode: 'issue'});\n\n  return jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__.derive(verifiableCredential, {\n    purpose: new AssertionProofPurpose(),\n    documentLoader,\n    suite\n  });\n}\n\n/**\n * Verifies a verifiable presentation:\n *   - Checks that the presentation is well-formed\n *   - Checks the proofs (for example, checks digital signatures against the\n *     provided public keys).\n *\n * @param {object} [options={}] - The options to use.\n *\n * @param {VerifiablePresentation} options.presentation - Verifiable\n *   presentation, signed or unsigned, that may contain within it a\n *   verifiable credential.\n *\n * @param {LinkedDataSignature|LinkedDataSignature[]} options.suite - One or\n *   more signature suites that are supported by the caller's use case. This is\n *   an explicit design decision -- the calling code must specify which\n *   signature types (ed25519, RSA, etc) are allowed.\n *   Although it is expected that the secure resolution/fetching of the public\n *   key material (to verify against) is to be handled by the documentLoader,\n *   the suite param can optionally include the key directly.\n *\n * @param {boolean} [options.unsignedPresentation=false] - By default, this\n *   function assumes that a presentation is signed (and will return an error if\n *   a `proof` section is missing). Set this to `true` if you're using an\n *   unsigned presentation.\n *\n * Either pass in a proof purpose,\n * @param {AuthenticationProofPurpose} [options.presentationPurpose] - Optional\n *   proof purpose (a default one will be created if not passed in).\n *\n * or a default purpose will be created with params:\n * @param {string} [options.challenge] - Required if purpose is not passed in.\n * @param {string} [options.controller] - A controller.\n * @param {string} [options.domain] - A domain.\n *\n * @param {Function} [options.documentLoader] - A document loader.\n * @param {Function} [options.checkStatus] - Optional function for checking\n *   credential status if `credentialStatus` is present on the credential.\n * @param {string|Date} [options.now] - A string representing date time in\n *   ISO 8601 format or an instance of Date. Defaults to current date time.\n *\n * @returns {Promise<VerifyPresentationResult>} The verification result.\n */\nasync function verify(options = {}) {\n  const {presentation} = options;\n  try {\n    if(!presentation) {\n      throw new TypeError(\n        'A \"presentation\" property is required for verifying.');\n    }\n    return _verifyPresentation(options);\n  } catch(error) {\n    return {\n      verified: false,\n      results: [{presentation, verified: false, error}],\n      error\n    };\n  }\n}\n\n/**\n * Verifies a verifiable credential:\n *   - Checks that the credential is well-formed\n *   - Checks the proofs (for example, checks digital signatures against the\n *     provided public keys).\n *\n * @param {object} [options={}] - The options.\n *\n * @param {object} options.credential - Verifiable credential.\n *\n * @param {LinkedDataSignature|LinkedDataSignature[]} options.suite - One or\n *   more signature suites that are supported by the caller's use case. This is\n *   an explicit design decision -- the calling code must specify which\n *   signature types (ed25519, RSA, etc) are allowed.\n *   Although it is expected that the secure resolution/fetching of the public\n *   key material (to verify against) is to be handled by the documentLoader,\n *   the suite param can optionally include the key directly.\n *\n * @param {CredentialIssuancePurpose} [options.purpose] - Optional\n *   proof purpose (a default one will be created if not passed in).\n * @param {Function} [options.documentLoader] - A document loader.\n * @param {Function} [options.checkStatus] - Optional function for checking\n *   credential status if `credentialStatus` is present on the credential.\n * @param {string|Date} [options.now] - A string representing date time in\n *   ISO 8601 format or an instance of Date. Defaults to current date time.\n *\n * @returns {Promise<VerifyCredentialResult>} The verification result.\n */\nasync function verifyCredential(options = {}) {\n  const {credential} = options;\n  try {\n    if(!credential) {\n      throw new TypeError(\n        'A \"credential\" property is required for verifying.');\n    }\n    return await _verifyCredential(options);\n  } catch(error) {\n    return {\n      verified: false,\n      results: [{credential, verified: false, error}],\n      error\n    };\n  }\n}\n\n/**\n * Verifies a verifiable credential.\n *\n * @private\n * @param {object} [options={}] - The options.\n *\n * @param {object} options.credential - Verifiable credential.\n * @param {LinkedDataSignature|LinkedDataSignature[]} options.suite - See the\n *   definition in the `verify()` docstring, for this param.\n * @param {string|Date} [options.now] - A string representing date time in\n *   ISO 8601 format or an instance of Date. Defaults to current date time.\n *\n * @throws {Error} If required parameters are missing (in `_checkCredential`).\n *\n * @param {CredentialIssuancePurpose} [options.purpose] - A purpose.\n * @param {Function} [options.documentLoader] - A document loader.\n * @param {Function} [options.checkStatus] - Optional function for checking\n *   credential status if `credentialStatus` is present on the credential.\n *\n * @returns {Promise<VerifyCredentialResult>} The verification result.\n */\nasync function _verifyCredential(options = {}) {\n  const {credential, checkStatus, now} = options;\n\n  // run common credential checks\n  _checkCredential({credential, now});\n\n  // if credential status is provided, a `checkStatus` function must be given\n  if(credential.credentialStatus && typeof options.checkStatus !== 'function') {\n    throw new TypeError(\n      'A \"checkStatus\" function must be given to verify credentials with ' +\n      '\"credentialStatus\".');\n  }\n\n  const documentLoader = options.documentLoader || defaultDocumentLoader;\n\n  const {controller} = options;\n  const purpose = options.purpose || new _CredentialIssuancePurpose_js__WEBPACK_IMPORTED_MODULE_1__.CredentialIssuancePurpose({\n    controller\n  });\n\n  const result = await jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__.verify(\n    credential, {...options, purpose, documentLoader});\n\n  // if verification has already failed, skip status check\n  if(!result.verified) {\n    return result;\n  }\n\n  if(credential.credentialStatus) {\n    result.statusResult = await checkStatus(options);\n    if(!result.statusResult.verified) {\n      result.verified = false;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Creates an unsigned presentation from a given verifiable credential.\n *\n * @param {object} options - Options to use.\n * @param {object|Array<object>} [options.verifiableCredential] - One or more\n *   verifiable credential.\n * @param {string} [options.id] - Optional VP id.\n * @param {string} [options.holder] - Optional presentation holder url.\n * @param {string|Date} [options.now] - A string representing date time in\n *   ISO 8601 format or an instance of Date. Defaults to current date time.\n *\n * @throws {TypeError} If verifiableCredential param is missing.\n * @throws {Error} If the credential (or the presentation params) are missing\n *   required properties.\n *\n * @returns {Presentation} The credential wrapped inside of a\n *   VerifiablePresentation.\n */\nfunction createPresentation({\n  verifiableCredential, id, holder, now\n} = {}) {\n  const presentation = {\n    '@context': [CREDENTIALS_CONTEXT_V1_URL],\n    type: ['VerifiablePresentation']\n  };\n  if(verifiableCredential) {\n    const credentials = [].concat(verifiableCredential);\n    // ensure all credentials are valid\n    for(const credential of credentials) {\n      _checkCredential({credential, now});\n    }\n    presentation.verifiableCredential = credentials;\n  }\n  if(id) {\n    presentation.id = id;\n  }\n  if(holder) {\n    presentation.holder = holder;\n  }\n\n  _checkPresentation(presentation);\n\n  return presentation;\n}\n\n/**\n * Signs a given presentation.\n *\n * @param {object} [options={}] - Options to use.\n *\n * Required:\n * @param {Presentation} options.presentation - A presentation.\n * @param {LinkedDataSignature} options.suite - passed in to sign()\n *\n * Either pass in a ProofPurpose, or a default one will be created with params:\n * @param {ProofPurpose} [options.purpose] - A ProofPurpose. If not specified,\n *   a default purpose will be created with the domain and challenge options.\n *\n * @param {string} [options.domain] - A domain.\n * @param {string} options.challenge - A required challenge.\n *\n * @param {Function} [options.documentLoader] - A document loader.\n *\n * @returns {Promise<{VerifiablePresentation}>} A VerifiablePresentation with\n *   a proof.\n */\nasync function signPresentation(options = {}) {\n  const {presentation, domain, challenge} = options;\n  const purpose = options.purpose || new AuthenticationProofPurpose({\n    domain,\n    challenge\n  });\n\n  const documentLoader = options.documentLoader || defaultDocumentLoader;\n\n  return jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__.sign(presentation, {...options, purpose, documentLoader});\n}\n\n/**\n * Verifies that the VerifiablePresentation is well formed, and checks the\n * proof signature if it's present. Also verifies all the VerifiableCredentials\n * that are present in the presentation, if any.\n *\n * @param {object} [options={}] - The options.\n * @param {VerifiablePresentation} options.presentation - A\n *   VerifiablePresentation.\n *\n * @param {LinkedDataSignature|LinkedDataSignature[]} options.suite - See the\n *   definition in the `verify()` docstring, for this param.\n *\n * @param {boolean} [options.unsignedPresentation=false] - By default, this\n *   function assumes that a presentation is signed (and will return an error if\n *   a `proof` section is missing). Set this to `true` if you're using an\n *   unsigned presentation.\n *\n * Either pass in a proof purpose,\n * @param {AuthenticationProofPurpose} [options.presentationPurpose] - A\n *   ProofPurpose. If not specified, a default purpose will be created with\n *   the challenge, controller, and domain options.\n *\n * @param {string} [options.challenge] - A challenge. Required if purpose is\n *   not passed in.\n * @param {string} [options.controller] - A controller. Required if purpose is\n *   not passed in.\n * @param {string} [options.domain] - A domain. Required if purpose is not\n *   passed in.\n *\n * @param {Function} [options.documentLoader] - A document loader.\n * @param {Function} [options.checkStatus] - Optional function for checking\n *   credential status if `credentialStatus` is present on the credential.\n * @param {string|Date} [options.now] - A string representing date time in\n *   ISO 8601 format or an instance of Date. Defaults to current date time.\n *\n * @throws {Error} If presentation is missing required params.\n *\n * @returns {Promise<VerifyPresentationResult>} The verification result.\n */\nasync function _verifyPresentation(options = {}) {\n  const {presentation, unsignedPresentation} = options;\n\n  _checkPresentation(presentation);\n\n  const documentLoader = options.documentLoader || defaultDocumentLoader;\n\n  // FIXME: verify presentation first, then each individual credential\n  // only if that proof is verified\n\n  // if verifiableCredentials are present, verify them, individually\n  let credentialResults;\n  let verified = true;\n  const credentials = jsonld__WEBPACK_IMPORTED_MODULE_3__.getValues(presentation, 'verifiableCredential');\n  if(credentials.length > 0) {\n    // verify every credential in `verifiableCredential`\n    credentialResults = await Promise.all(credentials.map(credential => {\n      return verifyCredential({...options, credential, documentLoader});\n    }));\n\n    for(const [i, credentialResult] of credentialResults.entries()) {\n      credentialResult.credentialId = credentials[i].id;\n    }\n\n    const allCredentialsVerified = credentialResults.every(r => r.verified);\n    if(!allCredentialsVerified) {\n      verified = false;\n    }\n  }\n\n  if(unsignedPresentation) {\n    // No need to verify the proof section of this presentation\n    return {verified, results: [presentation], credentialResults};\n  }\n\n  const {controller, domain, challenge} = options;\n  if(!options.presentationPurpose && !challenge) {\n    throw new Error(\n      'A \"challenge\" param is required for AuthenticationProofPurpose.');\n  }\n\n  const purpose = options.presentationPurpose ||\n    new AuthenticationProofPurpose({controller, domain, challenge});\n\n  const presentationResult = await jsonld_signatures__WEBPACK_IMPORTED_MODULE_2__.verify(\n    presentation, {...options, purpose, documentLoader});\n\n  return {\n    presentationResult,\n    verified: verified && presentationResult.verified,\n    credentialResults,\n    error: presentationResult.error\n  };\n}\n\n/**\n * @param {string|object} obj - Either an object with an id property\n *   or a string that is an id.\n * @returns {string|undefined} Either an id or undefined.\n * @private\n */\nfunction _getId(obj) {\n  if(typeof obj === 'string') {\n    return obj;\n  }\n\n  if(!('id' in obj)) {\n    return;\n  }\n\n  return obj.id;\n}\n\n// export for testing\n/**\n * @param {object} presentation - An object that could be a presentation.\n *\n * @throws {Error}\n * @private\n */\nfunction _checkPresentation(presentation) {\n  // normalize to an array to allow the common case of context being a string\n  const context = Array.isArray(presentation['@context']) ?\n    presentation['@context'] : [presentation['@context']];\n\n  // ensure first context is 'https://www.w3.org/2018/credentials/v1'\n  if(context[0] !== CREDENTIALS_CONTEXT_V1_URL) {\n    throw new Error(\n      `\"${CREDENTIALS_CONTEXT_V1_URL}\" needs to be first in the ` +\n      'list of contexts.');\n  }\n\n  const types = jsonld__WEBPACK_IMPORTED_MODULE_3__.getValues(presentation, 'type');\n\n  // check type presence\n  if(!types.includes('VerifiablePresentation')) {\n    throw new Error('\"type\" must include \"VerifiablePresentation\".');\n  }\n}\n\n// export for testing\n/**\n * @param {object} options - The options.\n * @param {object} options.credential - An object that could be a\n *   VerifiableCredential.\n * @param {string|Date} [options.now] - A string representing date time in\n *   ISO 8601 format or an instance of Date. Defaults to current date time.\n * @param {string} [options.mode] - The mode of operation for this\n *   validation function, either `issue` or `verify`.\n *\n * @throws {Error}\n * @private\n */\nfunction _checkCredential({\n  credential, now = new Date(), mode = 'verify'\n} = {}) {\n  if(typeof now === 'string') {\n    now = new Date(now);\n  }\n  // ensure first context is 'https://www.w3.org/2018/credentials/v1'\n  if(credential['@context'][0] !== CREDENTIALS_CONTEXT_V1_URL) {\n    throw new Error(\n      `\"${CREDENTIALS_CONTEXT_V1_URL}\" needs to be first in the ` +\n      'list of contexts.');\n  }\n\n  // check type presence and cardinality\n  if(!credential.type) {\n    throw new Error('\"type\" property is required.');\n  }\n\n  if(!jsonld__WEBPACK_IMPORTED_MODULE_3__.getValues(credential, 'type').includes('VerifiableCredential')) {\n    throw new Error('\"type\" must include `VerifiableCredential`.');\n  }\n\n  if(!credential.credentialSubject) {\n    throw new Error('\"credentialSubject\" property is required.');\n  }\n\n  // If credentialSubject.id is present and is not a URI, reject it\n  if(credential.credentialSubject.id) {\n    _validateUriId({\n      id: credential.credentialSubject.id, propertyName: 'credentialSubject.id'\n    });\n  }\n\n  if(!credential.issuer) {\n    throw new Error('\"issuer\" property is required.');\n  }\n\n  // check issuanceDate cardinality\n  if(jsonld__WEBPACK_IMPORTED_MODULE_3__.getValues(credential, 'issuanceDate').length > 1) {\n    throw new Error('\"issuanceDate\" property can only have one value.');\n  }\n\n  // check issued is a date\n  if(!credential.issuanceDate) {\n    throw new Error('\"issuanceDate\" property is required.');\n  }\n\n  if('issuanceDate' in credential) {\n    let {issuanceDate} = credential;\n    if(!dateRegex.test(issuanceDate)) {\n      throw new Error(`\"issuanceDate\" must be a valid date: ${issuanceDate}`);\n    }\n    // check if `now` is before `issuanceDate` on verification\n    if(mode === 'verify') {\n      issuanceDate = new Date(issuanceDate);\n      if(now < issuanceDate) {\n        throw new Error(\n          `The current date time (${now.toISOString()}) is before the ` +\n          `\"issuanceDate\" (${issuanceDate.toISOString()}).`);\n      }\n    }\n  }\n\n  // check issuer cardinality\n  if(jsonld__WEBPACK_IMPORTED_MODULE_3__.getValues(credential, 'issuer').length > 1) {\n    throw new Error('\"issuer\" property can only have one value.');\n  }\n\n  // check issuer is a URL\n  if('issuer' in credential) {\n    const issuer = _getId(credential.issuer);\n    if(!issuer) {\n      throw new Error(`\"issuer\" id is required.`);\n    }\n    _validateUriId({id: issuer, propertyName: 'issuer'});\n  }\n\n  if('credentialStatus' in credential) {\n    const {credentialStatus} = credential;\n    if(Array.isArray(credentialStatus) ?\n      credentialStatus.some(cs => !cs.id) : !credentialStatus.id) {\n      throw new Error('\"credentialStatus\" must include an id.');\n    }\n    if(Array.isArray(credentialStatus) ?\n      credentialStatus.some(cs => !cs.type) : !credentialStatus.type) {\n      throw new Error('\"credentialStatus\" must include a type.');\n    }\n  }\n\n  // check evidences are URLs\n  jsonld__WEBPACK_IMPORTED_MODULE_3__.getValues(credential, 'evidence').forEach(evidence => {\n    const evidenceId = _getId(evidence);\n    if(evidenceId) {\n      _validateUriId({id: evidenceId, propertyName: 'evidence'});\n    }\n  });\n\n  if('expirationDate' in credential) {\n    const {expirationDate} = credential;\n    // check if `expirationDate` property is a date\n    if(!dateRegex.test(expirationDate)) {\n      throw new Error(\n        `\"expirationDate\" must be a valid date: ${expirationDate}`);\n    }\n    // check if `now` is after `expirationDate`\n    if(now > new Date(expirationDate)) {\n      throw new Error('Credential has expired.');\n    }\n  }\n}\n\nfunction _validateUriId({id, propertyName}) {\n  let parsed;\n  try {\n    parsed = new URL(id);\n  } catch(e) {\n    const error = new TypeError(`\"${propertyName}\" must be a URI: \"${id}\".`);\n    error.cause = e;\n    throw error;\n  }\n\n  if(!parsed.protocol) {\n    throw new TypeError(`\"${propertyName}\" must be a URI: \"${id}\".`);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/vc/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/X25519KeyAgreementKey2019.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/X25519KeyAgreementKey2019.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X25519KeyAgreementKey2019: () => (/* binding */ X25519KeyAgreementKey2019)\n/* harmony export */ });\n/* harmony import */ var crypto_ld__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-ld */ \"(ssr)/./node_modules/crypto-ld/lib/index.js\");\n/* harmony import */ var ed2curve__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ed2curve */ \"(ssr)/./node_modules/ed2curve/ed2curve.js\");\n/* harmony import */ var base58_universal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! base58-universal */ \"(ssr)/./node_modules/base58-universal/lib/index.js\");\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crypto.js */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto.js\");\n/* harmony import */ var _noble_ed25519__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/ed25519 */ \"(ssr)/./node_modules/@noble/ed25519/lib/esm/index.js\");\n/*!\n * Copyright (c) 2019-2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\n\n\nconst SUITE_ID = 'X25519KeyAgreementKey2019';\n\n// multicodec ed25519-pub header as varint\nconst MULTICODEC_ED25519_PUB_HEADER = new Uint8Array([0xed, 0x01]);\n// multicodec ed25519-priv header as varint\nconst MULTICODEC_ED25519_PRIV_HEADER = new Uint8Array([0x80, 0x26]);\n\nclass X25519KeyAgreementKey2019 extends crypto_ld__WEBPACK_IMPORTED_MODULE_0__.LDKeyPair {\n  /**\n   * An implementation of x25519\n   * [X25519 Key Agreement 2019]{@link https://w3c-dvcg.github.io/}\n   * representation.\n   *\n   * @example\n   * > const privateKeyBase58 =\n   *   '...';\n   * > const options = {\n   *   publicKeyBase58: '...',\n   *   privateKeyBase58\n   * };\n   * > const DHKey = new X25519KeyAgreementKey2019(options);\n   * > DHKey\n   * X25519KeyAgreementKey2019 { ...\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.controller - Controller DID or document url.\n   * @param {string} [options.id] - Key ID, typically composed of controller\n   *   URL and key fingerprint as hash fragment.\n   * @param {string} options.publicKeyBase58 - Base58 encoded public key.\n   * @param {string} [options.privateKeyBase58] - Base58 private key.\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is considered\n   *   not revoked. Note that this mechanism is slightly different than DID\n   *   Document key revocation, where a DID controller can revoke a key from\n   *   that DID by removing it from the DID Document.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.type = SUITE_ID;\n    this.publicKeyBase58 = options.publicKeyBase58;\n    if(!this.publicKeyBase58) {\n      throw TypeError('The \"publicKeyBase58\" property is required.');\n    }\n    this.privateKeyBase58 = options.privateKeyBase58;\n    if(this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  /**\n   * Generates a new public/private X25519 Key Pair.\n   *\n   * @example\n   * > const keyPair = await X25519KeyAgreementKey2019.generate();\n   * > keyPair\n   * X25519KeyAgreementKey2019 { ...\n   *\n   * @param {object} [options={}] - The options.\n   * @param {string} [options.controller] - A controller.\n   * @param {string} [options.id] - An id.\n   *\n   * @returns {Promise<X25519KeyAgreementKey2019>} Generates a key pair.\n   */\n  static async generate(options = {}) {\n    const {publicKey, privateKey} = await (0,_crypto_js__WEBPACK_IMPORTED_MODULE_3__.generateKeyPair)();\n\n    return new X25519KeyAgreementKey2019({\n      publicKeyBase58: (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(publicKey),\n      privateKeyBase58: (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(privateKey),\n      ...options\n    });\n  }\n\n  /**\n   * Creates an X25519KeyAgreementKey2019 Key Pair from an existing key\n   * (constructor method).\n   *\n   * @example\n   * > const options = {\n   *   id,\n   *   controller,\n   *   publicKeyBase58,\n   *   privateKeyBase58: privateKey\n   * };\n   * > const key = await X25519KeyAgreementKey2019.from(options);\n   * > key\n   * X25519KeyAgreementKey2019 { ...\n   *\n   * @param {object} options - The options.\n   * @param {string} [options.privateKeyBase58] - A Base58 encoded Private key.\n   *\n   * @returns {X25519KeyAgreementKey2019} An X25519 Key Pair.\n   */\n  static async from(options) {\n    return new X25519KeyAgreementKey2019(options);\n  }\n\n  /**\n   * Converts a keypair instance of type Ed25519VerificationKey2018 to an\n   * instance of this class.\n   *\n   * @see https://github.com/digitalbazaar/ed25519-verification-key-2018\n   *\n   * @typedef {object} Ed25519VerificationKey2018\n   *\n   * @param {Ed25519VerificationKey2018} keyPair - The source key pair.\n   *\n   * @returns {X25519KeyAgreementKey2019} The converted output.\n   */\n  static fromEd25519VerificationKey2018({keyPair}) {\n    const xKey = new X25519KeyAgreementKey2019({\n      controller: keyPair.controller,\n      publicKeyBase58: X25519KeyAgreementKey2019\n        .convertFromEdPublicKey(keyPair)\n    });\n\n    if(keyPair.privateKeyBase58) {\n      xKey.privateKeyBase58 = X25519KeyAgreementKey2019\n        .convertFromEdPrivateKey(keyPair);\n    }\n\n    return xKey;\n  }\n\n  /**\n   * Converts a keypair instance of type Ed25519VerificationKey2020 to an\n   * instance of this class.\n   *\n   * @see https://github.com/digitalbazaar/ed25519-verification-key-2020\n   *\n   * @typedef {object} Ed25519VerificationKey2020\n   *\n   * @param {Ed25519VerificationKey2020} keyPair - The source key pair.\n   *\n   * @returns {X25519KeyAgreementKey2019} - The converted output.\n   */\n  static fromEd25519VerificationKey2020({keyPair}) {\n    if(!keyPair.publicKeyMultibase) {\n      throw new Error('Source public key is required to convert.');\n    }\n\n    if(!keyPair.publicKeyMultibase.startsWith('z')) {\n      throw new TypeError(\n        'Expecting source public Ed25519 2020 key to have base58btc encoding.'\n      );\n    }\n\n    const publicKeyBase58 = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(_multibaseDecode(\n      MULTICODEC_ED25519_PUB_HEADER,\n      keyPair.publicKeyMultibase));\n\n    const xKey = new X25519KeyAgreementKey2019({\n      controller: keyPair.controller,\n      publicKeyBase58: X25519KeyAgreementKey2019\n        .convertFromEdPublicKey({publicKeyBase58})\n    });\n\n    if(keyPair.privateKeyMultibase) {\n      if(!keyPair.privateKeyMultibase.startsWith('z')) {\n        throw new TypeError(\n          // eslint-disable-next-line max-len\n          'Expecting source private Ed25519 2020 key to have base58btc encoding.'\n        );\n      }\n\n      const privateKeyBase58 = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(_multibaseDecode(\n        MULTICODEC_ED25519_PRIV_HEADER, keyPair.privateKeyMultibase));\n\n      xKey.privateKeyBase58 = X25519KeyAgreementKey2019\n        .convertFromEdPrivateKey({privateKeyBase58});\n    }\n\n    return xKey;\n  }\n\n  /**\n   * @deprecated\n   * NOTE: This is now an alias of `fromEd25519VerificationKey2018()`, to\n   * maintain backwards compatibility. Going forward, code should be using\n   * the conversion method specific to the Ed25519 suite it's using.\n   *\n   * Converts a keypair instance of type Ed25519VerificationKey2018 to an\n   * instance of this class.\n   *\n   * @param {Ed25519VerificationKey2018} keyPair - The source key pair.\n   *\n   * @returns {X25519KeyAgreementKey2019} - The converted output.\n   */\n  static fromEdKeyPair({keyPair}) {\n    return this.fromEd25519VerificationKey2018({keyPair});\n  }\n\n  /**\n   * @param {string} publicKeyBase58 - The base58 encoded Ed25519 Public key.\n   *\n   * @returns {string} The base58 encoded X25519 Public key.\n   */\n  static convertFromEdPublicKey({publicKeyBase58}) {\n    const edPubkeyBytes = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(publicKeyBase58);\n\n    // Converts a 32-byte Ed25519 public key into a 32-byte Curve25519 key\n    // Returns null if the given public key in not a valid Ed25519 public key.\n    const dhPubkeyBytes = _noble_ed25519__WEBPACK_IMPORTED_MODULE_4__.Point.fromHex(edPubkeyBytes).toX25519();\n    if(!dhPubkeyBytes) {\n      throw new Error(\n        'Error converting to X25519; Invalid Ed25519 public key.');\n    }\n    const dhPublicKeyBase58 = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(dhPubkeyBytes);\n    return dhPublicKeyBase58;\n  }\n\n  /**\n   * @param {string} privateKeyBase58 - The base58 encoded Ed25519 Private key.\n   *\n   * @returns {string} The base58 encoded X25519 Private key.\n   */\n  static convertFromEdPrivateKey({privateKeyBase58}) {\n    const edPrivkeyBytes = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(privateKeyBase58);\n    // Converts a 64-byte Ed25519 secret key (or just the first 32-byte part of\n    // it, which is the secret value) into a 32-byte Curve25519 secret key\n    const dhPrivkeyBytes = ed2curve__WEBPACK_IMPORTED_MODULE_1__.convertSecretKey(edPrivkeyBytes);\n    // note: a future version should make this method async to allow use of\n    // noble to convert private keys -- but `ed2curve` is much faster x100:\n    // const {head: dhPrivkeyBytes} = await utils.getExtendedPublicKey(\n    //   edPrivkeyBytes.slice(0, 32));\n    if(!dhPrivkeyBytes) {\n      throw new Error(\n        'Error converting to X25519; Invalid Ed25519 private key.');\n    }\n    const dhPrivateKeyBase58 = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(dhPrivkeyBytes);\n    return dhPrivateKeyBase58;\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   * @param {boolean} [options.includeContext] - Include JSON-LD context?\n   *\n   * @returns {object} A plain js object that's ready for serialization\n   *   (to JSON, etc), for use in DIDs etc.\n   */\n  export({publicKey = false, privateKey = false, includeContext = false} = {}) {\n    if(!(publicKey || privateKey)) {\n      throw new TypeError(\n        'Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const exportedKey = {\n      id: this.id,\n      type: this.type\n    };\n    if(includeContext) {\n      exportedKey['@context'] = X25519KeyAgreementKey2019.SUITE_CONTEXT;\n    }\n    if(this.controller) {\n      exportedKey.controller = this.controller;\n    }\n    if(publicKey) {\n      exportedKey.publicKeyBase58 = this.publicKeyBase58;\n    }\n    if(privateKey) {\n      exportedKey.privateKeyBase58 = this.privateKeyBase58;\n    }\n    if(this.revoked) {\n      exportedKey.revoked = this.revoked;\n    }\n    return exportedKey;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded X25519 public key\n   * fingerprint (for use with cryptonyms, for example).\n   *\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @param {string} publicKeyBase58 - The base58 encoded public key material.\n   *\n   * @returns {string} The fingerprint.\n   */\n  static fingerprintFromPublicKey({publicKeyBase58}) {\n    // X25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec('x25519-pub') + key bytes)\n    const pubkeyBytes = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(publicKeyBase58);\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    // See https://github.com/multiformats/multicodec/blob/master/table.csv\n    // 0xec is the value for X25519 public key\n    // 0x01 is from varint.encode(0xec) -> [0xec, 0x01]\n    // See https://github.com/multiformats/unsigned-varint\n    buffer[0] = 0xec; //\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${(0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(buffer)}`;\n  }\n\n  /**\n   * Creates an instance of X25519KeyAgreementKey2019 from a key fingerprint.\n   *\n   * @param {string} fingerprint - The fingerprint.\n   *\n   * @throws Unsupported Fingerprint Type.\n   * @returns {X25519KeyAgreementKey2019} The key.\n   */\n  static fromFingerprint({fingerprint} = {}) {\n    if(!fingerprint ||\n      !(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      throw new Error('`fingerprint` must be a multibase encoded string.');\n    }\n    // skip leading `z` that indicates base58 encoding\n    const buffer = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(fingerprint.substr(1));\n\n    // buffer is: 0xec 0x01 <public key bytes>\n    if(buffer[0] !== 0xec || buffer[1] !== 0x01) {\n      throw new Error(`Unsupported Fingerprint Type: ${fingerprint}`);\n    }\n\n    return new X25519KeyAgreementKey2019({\n      publicKeyBase58: (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.encode)(buffer.slice(2))\n    });\n  }\n\n  /**\n   * Derives a shared secret via a given public key, typically for use\n   * as one parameter for computing a shared key. It should not be used as\n   * a shared key itself, but rather input into a key derivation function (KDF)\n   * to produce a shared key.\n   *\n   * @param {LDKeyPair} publicKey - Remote key pair.\n   *\n   * @throws {TypeError} On invalid base58 encoding of public or private keys.\n   * @returns {Promise<Uint8Array>} The derived secret.\n   */\n  async deriveSecret({publicKey}) {\n    const remotePublicKey = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(publicKey.publicKeyBase58);\n    const privateKey = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(this.privateKeyBase58);\n\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_3__.deriveSecret)({privateKey, remotePublicKey});\n  }\n\n  /**\n   * Generates and returns a multiformats encoded X25519 public key\n   * fingerprint (for use with cryptonyms, for example).\n   *\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    const {publicKeyBase58} = this;\n    return X25519KeyAgreementKey2019\n      .fingerprintFromPublicKey({publicKeyBase58});\n  }\n\n  /**\n   * Tests whether the fingerprint was generated from a given key pair.\n   *\n   * @example\n   * > xKeyPair.verifyFingerprint('...');\n   * {valid: true};\n   *\n   * @param {string} fingerprint - A Base58 public key.\n   *\n   * @returns {object} An object indicating valid is true or false.\n   */\n  verifyFingerprint({fingerprint} = {}) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if(!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(fingerprint.slice(1));\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n    let publicKeyBuffer;\n    try {\n      publicKeyBuffer = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(this.publicKeyBase58);\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n    // validate the first buffer multicodec bytes 0xec 0x01\n    const valid = fingerprintBuffer[0] === 0xec &&\n      fingerprintBuffer[1] === 0x01 &&\n      publicKeyBuffer.toString() === fingerprintBuffer.slice(2).toString();\n    if(!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false\n      };\n    }\n    return {valid};\n  }\n}\n\n// Used by CryptoLD harness for dispatching.\nX25519KeyAgreementKey2019.suite = SUITE_ID;\nX25519KeyAgreementKey2019.SUITE_CONTEXT =\n  'https://w3id.org/security/suites/x25519-2019/v1';\n\n/**\n * Decodes a given string as a multibase-encoded multicodec value.\n *\n * @param {Uint8Array} header - Expected header bytes for the multicodec value.\n * @param {string} text - Multibase encoded string to decode.\n * @returns {Uint8Array} Decoded bytes.\n */\nfunction _multibaseDecode(header, text) {\n  const mcValue = (0,base58_universal__WEBPACK_IMPORTED_MODULE_2__.decode)(text.slice(1));\n\n  if(!header.every((val, i) => mcValue[i] === val)) {\n    throw new Error('Multibase value does not have expected header.');\n  }\n\n  return mcValue.slice(header.length);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/X25519KeyAgreementKey2019.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto-nacl.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto-nacl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deriveSecret: () => (/* binding */ deriveSecret),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair)\n/* harmony export */ });\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\n/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n\nasync function deriveSecret({privateKey, remotePublicKey}) {\n  return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.scalarMult(privateKey, remotePublicKey);\n}\n\nasync function generateKeyPair() {\n  // Each is a Uint8Array with 32-byte key\n  const {publicKey, secretKey: privateKey} = tweetnacl__WEBPACK_IMPORTED_MODULE_0__.box.keyPair();\n  return {publicKey, privateKey};\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMTkvbGliL2NyeXB0by1uYWNsLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUM2Qjs7QUFFdEIsNkJBQTZCLDRCQUE0QjtBQUNoRSxTQUFTLGlEQUFlO0FBQ3hCOztBQUVPO0FBQ1A7QUFDQSxTQUFTLGtDQUFrQyxFQUFFLDBDQUFRO0FBQ3JELFVBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci94MjU1MTkta2V5LWFncmVlbWVudC1rZXktMjAxOS9saWIvY3J5cHRvLW5hY2wuanM/ODhiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAyMSBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5pbXBvcnQgbmFjbCBmcm9tICd0d2VldG5hY2wnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVyaXZlU2VjcmV0KHtwcml2YXRlS2V5LCByZW1vdGVQdWJsaWNLZXl9KSB7XG4gIHJldHVybiBuYWNsLnNjYWxhck11bHQocHJpdmF0ZUtleSwgcmVtb3RlUHVibGljS2V5KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpcigpIHtcbiAgLy8gRWFjaCBpcyBhIFVpbnQ4QXJyYXkgd2l0aCAzMi1ieXRlIGtleVxuICBjb25zdCB7cHVibGljS2V5LCBzZWNyZXRLZXk6IHByaXZhdGVLZXl9ID0gbmFjbC5ib3gua2V5UGFpcigpO1xuICByZXR1cm4ge3B1YmxpY0tleSwgcHJpdmF0ZUtleX07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto-nacl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deriveSecret: () => (/* binding */ deriveSecret),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _crypto_nacl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crypto-nacl.js */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto-nacl.js\");\n/*!\n * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\nconst PUBLIC_KEY_DER_PREFIX = new Uint8Array([\n  48, 42, 48, 5, 6, 3, 43, 101, 110, 3, 33, 0\n]);\n\nconst PRIVATE_KEY_DER_PREFIX = new Uint8Array([\n  48, 46, 2, 1, 0, 48, 5, 6, 3, 43, 101, 110, 4, 34, 4, 32\n]);\n\nasync function deriveSecretNative({privateKey, remotePublicKey}) {\n  const nodePrivateKey = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n    key: Buffer.concat([PRIVATE_KEY_DER_PREFIX, privateKey]),\n    format: 'der',\n    type: 'pkcs8'\n  });\n  const nodePublicKey = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPublicKey({\n    key: Buffer.concat([PUBLIC_KEY_DER_PREFIX, remotePublicKey]),\n    format: 'der',\n    type: 'spki'\n  });\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0__.diffieHellman({\n    privateKey: nodePrivateKey,\n    publicKey: nodePublicKey,\n  });\n}\n\nasync function generateKeyPairNative() {\n  const generateKeyPairAsync = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(node_crypto__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair);\n  const publicKeyEncoding = {format: 'der', type: 'spki'};\n  const privateKeyEncoding = {format: 'der', type: 'pkcs8'};\n  const {publicKey: publicDerBytes, privateKey: privateDerBytes} =\n    await generateKeyPairAsync('x25519', {\n      publicKeyEncoding, privateKeyEncoding\n    });\n  const publicKey = publicDerBytes.slice(12, 12 + 32);\n  const privateKey = privateDerBytes.slice(16, 16 + 32);\n  return {publicKey, privateKey};\n}\n\nlet deriveSecret;\nlet generateKeyPair;\nif(node_crypto__WEBPACK_IMPORTED_MODULE_0__.diffieHellman) {\n  deriveSecret = deriveSecretNative;\n  generateKeyPair = generateKeyPairNative;\n} else {\n  deriveSecret = _crypto_nacl_js__WEBPACK_IMPORTED_MODULE_2__.deriveSecret;\n  generateKeyPair = _crypto_nacl_js__WEBPACK_IMPORTED_MODULE_2__.generateKeyPair;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMTkvbGliL2NyeXB0by5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNzQztBQUNGO0FBQ1c7O0FBRS9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DLDRCQUE0QjtBQUMvRCx5QkFBeUIseURBQXVCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx3QkFBd0Isd0RBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxTQUFTLHNEQUFvQjtBQUM3QjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsK0JBQStCLG9EQUFTLENBQUMsd0RBQXNCO0FBQy9ELDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIsU0FBUyx3REFBd0Q7QUFDakU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQSxHQUFHLHNEQUFvQjtBQUN2QjtBQUNBO0FBQ0EsRUFBRTtBQUNGLGlCQUFpQix5REFBdUI7QUFDeEMsb0JBQW9CLDREQUEwQjtBQUM5Qzs7QUFFdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMTkvbGliL2NyeXB0by5qcz9lOTdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tICdub2RlOmNyeXB0byc7XG5pbXBvcnQge3Byb21pc2lmeX0gZnJvbSAnbm9kZTp1dGlsJztcbmltcG9ydCAqIGFzIGNyeXB0b05hY2wgZnJvbSAnLi9jcnlwdG8tbmFjbC5qcyc7XG5cbmNvbnN0IFBVQkxJQ19LRVlfREVSX1BSRUZJWCA9IG5ldyBVaW50OEFycmF5KFtcbiAgNDgsIDQyLCA0OCwgNSwgNiwgMywgNDMsIDEwMSwgMTEwLCAzLCAzMywgMFxuXSk7XG5cbmNvbnN0IFBSSVZBVEVfS0VZX0RFUl9QUkVGSVggPSBuZXcgVWludDhBcnJheShbXG4gIDQ4LCA0NiwgMiwgMSwgMCwgNDgsIDUsIDYsIDMsIDQzLCAxMDEsIDExMCwgNCwgMzQsIDQsIDMyXG5dKTtcblxuYXN5bmMgZnVuY3Rpb24gZGVyaXZlU2VjcmV0TmF0aXZlKHtwcml2YXRlS2V5LCByZW1vdGVQdWJsaWNLZXl9KSB7XG4gIGNvbnN0IG5vZGVQcml2YXRlS2V5ID0gY3J5cHRvLmNyZWF0ZVByaXZhdGVLZXkoe1xuICAgIGtleTogQnVmZmVyLmNvbmNhdChbUFJJVkFURV9LRVlfREVSX1BSRUZJWCwgcHJpdmF0ZUtleV0pLFxuICAgIGZvcm1hdDogJ2RlcicsXG4gICAgdHlwZTogJ3BrY3M4J1xuICB9KTtcbiAgY29uc3Qgbm9kZVB1YmxpY0tleSA9IGNyeXB0by5jcmVhdGVQdWJsaWNLZXkoe1xuICAgIGtleTogQnVmZmVyLmNvbmNhdChbUFVCTElDX0tFWV9ERVJfUFJFRklYLCByZW1vdGVQdWJsaWNLZXldKSxcbiAgICBmb3JtYXQ6ICdkZXInLFxuICAgIHR5cGU6ICdzcGtpJ1xuICB9KTtcbiAgcmV0dXJuIGNyeXB0by5kaWZmaWVIZWxsbWFuKHtcbiAgICBwcml2YXRlS2V5OiBub2RlUHJpdmF0ZUtleSxcbiAgICBwdWJsaWNLZXk6IG5vZGVQdWJsaWNLZXksXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXJOYXRpdmUoKSB7XG4gIGNvbnN0IGdlbmVyYXRlS2V5UGFpckFzeW5jID0gcHJvbWlzaWZ5KGNyeXB0by5nZW5lcmF0ZUtleVBhaXIpO1xuICBjb25zdCBwdWJsaWNLZXlFbmNvZGluZyA9IHtmb3JtYXQ6ICdkZXInLCB0eXBlOiAnc3BraSd9O1xuICBjb25zdCBwcml2YXRlS2V5RW5jb2RpbmcgPSB7Zm9ybWF0OiAnZGVyJywgdHlwZTogJ3BrY3M4J307XG4gIGNvbnN0IHtwdWJsaWNLZXk6IHB1YmxpY0RlckJ5dGVzLCBwcml2YXRlS2V5OiBwcml2YXRlRGVyQnl0ZXN9ID1cbiAgICBhd2FpdCBnZW5lcmF0ZUtleVBhaXJBc3luYygneDI1NTE5Jywge1xuICAgICAgcHVibGljS2V5RW5jb2RpbmcsIHByaXZhdGVLZXlFbmNvZGluZ1xuICAgIH0pO1xuICBjb25zdCBwdWJsaWNLZXkgPSBwdWJsaWNEZXJCeXRlcy5zbGljZSgxMiwgMTIgKyAzMik7XG4gIGNvbnN0IHByaXZhdGVLZXkgPSBwcml2YXRlRGVyQnl0ZXMuc2xpY2UoMTYsIDE2ICsgMzIpO1xuICByZXR1cm4ge3B1YmxpY0tleSwgcHJpdmF0ZUtleX07XG59XG5cbmxldCBkZXJpdmVTZWNyZXQ7XG5sZXQgZ2VuZXJhdGVLZXlQYWlyO1xuaWYoY3J5cHRvLmRpZmZpZUhlbGxtYW4pIHtcbiAgZGVyaXZlU2VjcmV0ID0gZGVyaXZlU2VjcmV0TmF0aXZlO1xuICBnZW5lcmF0ZUtleVBhaXIgPSBnZW5lcmF0ZUtleVBhaXJOYXRpdmU7XG59IGVsc2Uge1xuICBkZXJpdmVTZWNyZXQgPSBjcnlwdG9OYWNsLmRlcml2ZVNlY3JldDtcbiAgZ2VuZXJhdGVLZXlQYWlyID0gY3J5cHRvTmFjbC5nZW5lcmF0ZUtleVBhaXI7XG59XG5cbmV4cG9ydCB7ZGVyaXZlU2VjcmV0LCBnZW5lcmF0ZUtleVBhaXJ9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X25519KeyAgreementKey2019: () => (/* reexport safe */ _X25519KeyAgreementKey2019_js__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2019)\n/* harmony export */ });\n/* harmony import */ var _X25519KeyAgreementKey2019_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./X25519KeyAgreementKey2019.js */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/X25519KeyAgreementKey2019.js\");\n/*!\n * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMTkvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3lFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL3gyNTUxOS1rZXktYWdyZWVtZW50LWtleS0yMDE5L2xpYi9pbmRleC5qcz82YjA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbmV4cG9ydCB7WDI1NTE5S2V5QWdyZWVtZW50S2V5MjAxOX0gZnJvbSAnLi9YMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDE5LmpzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2019/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/X25519KeyAgreementKey2020.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/X25519KeyAgreementKey2020.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X25519KeyAgreementKey2020: () => (/* binding */ X25519KeyAgreementKey2020)\n/* harmony export */ });\n/* harmony import */ var base58_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base58-universal */ \"(ssr)/./node_modules/base58-universal/lib/index.js\");\n/* harmony import */ var crypto_ld__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-ld */ \"(ssr)/./node_modules/crypto-ld/lib/index.js\");\n/* harmony import */ var _noble_ed25519__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/ed25519 */ \"(ssr)/./node_modules/@noble/ed25519/lib/esm/index.js\");\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crypto.js */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto.js\");\n/*!\n * Copyright (c) 2021-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\n\n\nconst SUITE_ID = 'X25519KeyAgreementKey2020';\n// multibase base58-btc header\nconst MULTIBASE_BASE58BTC_HEADER = 'z';\n// multicodec ed25519-pub header as varint\nconst MULTICODEC_ED25519_PUB_HEADER = new Uint8Array([0xed, 0x01]);\n// multicodec ed25519-priv header as varint\nconst MULTICODEC_ED25519_PRIV_HEADER = new Uint8Array([0x80, 0x26]);\n// multicodec x25519-pub header as varint\nconst MULTICODEC_X25519_PUB_HEADER = new Uint8Array([0xec, 0x01]);\n// multicodec x25519-priv header as varint\nconst MULTICODEC_X25519_PRIV_HEADER = new Uint8Array([0x82, 0x26]);\n\nclass X25519KeyAgreementKey2020 extends crypto_ld__WEBPACK_IMPORTED_MODULE_1__.LDKeyPair {\n  /**\n   * @param {object} options - Options hashmap.\n   * @param {string} options.controller - Controller DID or document url.\n   * @param {string} [options.id] - Key ID, typically composed of controller\n   *   URL and key fingerprint as hash fragment.\n   * @param {string} options.publicKeyMultibase - Multibase encoded public key.\n   * @param {string} [options.privateKeyMultibase] - Multibase private key.\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is considered\n   *   not revoked. Note that this mechanism is slightly different than DID\n   *   Document key revocation, where a DID controller can revoke a key from\n   *   that DID by removing it from the DID Document.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.type = SUITE_ID;\n    const {publicKeyMultibase, privateKeyMultibase} = options;\n\n    if(!publicKeyMultibase) {\n      throw new TypeError('The \"publicKeyMultibase\" property is required.');\n    }\n\n    if(!publicKeyMultibase || !_isValidKeyHeader(\n      publicKeyMultibase, MULTICODEC_X25519_PUB_HEADER)) {\n      throw new Error(\n        '\"publicKeyMultibase\" has invalid header bytes: ' +\n        `\"${publicKeyMultibase}\".`);\n    }\n\n    if(privateKeyMultibase && !_isValidKeyHeader(\n      privateKeyMultibase, MULTICODEC_X25519_PRIV_HEADER)) {\n      throw new Error('\"privateKeyMultibase\" has invalid header bytes.');\n    }\n\n    // assign valid key values\n    this.publicKeyMultibase = publicKeyMultibase;\n    this.privateKeyMultibase = privateKeyMultibase;\n\n    if(this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  /**\n   * Generates a new public/private X25519 Key Pair.\n   *\n   * @param {object} [options={}] - Keypair options (see controller docstring).\n   *\n   * @returns {Promise<X25519KeyAgreementKey2020>} Generated key pair.\n   */\n  static async generate(options = {}) {\n    const {publicKey, privateKey} = await (0,_crypto_js__WEBPACK_IMPORTED_MODULE_3__.generateKeyPair)();\n\n    return new X25519KeyAgreementKey2020({\n      publicKeyMultibase:\n        _multibaseEncode(MULTICODEC_X25519_PUB_HEADER, publicKey),\n      privateKeyMultibase:\n        _multibaseEncode(MULTICODEC_X25519_PRIV_HEADER, privateKey),\n      ...options\n    });\n  }\n\n  /**\n   * Creates an X25519KeyAgreementKey2020 Key Pair from an existing key\n   * (constructor method).\n   *\n   * @param {object} [options={}] - Keypair options (see controller docstring).\n   *\n   * @returns {X25519KeyAgreementKey2020} An X25519 Key Pair.\n   */\n  static async from(options = {}) {\n    // Check to see if this is an X25519KeyAgreementKey2019\n    if(options.publicKeyBase58) {\n      // Convert it to a 2020 key pair instance\n      return this.fromX25519KeyAgreementKey2019(options);\n    }\n    return new X25519KeyAgreementKey2020(options);\n  }\n\n  /**\n   * Creates an X25519KeyAgreementKey2020 Key Pair from an existing 2019 key\n   * (backwards compatibility method).\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {string} options.publicKeyBase58 - Base58btc encoded public key.\n   * @param {string} [options.privateKeyBase58] - Base58btc encoded private key.\n   * @param {object} [options.keyPairOptions] - Other options.\n   *\n   * @returns {Promise<X25519KeyAgreementKey2020>} 2020 Crypto suite key pair.\n   */\n  static async fromX25519KeyAgreementKey2019({\n    publicKeyBase58, privateKeyBase58, ...keyPairOptions\n  } = {}) {\n    let publicKeyMultibase;\n    let privateKeyMultibase;\n\n    if(publicKeyBase58) {\n      // prefix with `z` to indicate multi-base base58btc encoding\n      publicKeyMultibase = _multibaseEncode(\n        MULTICODEC_X25519_PUB_HEADER, base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(publicKeyBase58));\n    }\n    if(privateKeyBase58) {\n      // prefix with `z` to indicate multi-base base58btc encoding\n      privateKeyMultibase = _multibaseEncode(\n        MULTICODEC_X25519_PRIV_HEADER, base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(privateKeyBase58));\n    }\n    return new X25519KeyAgreementKey2020({\n      publicKeyMultibase, privateKeyMultibase, ...keyPairOptions\n    });\n  }\n\n  /**\n   * Converts a keypair instance of type Ed25519VerificationKey2020 to an\n   * instance of this class.\n   *\n   * @see https://github.com/digitalbazaar/ed25519-verification-key-2020\n   *\n   * @param {object} [options={}] - Options hashmap.\n   *\n   * @typedef {object} Ed25519VerificationKey2020\n   * @param {Ed25519VerificationKey2020} options.keyPair - Source key pair.\n   *\n   * @returns {X25519KeyAgreementKey2020} A derived/converted key agreement\n   *   key pair.\n   */\n  static fromEd25519VerificationKey2020({keyPair} = {}) {\n    if(!keyPair.publicKeyMultibase) {\n      throw new Error('Source public key is required to convert.');\n    }\n\n    if(!keyPair.publicKeyMultibase.startsWith(MULTIBASE_BASE58BTC_HEADER)) {\n      throw new TypeError(\n        'Expecting \"publicKeyMultibase\" value to be multibase base58btc ' +\n        'encoded (must start with \"z\").'\n      );\n    }\n\n    const xKey = new X25519KeyAgreementKey2020({\n      controller: keyPair.controller,\n      publicKeyMultibase: X25519KeyAgreementKey2020\n        .convertFromEdPublicKey(keyPair)\n    });\n\n    if(keyPair.privateKeyMultibase) {\n      if(!keyPair.privateKeyMultibase.startsWith(MULTIBASE_BASE58BTC_HEADER)) {\n        throw new TypeError(\n          'Expecting \"privateKeyMultibase\" value to be multibase base58btc ' +\n          'encoded (must start with \"z\").'\n        );\n      }\n\n      xKey.privateKeyMultibase = X25519KeyAgreementKey2020\n        .convertFromEdPrivateKey(keyPair);\n    }\n\n    return xKey;\n  }\n\n  /**\n   * @param {object} [options={}] - Options hashmap.\n   * @param {string} options.publicKeyMultibase - Multibase encoded Ed25519\n   *   public key.\n   *\n   * @returns {string} Multibase encoded converted X25519 Public key.\n   */\n  static convertFromEdPublicKey({publicKeyMultibase} = {}) {\n    if(!publicKeyMultibase) {\n      throw new Error('Source public key is required to convert.');\n    }\n\n    const edPubkeyBytes =\n      _multibaseDecode(MULTICODEC_ED25519_PUB_HEADER, publicKeyMultibase);\n\n    // Converts a 32-byte Ed25519 public key into a 32-byte Curve25519 key\n    // Returns null if the given public key in not a valid Ed25519 public key.\n    const dhPubkeyBytes = _noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.Point.fromHex(edPubkeyBytes).toX25519();\n    if(!dhPubkeyBytes) {\n      throw new Error(\n        'Error converting to X25519; Invalid Ed25519 public key.');\n    }\n    return _multibaseEncode(MULTICODEC_X25519_PUB_HEADER, dhPubkeyBytes);\n  }\n\n  /**\n   * @param {object} [options={}] - Options hashmap.\n   * @param {string} options.privateKeyMultibase - Multibase encoded Ed25519\n   *   private key.\n   *\n   * @returns {string} Multibase encoded converted X25519 Private key.\n   */\n  static convertFromEdPrivateKey({privateKeyMultibase} = {}) {\n    if(!privateKeyMultibase) {\n      throw new Error('Source private key is required to convert.');\n    }\n\n    const edPrivkeyBytes =\n      _multibaseDecode(MULTICODEC_ED25519_PRIV_HEADER, privateKeyMultibase);\n    // Converts a 64-byte Ed25519 secret key (or just the first 32-byte part of\n    // it, which is the secret value) into a 32-byte Curve25519 secret key\n    const dhPrivkeyBytes = (0,_crypto_js__WEBPACK_IMPORTED_MODULE_3__.ed25519SecretKeyToX25519)(edPrivkeyBytes);\n    // note: a future version should make this method async to allow use of\n    // noble to convert private keys -- but the tweetnacl version used\n    // internally is much faster (~ x100):\n    // const {head: dhPrivkeyBytes} = await utils.getExtendedPublicKey(\n    //   edPrivkeyBytes.slice(0, 32));\n    if(!dhPrivkeyBytes) {\n      throw new Error(\n        'Error converting to X25519; Invalid Ed25519 private key.');\n    }\n    return _multibaseEncode(MULTICODEC_X25519_PRIV_HEADER, dhPrivkeyBytes);\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   * @param {boolean} [options.includeContext] - Include JSON-LD context?\n   *\n   * @returns {object} A plain js object that's ready for serialization\n   *   (to JSON, etc), for use in DIDs etc.\n   */\n  export({publicKey = false, privateKey = false, includeContext = false} = {}) {\n    if(!(publicKey || privateKey)) {\n      throw new TypeError(\n        'Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const exportedKey = {\n      id: this.id,\n      type: this.type\n    };\n    if(includeContext) {\n      exportedKey['@context'] = X25519KeyAgreementKey2020.SUITE_CONTEXT;\n    }\n    if(this.controller) {\n      exportedKey.controller = this.controller;\n    }\n    if(publicKey) {\n      exportedKey.publicKeyMultibase = this.publicKeyMultibase;\n    }\n    if(privateKey) {\n      exportedKey.privateKeyMultibase = this.privateKeyMultibase;\n    }\n    if(this.revoked) {\n      exportedKey.revoked = this.revoked;\n    }\n    return exportedKey;\n  }\n\n  /**\n   * Generates and returns a base58btc multibase encoded value of a multicodec\n   * X25519 public key fingerprint (for use with cryptonyms, for example).\n   *\n   * @see https://github.com/multiformats/multicodec\n   * @see https://github.com/multiformats/multibase\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {string} options.publicKeyMultibase - Multibase encoded public key.\n   *\n   * @returns {string} The fingerprint.\n   */\n  static fingerprintFromPublicKey({publicKeyMultibase} = {}) {\n    if(!publicKeyMultibase) {\n      throw new Error('Source public key is required.');\n    }\n\n    return publicKeyMultibase;\n  }\n\n  /**\n   * Creates an instance of X25519KeyAgreementKey2020 from a key fingerprint.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {string} options.fingerprint - Public key fingerprint.\n   *\n   * @returns {X25519KeyAgreementKey2020} Key pair instance (public key material\n   *   only) created from the fingerprint.\n   */\n  static fromFingerprint({fingerprint} = {}) {\n    return new X25519KeyAgreementKey2020({\n      publicKeyMultibase: fingerprint\n    });\n  }\n\n  /**\n   * Derives a shared secret via a given public key, typically for use\n   * as one parameter for computing a shared key. It should not be used as\n   * a shared key itself, but rather as an input into a key derivation function\n   * (KDF) to produce a shared key.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {LDKeyPair} options.publicKey - Remote key pair.\n   *\n   * @returns {Promise<Uint8Array>} Derived secret.\n   */\n  async deriveSecret({publicKey}) {\n    const remotePublicKey = _multibaseDecode(\n      MULTICODEC_X25519_PUB_HEADER, publicKey.publicKeyMultibase);\n    const privateKey = _multibaseDecode(\n      MULTICODEC_X25519_PRIV_HEADER, this.privateKeyMultibase);\n\n    return (0,_crypto_js__WEBPACK_IMPORTED_MODULE_3__.deriveSecret)({privateKey, remotePublicKey});\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * X25519 public key fingerprint (for use with cryptonyms, for example).\n   *\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    return this.publicKeyMultibase;\n  }\n\n  /**\n   * Tests whether the fingerprint was generated from a given key pair.\n   *\n   * @example\n   * xKeyPair.verifyFingerprint('...');\n   * // {valid: true};\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {string} options.fingerprint - An x25519 key fingerprint (typically\n   *   from a key id).\n   *\n   * @returns {object} An object indicating valid is true or false.\n   */\n  verifyFingerprint({fingerprint} = {}) {\n    // fingerprint should have `z` prefix indicating\n    // that it's base58btc multibase encoded\n    if(!_isValidKeyHeader(fingerprint, MULTICODEC_X25519_PUB_HEADER)) {\n      throw new Error(\n        `\"fingerprint\" has invalid header bytes: \"${fingerprint}\".`);\n    }\n\n    return {valid: true};\n  }\n}\n\n// Used by CryptoLD harness for dispatching.\nX25519KeyAgreementKey2020.suite = SUITE_ID;\n// Used by CryptoLD harness's fromKeyId() method.\nX25519KeyAgreementKey2020.SUITE_CONTEXT =\n  'https://w3id.org/security/suites/x25519-2020/v1';\n\n/**\n * Checks to see if the given value is a valid multibase encoded key.\n *\n * @param {Uint8Array} multibaseKey - The multibase-encoded key value.\n * @param {Uint8Array} expectedHeader - The expected header for the key value.\n * @returns {boolean} Returns true if the header is valid, false otherwise.\n */\nfunction _isValidKeyHeader(multibaseKey, expectedHeader) {\n  if(!(typeof multibaseKey === 'string' &&\n    multibaseKey[0] === MULTIBASE_BASE58BTC_HEADER)) {\n    return false;\n  }\n\n  const keyBytes = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(multibaseKey.slice(1));\n  return expectedHeader.every((val, i) => keyBytes[i] === val);\n}\n\n/**\n * Encodes a given Uint8Array to multibase-encoded string.\n *\n * @param {Uint8Array} header - Multicodec header to prepend to the bytes.\n * @param {Uint8Array} bytes - Bytes to encode.\n * @returns {string} Multibase-encoded string.\n */\nfunction _multibaseEncode(header, bytes) {\n  const mcBytes = new Uint8Array(header.length + bytes.length);\n\n  mcBytes.set(header);\n  mcBytes.set(bytes, header.length);\n\n  return MULTIBASE_BASE58BTC_HEADER + base58_universal__WEBPACK_IMPORTED_MODULE_0__.encode(mcBytes);\n}\n\n/**\n * Decodes a given string as a multibase-encoded multicodec value.\n *\n * @param {Uint8Array} header - Expected header bytes for the multicodec value.\n * @param {string} text - Multibase encoded string to decode.\n * @returns {Uint8Array} Decoded bytes.\n */\nfunction _multibaseDecode(header, text) {\n  const mcValue = base58_universal__WEBPACK_IMPORTED_MODULE_0__.decode(text.substr(1));\n\n  if(!header.every((val, i) => mcValue[i] === val)) {\n    throw new Error('Multibase value does not have expected header.');\n  }\n\n  return mcValue.slice(header.length);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMjAvbGliL1gyNTUxOUtleUFncmVlbWVudEtleTIwMjAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDOEM7QUFDVjtBQUNDOztBQUloQjs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyx3Q0FBd0MsZ0RBQVM7QUFDeEQ7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBLFdBQVcseUNBQXlDOztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsZ0JBQWdCLEdBQUcsbUJBQW1CO0FBQ3pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRLFdBQVc7QUFDaEM7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBLG9DQUFvQztBQUNwQyxXQUFXLHVCQUF1QixRQUFRLDJEQUFlOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVEsV0FBVztBQUNoQztBQUNBLGVBQWUsMkJBQTJCO0FBQzFDO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRLFdBQVc7QUFDaEMsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxvREFBZ0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsb0RBQWdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVEsV0FBVztBQUNoQztBQUNBLGVBQWUsUUFBUTtBQUN2QixhQUFhLDRCQUE0QjtBQUN6QztBQUNBLGVBQWUsMkJBQTJCO0FBQzFDO0FBQ0E7QUFDQSx5Q0FBeUMsU0FBUyxJQUFJO0FBQ3REO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRLFdBQVc7QUFDaEMsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQ0FBaUMsb0JBQW9CLElBQUk7QUFDekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQixpREFBSztBQUMvQjtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUSxXQUFXO0FBQ2hDLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0Esa0NBQWtDLHFCQUFxQixJQUFJO0FBQzNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixvRUFBd0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVEsV0FBVztBQUNoQyxhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsVUFBVSwrREFBK0QsSUFBSTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUSxXQUFXO0FBQ2hDLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLG1DQUFtQyxvQkFBb0IsSUFBSTtBQUMzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVEsV0FBVztBQUNoQyxhQUFhLFFBQVE7QUFDckI7QUFDQSxlQUFlLDJCQUEyQjtBQUMxQztBQUNBO0FBQ0EsMEJBQTBCLGFBQWEsSUFBSTtBQUMzQztBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUSxXQUFXO0FBQ2hDLGFBQWEsV0FBVztBQUN4QjtBQUNBLGVBQWUscUJBQXFCO0FBQ3BDO0FBQ0Esc0JBQXNCLFVBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyx3REFBWSxFQUFFLDRCQUE0QjtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGFBQWEsUUFBUSxXQUFXO0FBQ2hDLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EscUJBQXFCLGFBQWEsSUFBSTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxZQUFZO0FBQ2hFOztBQUVBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsWUFBWTtBQUN2QixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixvREFBZ0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxZQUFZO0FBQ3ZCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQ0FBc0Msb0RBQWdCO0FBQ3REOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFFBQVE7QUFDbkIsYUFBYSxZQUFZO0FBQ3pCO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQWdCOztBQUVsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AZGlnaXRhbGJhemFhci94MjU1MTkta2V5LWFncmVlbWVudC1rZXktMjAyMC9saWIvWDI1NTE5S2V5QWdyZWVtZW50S2V5MjAyMC5qcz8xZWI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIxLTIwMjIgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuaW1wb3J0ICogYXMgYmFzZTU4YnRjIGZyb20gJ2Jhc2U1OC11bml2ZXJzYWwnO1xuaW1wb3J0IHtMREtleVBhaXJ9IGZyb20gJ2NyeXB0by1sZCc7XG5pbXBvcnQge1BvaW50fSBmcm9tICdAbm9ibGUvZWQyNTUxOSc7XG5cbmltcG9ydCB7XG4gIGRlcml2ZVNlY3JldCwgZWQyNTUxOVNlY3JldEtleVRvWDI1NTE5LCBnZW5lcmF0ZUtleVBhaXJcbn0gZnJvbSAnLi9jcnlwdG8uanMnO1xuXG5jb25zdCBTVUlURV9JRCA9ICdYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwJztcbi8vIG11bHRpYmFzZSBiYXNlNTgtYnRjIGhlYWRlclxuY29uc3QgTVVMVElCQVNFX0JBU0U1OEJUQ19IRUFERVIgPSAneic7XG4vLyBtdWx0aWNvZGVjIGVkMjU1MTktcHViIGhlYWRlciBhcyB2YXJpbnRcbmNvbnN0IE1VTFRJQ09ERUNfRUQyNTUxOV9QVUJfSEVBREVSID0gbmV3IFVpbnQ4QXJyYXkoWzB4ZWQsIDB4MDFdKTtcbi8vIG11bHRpY29kZWMgZWQyNTUxOS1wcml2IGhlYWRlciBhcyB2YXJpbnRcbmNvbnN0IE1VTFRJQ09ERUNfRUQyNTUxOV9QUklWX0hFQURFUiA9IG5ldyBVaW50OEFycmF5KFsweDgwLCAweDI2XSk7XG4vLyBtdWx0aWNvZGVjIHgyNTUxOS1wdWIgaGVhZGVyIGFzIHZhcmludFxuY29uc3QgTVVMVElDT0RFQ19YMjU1MTlfUFVCX0hFQURFUiA9IG5ldyBVaW50OEFycmF5KFsweGVjLCAweDAxXSk7XG4vLyBtdWx0aWNvZGVjIHgyNTUxOS1wcml2IGhlYWRlciBhcyB2YXJpbnRcbmNvbnN0IE1VTFRJQ09ERUNfWDI1NTE5X1BSSVZfSEVBREVSID0gbmV3IFVpbnQ4QXJyYXkoWzB4ODIsIDB4MjZdKTtcblxuZXhwb3J0IGNsYXNzIFgyNTUxOUtleUFncmVlbWVudEtleTIwMjAgZXh0ZW5kcyBMREtleVBhaXIge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGhhc2htYXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmNvbnRyb2xsZXIgLSBDb250cm9sbGVyIERJRCBvciBkb2N1bWVudCB1cmwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pZF0gLSBLZXkgSUQsIHR5cGljYWxseSBjb21wb3NlZCBvZiBjb250cm9sbGVyXG4gICAqICAgVVJMIGFuZCBrZXkgZmluZ2VycHJpbnQgYXMgaGFzaCBmcmFnbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucHVibGljS2V5TXVsdGliYXNlIC0gTXVsdGliYXNlIGVuY29kZWQgcHVibGljIGtleS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnByaXZhdGVLZXlNdWx0aWJhc2VdIC0gTXVsdGliYXNlIHByaXZhdGUga2V5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucmV2b2tlZF0gLSBUaW1lc3RhbXAgb2Ygd2hlbiB0aGUga2V5IGhhcyBiZWVuXG4gICAqICAgcmV2b2tlZCwgaW4gUkZDMzMzOSBmb3JtYXQuIElmIG5vdCBwcmVzZW50LCB0aGUga2V5IGl0c2VsZiBpcyBjb25zaWRlcmVkXG4gICAqICAgbm90IHJldm9rZWQuIE5vdGUgdGhhdCB0aGlzIG1lY2hhbmlzbSBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdGhhbiBESURcbiAgICogICBEb2N1bWVudCBrZXkgcmV2b2NhdGlvbiwgd2hlcmUgYSBESUQgY29udHJvbGxlciBjYW4gcmV2b2tlIGEga2V5IGZyb21cbiAgICogICB0aGF0IERJRCBieSByZW1vdmluZyBpdCBmcm9tIHRoZSBESUQgRG9jdW1lbnQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLnR5cGUgPSBTVUlURV9JRDtcbiAgICBjb25zdCB7cHVibGljS2V5TXVsdGliYXNlLCBwcml2YXRlS2V5TXVsdGliYXNlfSA9IG9wdGlvbnM7XG5cbiAgICBpZighcHVibGljS2V5TXVsdGliYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJwdWJsaWNLZXlNdWx0aWJhc2VcIiBwcm9wZXJ0eSBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG5cbiAgICBpZighcHVibGljS2V5TXVsdGliYXNlIHx8ICFfaXNWYWxpZEtleUhlYWRlcihcbiAgICAgIHB1YmxpY0tleU11bHRpYmFzZSwgTVVMVElDT0RFQ19YMjU1MTlfUFVCX0hFQURFUikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1wicHVibGljS2V5TXVsdGliYXNlXCIgaGFzIGludmFsaWQgaGVhZGVyIGJ5dGVzOiAnICtcbiAgICAgICAgYFwiJHtwdWJsaWNLZXlNdWx0aWJhc2V9XCIuYCk7XG4gICAgfVxuXG4gICAgaWYocHJpdmF0ZUtleU11bHRpYmFzZSAmJiAhX2lzVmFsaWRLZXlIZWFkZXIoXG4gICAgICBwcml2YXRlS2V5TXVsdGliYXNlLCBNVUxUSUNPREVDX1gyNTUxOV9QUklWX0hFQURFUikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJwcml2YXRlS2V5TXVsdGliYXNlXCIgaGFzIGludmFsaWQgaGVhZGVyIGJ5dGVzLicpO1xuICAgIH1cblxuICAgIC8vIGFzc2lnbiB2YWxpZCBrZXkgdmFsdWVzXG4gICAgdGhpcy5wdWJsaWNLZXlNdWx0aWJhc2UgPSBwdWJsaWNLZXlNdWx0aWJhc2U7XG4gICAgdGhpcy5wcml2YXRlS2V5TXVsdGliYXNlID0gcHJpdmF0ZUtleU11bHRpYmFzZTtcblxuICAgIGlmKHRoaXMuY29udHJvbGxlciAmJiAhdGhpcy5pZCkge1xuICAgICAgdGhpcy5pZCA9IGAke3RoaXMuY29udHJvbGxlcn0jJHt0aGlzLmZpbmdlcnByaW50KCl9YDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgbmV3IHB1YmxpYy9wcml2YXRlIFgyNTUxOSBLZXkgUGFpci5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAtIEtleXBhaXIgb3B0aW9ucyAoc2VlIGNvbnRyb2xsZXIgZG9jc3RyaW5nKS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8WDI1NTE5S2V5QWdyZWVtZW50S2V5MjAyMD59IEdlbmVyYXRlZCBrZXkgcGFpci5cbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZW5lcmF0ZShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7cHVibGljS2V5LCBwcml2YXRlS2V5fSA9IGF3YWl0IGdlbmVyYXRlS2V5UGFpcigpO1xuXG4gICAgcmV0dXJuIG5ldyBYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwKHtcbiAgICAgIHB1YmxpY0tleU11bHRpYmFzZTpcbiAgICAgICAgX211bHRpYmFzZUVuY29kZShNVUxUSUNPREVDX1gyNTUxOV9QVUJfSEVBREVSLCBwdWJsaWNLZXkpLFxuICAgICAgcHJpdmF0ZUtleU11bHRpYmFzZTpcbiAgICAgICAgX211bHRpYmFzZUVuY29kZShNVUxUSUNPREVDX1gyNTUxOV9QUklWX0hFQURFUiwgcHJpdmF0ZUtleSksXG4gICAgICAuLi5vcHRpb25zXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwIEtleSBQYWlyIGZyb20gYW4gZXhpc3Rpbmcga2V5XG4gICAqIChjb25zdHJ1Y3RvciBtZXRob2QpLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dIC0gS2V5cGFpciBvcHRpb25zIChzZWUgY29udHJvbGxlciBkb2NzdHJpbmcpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7WDI1NTE5S2V5QWdyZWVtZW50S2V5MjAyMH0gQW4gWDI1NTE5IEtleSBQYWlyLlxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGZyb20ob3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYW4gWDI1NTE5S2V5QWdyZWVtZW50S2V5MjAxOVxuICAgIGlmKG9wdGlvbnMucHVibGljS2V5QmFzZTU4KSB7XG4gICAgICAvLyBDb252ZXJ0IGl0IHRvIGEgMjAyMCBrZXkgcGFpciBpbnN0YW5jZVxuICAgICAgcmV0dXJuIHRoaXMuZnJvbVgyNTUxOUtleUFncmVlbWVudEtleTIwMTkob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWDI1NTE5S2V5QWdyZWVtZW50S2V5MjAyMChvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIFgyNTUxOUtleUFncmVlbWVudEtleTIwMjAgS2V5IFBhaXIgZnJvbSBhbiBleGlzdGluZyAyMDE5IGtleVxuICAgKiAoYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgbWV0aG9kKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgaGFzaG1hcC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucHVibGljS2V5QmFzZTU4IC0gQmFzZTU4YnRjIGVuY29kZWQgcHVibGljIGtleS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnByaXZhdGVLZXlCYXNlNThdIC0gQmFzZTU4YnRjIGVuY29kZWQgcHJpdmF0ZSBrZXkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5rZXlQYWlyT3B0aW9uc10gLSBPdGhlciBvcHRpb25zLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwPn0gMjAyMCBDcnlwdG8gc3VpdGUga2V5IHBhaXIuXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZnJvbVgyNTUxOUtleUFncmVlbWVudEtleTIwMTkoe1xuICAgIHB1YmxpY0tleUJhc2U1OCwgcHJpdmF0ZUtleUJhc2U1OCwgLi4ua2V5UGFpck9wdGlvbnNcbiAgfSA9IHt9KSB7XG4gICAgbGV0IHB1YmxpY0tleU11bHRpYmFzZTtcbiAgICBsZXQgcHJpdmF0ZUtleU11bHRpYmFzZTtcblxuICAgIGlmKHB1YmxpY0tleUJhc2U1OCkge1xuICAgICAgLy8gcHJlZml4IHdpdGggYHpgIHRvIGluZGljYXRlIG11bHRpLWJhc2UgYmFzZTU4YnRjIGVuY29kaW5nXG4gICAgICBwdWJsaWNLZXlNdWx0aWJhc2UgPSBfbXVsdGliYXNlRW5jb2RlKFxuICAgICAgICBNVUxUSUNPREVDX1gyNTUxOV9QVUJfSEVBREVSLCBiYXNlNThidGMuZGVjb2RlKHB1YmxpY0tleUJhc2U1OCkpO1xuICAgIH1cbiAgICBpZihwcml2YXRlS2V5QmFzZTU4KSB7XG4gICAgICAvLyBwcmVmaXggd2l0aCBgemAgdG8gaW5kaWNhdGUgbXVsdGktYmFzZSBiYXNlNThidGMgZW5jb2RpbmdcbiAgICAgIHByaXZhdGVLZXlNdWx0aWJhc2UgPSBfbXVsdGliYXNlRW5jb2RlKFxuICAgICAgICBNVUxUSUNPREVDX1gyNTUxOV9QUklWX0hFQURFUiwgYmFzZTU4YnRjLmRlY29kZShwcml2YXRlS2V5QmFzZTU4KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWDI1NTE5S2V5QWdyZWVtZW50S2V5MjAyMCh7XG4gICAgICBwdWJsaWNLZXlNdWx0aWJhc2UsIHByaXZhdGVLZXlNdWx0aWJhc2UsIC4uLmtleVBhaXJPcHRpb25zXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBrZXlwYWlyIGluc3RhbmNlIG9mIHR5cGUgRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjAgdG8gYW5cbiAgICogaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGlnaXRhbGJhemFhci9lZDI1NTE5LXZlcmlmaWNhdGlvbi1rZXktMjAyMFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9ucyBoYXNobWFwLlxuICAgKlxuICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAyMFxuICAgKiBAcGFyYW0ge0VkMjU1MTlWZXJpZmljYXRpb25LZXkyMDIwfSBvcHRpb25zLmtleVBhaXIgLSBTb3VyY2Uga2V5IHBhaXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwfSBBIGRlcml2ZWQvY29udmVydGVkIGtleSBhZ3JlZW1lbnRcbiAgICogICBrZXkgcGFpci5cbiAgICovXG4gIHN0YXRpYyBmcm9tRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjAoe2tleVBhaXJ9ID0ge30pIHtcbiAgICBpZigha2V5UGFpci5wdWJsaWNLZXlNdWx0aWJhc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU291cmNlIHB1YmxpYyBrZXkgaXMgcmVxdWlyZWQgdG8gY29udmVydC4nKTtcbiAgICB9XG5cbiAgICBpZigha2V5UGFpci5wdWJsaWNLZXlNdWx0aWJhc2Uuc3RhcnRzV2l0aChNVUxUSUJBU0VfQkFTRTU4QlRDX0hFQURFUikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdFeHBlY3RpbmcgXCJwdWJsaWNLZXlNdWx0aWJhc2VcIiB2YWx1ZSB0byBiZSBtdWx0aWJhc2UgYmFzZTU4YnRjICcgK1xuICAgICAgICAnZW5jb2RlZCAobXVzdCBzdGFydCB3aXRoIFwielwiKS4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHhLZXkgPSBuZXcgWDI1NTE5S2V5QWdyZWVtZW50S2V5MjAyMCh7XG4gICAgICBjb250cm9sbGVyOiBrZXlQYWlyLmNvbnRyb2xsZXIsXG4gICAgICBwdWJsaWNLZXlNdWx0aWJhc2U6IFgyNTUxOUtleUFncmVlbWVudEtleTIwMjBcbiAgICAgICAgLmNvbnZlcnRGcm9tRWRQdWJsaWNLZXkoa2V5UGFpcilcbiAgICB9KTtcblxuICAgIGlmKGtleVBhaXIucHJpdmF0ZUtleU11bHRpYmFzZSkge1xuICAgICAgaWYoIWtleVBhaXIucHJpdmF0ZUtleU11bHRpYmFzZS5zdGFydHNXaXRoKE1VTFRJQkFTRV9CQVNFNThCVENfSEVBREVSKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdFeHBlY3RpbmcgXCJwcml2YXRlS2V5TXVsdGliYXNlXCIgdmFsdWUgdG8gYmUgbXVsdGliYXNlIGJhc2U1OGJ0YyAnICtcbiAgICAgICAgICAnZW5jb2RlZCAobXVzdCBzdGFydCB3aXRoIFwielwiKS4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHhLZXkucHJpdmF0ZUtleU11bHRpYmFzZSA9IFgyNTUxOUtleUFncmVlbWVudEtleTIwMjBcbiAgICAgICAgLmNvbnZlcnRGcm9tRWRQcml2YXRlS2V5KGtleVBhaXIpO1xuICAgIH1cblxuICAgIHJldHVybiB4S2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIGhhc2htYXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnB1YmxpY0tleU11bHRpYmFzZSAtIE11bHRpYmFzZSBlbmNvZGVkIEVkMjU1MTlcbiAgICogICBwdWJsaWMga2V5LlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBNdWx0aWJhc2UgZW5jb2RlZCBjb252ZXJ0ZWQgWDI1NTE5IFB1YmxpYyBrZXkuXG4gICAqL1xuICBzdGF0aWMgY29udmVydEZyb21FZFB1YmxpY0tleSh7cHVibGljS2V5TXVsdGliYXNlfSA9IHt9KSB7XG4gICAgaWYoIXB1YmxpY0tleU11bHRpYmFzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb3VyY2UgcHVibGljIGtleSBpcyByZXF1aXJlZCB0byBjb252ZXJ0LicpO1xuICAgIH1cblxuICAgIGNvbnN0IGVkUHVia2V5Qnl0ZXMgPVxuICAgICAgX211bHRpYmFzZURlY29kZShNVUxUSUNPREVDX0VEMjU1MTlfUFVCX0hFQURFUiwgcHVibGljS2V5TXVsdGliYXNlKTtcblxuICAgIC8vIENvbnZlcnRzIGEgMzItYnl0ZSBFZDI1NTE5IHB1YmxpYyBrZXkgaW50byBhIDMyLWJ5dGUgQ3VydmUyNTUxOSBrZXlcbiAgICAvLyBSZXR1cm5zIG51bGwgaWYgdGhlIGdpdmVuIHB1YmxpYyBrZXkgaW4gbm90IGEgdmFsaWQgRWQyNTUxOSBwdWJsaWMga2V5LlxuICAgIGNvbnN0IGRoUHVia2V5Qnl0ZXMgPSBQb2ludC5mcm9tSGV4KGVkUHVia2V5Qnl0ZXMpLnRvWDI1NTE5KCk7XG4gICAgaWYoIWRoUHVia2V5Qnl0ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Vycm9yIGNvbnZlcnRpbmcgdG8gWDI1NTE5OyBJbnZhbGlkIEVkMjU1MTkgcHVibGljIGtleS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIF9tdWx0aWJhc2VFbmNvZGUoTVVMVElDT0RFQ19YMjU1MTlfUFVCX0hFQURFUiwgZGhQdWJrZXlCeXRlcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgaGFzaG1hcC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMucHJpdmF0ZUtleU11bHRpYmFzZSAtIE11bHRpYmFzZSBlbmNvZGVkIEVkMjU1MTlcbiAgICogICBwcml2YXRlIGtleS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gTXVsdGliYXNlIGVuY29kZWQgY29udmVydGVkIFgyNTUxOSBQcml2YXRlIGtleS5cbiAgICovXG4gIHN0YXRpYyBjb252ZXJ0RnJvbUVkUHJpdmF0ZUtleSh7cHJpdmF0ZUtleU11bHRpYmFzZX0gPSB7fSkge1xuICAgIGlmKCFwcml2YXRlS2V5TXVsdGliYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvdXJjZSBwcml2YXRlIGtleSBpcyByZXF1aXJlZCB0byBjb252ZXJ0LicpO1xuICAgIH1cblxuICAgIGNvbnN0IGVkUHJpdmtleUJ5dGVzID1cbiAgICAgIF9tdWx0aWJhc2VEZWNvZGUoTVVMVElDT0RFQ19FRDI1NTE5X1BSSVZfSEVBREVSLCBwcml2YXRlS2V5TXVsdGliYXNlKTtcbiAgICAvLyBDb252ZXJ0cyBhIDY0LWJ5dGUgRWQyNTUxOSBzZWNyZXQga2V5IChvciBqdXN0IHRoZSBmaXJzdCAzMi1ieXRlIHBhcnQgb2ZcbiAgICAvLyBpdCwgd2hpY2ggaXMgdGhlIHNlY3JldCB2YWx1ZSkgaW50byBhIDMyLWJ5dGUgQ3VydmUyNTUxOSBzZWNyZXQga2V5XG4gICAgY29uc3QgZGhQcml2a2V5Qnl0ZXMgPSBlZDI1NTE5U2VjcmV0S2V5VG9YMjU1MTkoZWRQcml2a2V5Qnl0ZXMpO1xuICAgIC8vIG5vdGU6IGEgZnV0dXJlIHZlcnNpb24gc2hvdWxkIG1ha2UgdGhpcyBtZXRob2QgYXN5bmMgdG8gYWxsb3cgdXNlIG9mXG4gICAgLy8gbm9ibGUgdG8gY29udmVydCBwcml2YXRlIGtleXMgLS0gYnV0IHRoZSB0d2VldG5hY2wgdmVyc2lvbiB1c2VkXG4gICAgLy8gaW50ZXJuYWxseSBpcyBtdWNoIGZhc3RlciAofiB4MTAwKTpcbiAgICAvLyBjb25zdCB7aGVhZDogZGhQcml2a2V5Qnl0ZXN9ID0gYXdhaXQgdXRpbHMuZ2V0RXh0ZW5kZWRQdWJsaWNLZXkoXG4gICAgLy8gICBlZFByaXZrZXlCeXRlcy5zbGljZSgwLCAzMikpO1xuICAgIGlmKCFkaFByaXZrZXlCeXRlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnRXJyb3IgY29udmVydGluZyB0byBYMjU1MTk7IEludmFsaWQgRWQyNTUxOSBwcml2YXRlIGtleS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIF9tdWx0aWJhc2VFbmNvZGUoTVVMVElDT0RFQ19YMjU1MTlfUFJJVl9IRUFERVIsIGRoUHJpdmtleUJ5dGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvcnRzIHRoZSBzZXJpYWxpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBLZXlQYWlyLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9ucyBoYXNobWFwLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnB1YmxpY0tleV0gLSBFeHBvcnQgcHVibGljIGtleSBtYXRlcmlhbD9cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcml2YXRlS2V5XSAtIEV4cG9ydCBwcml2YXRlIGtleSBtYXRlcmlhbD9cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pbmNsdWRlQ29udGV4dF0gLSBJbmNsdWRlIEpTT04tTEQgY29udGV4dD9cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gQSBwbGFpbiBqcyBvYmplY3QgdGhhdCdzIHJlYWR5IGZvciBzZXJpYWxpemF0aW9uXG4gICAqICAgKHRvIEpTT04sIGV0YyksIGZvciB1c2UgaW4gRElEcyBldGMuXG4gICAqL1xuICBleHBvcnQoe3B1YmxpY0tleSA9IGZhbHNlLCBwcml2YXRlS2V5ID0gZmFsc2UsIGluY2x1ZGVDb250ZXh0ID0gZmFsc2V9ID0ge30pIHtcbiAgICBpZighKHB1YmxpY0tleSB8fCBwcml2YXRlS2V5KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0V4cG9ydCByZXF1aXJlcyBzcGVjaWZ5aW5nIGVpdGhlciBcInB1YmxpY0tleVwiIG9yIFwicHJpdmF0ZUtleVwiLicpO1xuICAgIH1cbiAgICBjb25zdCBleHBvcnRlZEtleSA9IHtcbiAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgdHlwZTogdGhpcy50eXBlXG4gICAgfTtcbiAgICBpZihpbmNsdWRlQ29udGV4dCkge1xuICAgICAgZXhwb3J0ZWRLZXlbJ0Bjb250ZXh0J10gPSBYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwLlNVSVRFX0NPTlRFWFQ7XG4gICAgfVxuICAgIGlmKHRoaXMuY29udHJvbGxlcikge1xuICAgICAgZXhwb3J0ZWRLZXkuY29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcjtcbiAgICB9XG4gICAgaWYocHVibGljS2V5KSB7XG4gICAgICBleHBvcnRlZEtleS5wdWJsaWNLZXlNdWx0aWJhc2UgPSB0aGlzLnB1YmxpY0tleU11bHRpYmFzZTtcbiAgICB9XG4gICAgaWYocHJpdmF0ZUtleSkge1xuICAgICAgZXhwb3J0ZWRLZXkucHJpdmF0ZUtleU11bHRpYmFzZSA9IHRoaXMucHJpdmF0ZUtleU11bHRpYmFzZTtcbiAgICB9XG4gICAgaWYodGhpcy5yZXZva2VkKSB7XG4gICAgICBleHBvcnRlZEtleS5yZXZva2VkID0gdGhpcy5yZXZva2VkO1xuICAgIH1cbiAgICByZXR1cm4gZXhwb3J0ZWRLZXk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGFuZCByZXR1cm5zIGEgYmFzZTU4YnRjIG11bHRpYmFzZSBlbmNvZGVkIHZhbHVlIG9mIGEgbXVsdGljb2RlY1xuICAgKiBYMjU1MTkgcHVibGljIGtleSBmaW5nZXJwcmludCAoZm9yIHVzZSB3aXRoIGNyeXB0b255bXMsIGZvciBleGFtcGxlKS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXVsdGlmb3JtYXRzL211bHRpY29kZWNcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXVsdGlmb3JtYXRzL211bHRpYmFzZVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dIC0gT3B0aW9ucyBoYXNobWFwLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5wdWJsaWNLZXlNdWx0aWJhc2UgLSBNdWx0aWJhc2UgZW5jb2RlZCBwdWJsaWMga2V5LlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZmluZ2VycHJpbnQuXG4gICAqL1xuICBzdGF0aWMgZmluZ2VycHJpbnRGcm9tUHVibGljS2V5KHtwdWJsaWNLZXlNdWx0aWJhc2V9ID0ge30pIHtcbiAgICBpZighcHVibGljS2V5TXVsdGliYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvdXJjZSBwdWJsaWMga2V5IGlzIHJlcXVpcmVkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBwdWJsaWNLZXlNdWx0aWJhc2U7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwIGZyb20gYSBrZXkgZmluZ2VycHJpbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIGhhc2htYXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZpbmdlcnByaW50IC0gUHVibGljIGtleSBmaW5nZXJwcmludC5cbiAgICpcbiAgICogQHJldHVybnMge1gyNTUxOUtleUFncmVlbWVudEtleTIwMjB9IEtleSBwYWlyIGluc3RhbmNlIChwdWJsaWMga2V5IG1hdGVyaWFsXG4gICAqICAgb25seSkgY3JlYXRlZCBmcm9tIHRoZSBmaW5nZXJwcmludC5cbiAgICovXG4gIHN0YXRpYyBmcm9tRmluZ2VycHJpbnQoe2ZpbmdlcnByaW50fSA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBYMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwKHtcbiAgICAgIHB1YmxpY0tleU11bHRpYmFzZTogZmluZ2VycHJpbnRcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXJpdmVzIGEgc2hhcmVkIHNlY3JldCB2aWEgYSBnaXZlbiBwdWJsaWMga2V5LCB0eXBpY2FsbHkgZm9yIHVzZVxuICAgKiBhcyBvbmUgcGFyYW1ldGVyIGZvciBjb21wdXRpbmcgYSBzaGFyZWQga2V5LiBJdCBzaG91bGQgbm90IGJlIHVzZWQgYXNcbiAgICogYSBzaGFyZWQga2V5IGl0c2VsZiwgYnV0IHJhdGhlciBhcyBhbiBpbnB1dCBpbnRvIGEga2V5IGRlcml2YXRpb24gZnVuY3Rpb25cbiAgICogKEtERikgdG8gcHJvZHVjZSBhIHNoYXJlZCBrZXkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIGhhc2htYXAuXG4gICAqIEBwYXJhbSB7TERLZXlQYWlyfSBvcHRpb25zLnB1YmxpY0tleSAtIFJlbW90ZSBrZXkgcGFpci5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8VWludDhBcnJheT59IERlcml2ZWQgc2VjcmV0LlxuICAgKi9cbiAgYXN5bmMgZGVyaXZlU2VjcmV0KHtwdWJsaWNLZXl9KSB7XG4gICAgY29uc3QgcmVtb3RlUHVibGljS2V5ID0gX211bHRpYmFzZURlY29kZShcbiAgICAgIE1VTFRJQ09ERUNfWDI1NTE5X1BVQl9IRUFERVIsIHB1YmxpY0tleS5wdWJsaWNLZXlNdWx0aWJhc2UpO1xuICAgIGNvbnN0IHByaXZhdGVLZXkgPSBfbXVsdGliYXNlRGVjb2RlKFxuICAgICAgTVVMVElDT0RFQ19YMjU1MTlfUFJJVl9IRUFERVIsIHRoaXMucHJpdmF0ZUtleU11bHRpYmFzZSk7XG5cbiAgICByZXR1cm4gZGVyaXZlU2VjcmV0KHtwcml2YXRlS2V5LCByZW1vdGVQdWJsaWNLZXl9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW5kIHJldHVybnMgYSBtdWx0aWZvcm1hdHMgZW5jb2RlZFxuICAgKiBYMjU1MTkgcHVibGljIGtleSBmaW5nZXJwcmludCAoZm9yIHVzZSB3aXRoIGNyeXB0b255bXMsIGZvciBleGFtcGxlKS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXVsdGlmb3JtYXRzL211bHRpY29kZWNcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGZpbmdlcnByaW50LlxuICAgKi9cbiAgZmluZ2VycHJpbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucHVibGljS2V5TXVsdGliYXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIHdoZXRoZXIgdGhlIGZpbmdlcnByaW50IHdhcyBnZW5lcmF0ZWQgZnJvbSBhIGdpdmVuIGtleSBwYWlyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB4S2V5UGFpci52ZXJpZnlGaW5nZXJwcmludCgnLi4uJyk7XG4gICAqIC8vIHt2YWxpZDogdHJ1ZX07XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIGhhc2htYXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmZpbmdlcnByaW50IC0gQW4geDI1NTE5IGtleSBmaW5nZXJwcmludCAodHlwaWNhbGx5XG4gICAqICAgZnJvbSBhIGtleSBpZCkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCBpbmRpY2F0aW5nIHZhbGlkIGlzIHRydWUgb3IgZmFsc2UuXG4gICAqL1xuICB2ZXJpZnlGaW5nZXJwcmludCh7ZmluZ2VycHJpbnR9ID0ge30pIHtcbiAgICAvLyBmaW5nZXJwcmludCBzaG91bGQgaGF2ZSBgemAgcHJlZml4IGluZGljYXRpbmdcbiAgICAvLyB0aGF0IGl0J3MgYmFzZTU4YnRjIG11bHRpYmFzZSBlbmNvZGVkXG4gICAgaWYoIV9pc1ZhbGlkS2V5SGVhZGVyKGZpbmdlcnByaW50LCBNVUxUSUNPREVDX1gyNTUxOV9QVUJfSEVBREVSKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgXCJmaW5nZXJwcmludFwiIGhhcyBpbnZhbGlkIGhlYWRlciBieXRlczogXCIke2ZpbmdlcnByaW50fVwiLmApO1xuICAgIH1cblxuICAgIHJldHVybiB7dmFsaWQ6IHRydWV9O1xuICB9XG59XG5cbi8vIFVzZWQgYnkgQ3J5cHRvTEQgaGFybmVzcyBmb3IgZGlzcGF0Y2hpbmcuXG5YMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwLnN1aXRlID0gU1VJVEVfSUQ7XG4vLyBVc2VkIGJ5IENyeXB0b0xEIGhhcm5lc3MncyBmcm9tS2V5SWQoKSBtZXRob2QuXG5YMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwLlNVSVRFX0NPTlRFWFQgPVxuICAnaHR0cHM6Ly93M2lkLm9yZy9zZWN1cml0eS9zdWl0ZXMveDI1NTE5LTIwMjAvdjEnO1xuXG4vKipcbiAqIENoZWNrcyB0byBzZWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdmFsaWQgbXVsdGliYXNlIGVuY29kZWQga2V5LlxuICpcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gbXVsdGliYXNlS2V5IC0gVGhlIG11bHRpYmFzZS1lbmNvZGVkIGtleSB2YWx1ZS5cbiAqIEBwYXJhbSB7VWludDhBcnJheX0gZXhwZWN0ZWRIZWFkZXIgLSBUaGUgZXhwZWN0ZWQgaGVhZGVyIGZvciB0aGUga2V5IHZhbHVlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgaGVhZGVyIGlzIHZhbGlkLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIF9pc1ZhbGlkS2V5SGVhZGVyKG11bHRpYmFzZUtleSwgZXhwZWN0ZWRIZWFkZXIpIHtcbiAgaWYoISh0eXBlb2YgbXVsdGliYXNlS2V5ID09PSAnc3RyaW5nJyAmJlxuICAgIG11bHRpYmFzZUtleVswXSA9PT0gTVVMVElCQVNFX0JBU0U1OEJUQ19IRUFERVIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qga2V5Qnl0ZXMgPSBiYXNlNThidGMuZGVjb2RlKG11bHRpYmFzZUtleS5zbGljZSgxKSk7XG4gIHJldHVybiBleHBlY3RlZEhlYWRlci5ldmVyeSgodmFsLCBpKSA9PiBrZXlCeXRlc1tpXSA9PT0gdmFsKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgZ2l2ZW4gVWludDhBcnJheSB0byBtdWx0aWJhc2UtZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBoZWFkZXIgLSBNdWx0aWNvZGVjIGhlYWRlciB0byBwcmVwZW5kIHRvIHRoZSBieXRlcy5cbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnl0ZXMgLSBCeXRlcyB0byBlbmNvZGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBNdWx0aWJhc2UtZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIF9tdWx0aWJhc2VFbmNvZGUoaGVhZGVyLCBieXRlcykge1xuICBjb25zdCBtY0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmxlbmd0aCArIGJ5dGVzLmxlbmd0aCk7XG5cbiAgbWNCeXRlcy5zZXQoaGVhZGVyKTtcbiAgbWNCeXRlcy5zZXQoYnl0ZXMsIGhlYWRlci5sZW5ndGgpO1xuXG4gIHJldHVybiBNVUxUSUJBU0VfQkFTRTU4QlRDX0hFQURFUiArIGJhc2U1OGJ0Yy5lbmNvZGUobWNCeXRlcyk7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIGdpdmVuIHN0cmluZyBhcyBhIG11bHRpYmFzZS1lbmNvZGVkIG11bHRpY29kZWMgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBoZWFkZXIgLSBFeHBlY3RlZCBoZWFkZXIgYnl0ZXMgZm9yIHRoZSBtdWx0aWNvZGVjIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBNdWx0aWJhc2UgZW5jb2RlZCBzdHJpbmcgdG8gZGVjb2RlLlxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IERlY29kZWQgYnl0ZXMuXG4gKi9cbmZ1bmN0aW9uIF9tdWx0aWJhc2VEZWNvZGUoaGVhZGVyLCB0ZXh0KSB7XG4gIGNvbnN0IG1jVmFsdWUgPSBiYXNlNThidGMuZGVjb2RlKHRleHQuc3Vic3RyKDEpKTtcblxuICBpZighaGVhZGVyLmV2ZXJ5KCh2YWwsIGkpID0+IG1jVmFsdWVbaV0gPT09IHZhbCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011bHRpYmFzZSB2YWx1ZSBkb2VzIG5vdCBoYXZlIGV4cGVjdGVkIGhlYWRlci4nKTtcbiAgfVxuXG4gIHJldHVybiBtY1ZhbHVlLnNsaWNlKGhlYWRlci5sZW5ndGgpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/X25519KeyAgreementKey2020.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto-nacl.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto-nacl.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deriveSecret: () => (/* binding */ deriveSecret),\n/* harmony export */   ed25519SecretKeyToX25519: () => (/* binding */ ed25519SecretKeyToX25519),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair)\n/* harmony export */ });\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\");\n/*!\n * Copyright (c) 2021-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n/**\n * Note: The following two functions are async to match the signature of\n * their native Node.js counterparts (see './crypto.js').\n */\n\nasync function deriveSecret({privateKey, remotePublicKey}) {\n  return tweetnacl__WEBPACK_IMPORTED_MODULE_0__.scalarMult(privateKey, remotePublicKey);\n}\n\nasync function generateKeyPair() {\n  // Each is a Uint8Array with 32-byte key\n  const {publicKey, secretKey: privateKey} = tweetnacl__WEBPACK_IMPORTED_MODULE_0__.box.keyPair();\n  return {publicKey, privateKey};\n}\n\nfunction ed25519SecretKeyToX25519(secretKey) {\n  const hash = new Uint8Array(64);\n  // X25519 secret key is the first 32 bytes of the hash with clamped values\n  tweetnacl__WEBPACK_IMPORTED_MODULE_0__.lowlevel.crypto_hash(hash, secretKey, 32);\n  hash[0] &= 248;\n  hash[31] &= 127;\n  hash[31] |= 64;\n  const x25519SecretKey = hash.slice(0, 32);\n  // zero-fill remainder of hash before returning\n  hash.fill(0, 32);\n  return x25519SecretKey;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMjAvbGliL2NyeXB0by1uYWNsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBOztBQUVPLDZCQUE2Qiw0QkFBNEI7QUFDaEUsU0FBUyxpREFBZTtBQUN4Qjs7QUFFTztBQUNQO0FBQ0EsU0FBUyxrQ0FBa0MsRUFBRSwwQ0FBUTtBQUNyRCxVQUFVO0FBQ1Y7O0FBRU87QUFDUDtBQUNBO0FBQ0EsRUFBRSwrQ0FBYTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMjAvbGliL2NyeXB0by1uYWNsLmpzP2ZkZTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEtMjAyMiBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5pbXBvcnQgbmFjbCBmcm9tICd0d2VldG5hY2wnO1xuXG4vKipcbiAqIE5vdGU6IFRoZSBmb2xsb3dpbmcgdHdvIGZ1bmN0aW9ucyBhcmUgYXN5bmMgdG8gbWF0Y2ggdGhlIHNpZ25hdHVyZSBvZlxuICogdGhlaXIgbmF0aXZlIE5vZGUuanMgY291bnRlcnBhcnRzIChzZWUgJy4vY3J5cHRvLmpzJykuXG4gKi9cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlcml2ZVNlY3JldCh7cHJpdmF0ZUtleSwgcmVtb3RlUHVibGljS2V5fSkge1xuICByZXR1cm4gbmFjbC5zY2FsYXJNdWx0KHByaXZhdGVLZXksIHJlbW90ZVB1YmxpY0tleSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXIoKSB7XG4gIC8vIEVhY2ggaXMgYSBVaW50OEFycmF5IHdpdGggMzItYnl0ZSBrZXlcbiAgY29uc3Qge3B1YmxpY0tleSwgc2VjcmV0S2V5OiBwcml2YXRlS2V5fSA9IG5hY2wuYm94LmtleVBhaXIoKTtcbiAgcmV0dXJuIHtwdWJsaWNLZXksIHByaXZhdGVLZXl9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWQyNTUxOVNlY3JldEtleVRvWDI1NTE5KHNlY3JldEtleSkge1xuICBjb25zdCBoYXNoID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICAvLyBYMjU1MTkgc2VjcmV0IGtleSBpcyB0aGUgZmlyc3QgMzIgYnl0ZXMgb2YgdGhlIGhhc2ggd2l0aCBjbGFtcGVkIHZhbHVlc1xuICBuYWNsLmxvd2xldmVsLmNyeXB0b19oYXNoKGhhc2gsIHNlY3JldEtleSwgMzIpO1xuICBoYXNoWzBdICY9IDI0ODtcbiAgaGFzaFszMV0gJj0gMTI3O1xuICBoYXNoWzMxXSB8PSA2NDtcbiAgY29uc3QgeDI1NTE5U2VjcmV0S2V5ID0gaGFzaC5zbGljZSgwLCAzMik7XG4gIC8vIHplcm8tZmlsbCByZW1haW5kZXIgb2YgaGFzaCBiZWZvcmUgcmV0dXJuaW5nXG4gIGhhc2guZmlsbCgwLCAzMik7XG4gIHJldHVybiB4MjU1MTlTZWNyZXRLZXk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto-nacl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deriveSecret: () => (/* binding */ deriveSecret),\n/* harmony export */   ed25519SecretKeyToX25519: () => (/* binding */ ed25519SecretKeyToX25519),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var _crypto_nacl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crypto-nacl.js */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto-nacl.js\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:util */ \"node:util\");\n/*!\n * Copyright (c) 2021-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n\n\nconst PUBLIC_KEY_DER_PREFIX = new Uint8Array([\n  48, 42, 48, 5, 6, 3, 43, 101, 110, 3, 33, 0\n]);\n\nconst PRIVATE_KEY_DER_PREFIX = new Uint8Array([\n  48, 46, 2, 1, 0, 48, 5, 6, 3, 43, 101, 110, 4, 34, 4, 32\n]);\n\nasync function deriveSecretNative({privateKey, remotePublicKey}) {\n  const nodePrivateKey = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n    key: Buffer.concat([PRIVATE_KEY_DER_PREFIX, privateKey]),\n    format: 'der',\n    type: 'pkcs8'\n  });\n  const nodePublicKey = node_crypto__WEBPACK_IMPORTED_MODULE_0__.createPublicKey({\n    key: Buffer.concat([PUBLIC_KEY_DER_PREFIX, remotePublicKey]),\n    format: 'der',\n    type: 'spki'\n  });\n  return node_crypto__WEBPACK_IMPORTED_MODULE_0__.diffieHellman({\n    privateKey: nodePrivateKey,\n    publicKey: nodePublicKey,\n  });\n}\n\nasync function generateKeyPairNative() {\n  const generateKeyPairAsync = (0,node_util__WEBPACK_IMPORTED_MODULE_2__.promisify)(node_crypto__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair);\n  const publicKeyEncoding = {format: 'der', type: 'spki'};\n  const privateKeyEncoding = {format: 'der', type: 'pkcs8'};\n  const {publicKey: publicDerBytes, privateKey: privateDerBytes} =\n    await generateKeyPairAsync('x25519', {\n      publicKeyEncoding, privateKeyEncoding\n    });\n  const publicKey = publicDerBytes.slice(12, 12 + 32);\n  const privateKey = privateDerBytes.slice(16, 16 + 32);\n  return {publicKey, privateKey};\n}\n\nlet deriveSecret;\nlet generateKeyPair;\nif(node_crypto__WEBPACK_IMPORTED_MODULE_0__.diffieHellman) {\n  deriveSecret = deriveSecretNative;\n  generateKeyPair = generateKeyPairNative;\n} else {\n  deriveSecret = _crypto_nacl_js__WEBPACK_IMPORTED_MODULE_1__.deriveSecret;\n  generateKeyPair = _crypto_nacl_js__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair;\n}\n\n\n\nconst {ed25519SecretKeyToX25519} = _crypto_nacl_js__WEBPACK_IMPORTED_MODULE_1__;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMjAvbGliL2NyeXB0by5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDc0M7QUFDUztBQUNYOztBQUVwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1DQUFtQyw0QkFBNEI7QUFDL0QseUJBQXlCLHlEQUF1QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsd0JBQXdCLHdEQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsU0FBUyxzREFBb0I7QUFDN0I7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLCtCQUErQixvREFBUyxDQUFDLHdEQUFzQjtBQUMvRCw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCLFNBQVMsd0RBQXdEO0FBQ2pFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0EsR0FBRyxzREFBb0I7QUFDdkI7QUFDQTtBQUNBLEVBQUU7QUFDRixpQkFBaUIseURBQXVCO0FBQ3hDLG9CQUFvQiw0REFBMEI7QUFDOUM7O0FBRXVDOztBQUV2QyxPQUFPLDBCQUEwQixFQUFFLDRDQUFVO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMjAvbGliL2NyeXB0by5qcz9lZjA0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIxLTIwMjIgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ25vZGU6Y3J5cHRvJztcbmltcG9ydCAqIGFzIGNyeXB0b05hY2wgZnJvbSAnLi9jcnlwdG8tbmFjbC5qcyc7XG5pbXBvcnQge3Byb21pc2lmeX0gZnJvbSAnbm9kZTp1dGlsJztcblxuY29uc3QgUFVCTElDX0tFWV9ERVJfUFJFRklYID0gbmV3IFVpbnQ4QXJyYXkoW1xuICA0OCwgNDIsIDQ4LCA1LCA2LCAzLCA0MywgMTAxLCAxMTAsIDMsIDMzLCAwXG5dKTtcblxuY29uc3QgUFJJVkFURV9LRVlfREVSX1BSRUZJWCA9IG5ldyBVaW50OEFycmF5KFtcbiAgNDgsIDQ2LCAyLCAxLCAwLCA0OCwgNSwgNiwgMywgNDMsIDEwMSwgMTEwLCA0LCAzNCwgNCwgMzJcbl0pO1xuXG5hc3luYyBmdW5jdGlvbiBkZXJpdmVTZWNyZXROYXRpdmUoe3ByaXZhdGVLZXksIHJlbW90ZVB1YmxpY0tleX0pIHtcbiAgY29uc3Qgbm9kZVByaXZhdGVLZXkgPSBjcnlwdG8uY3JlYXRlUHJpdmF0ZUtleSh7XG4gICAga2V5OiBCdWZmZXIuY29uY2F0KFtQUklWQVRFX0tFWV9ERVJfUFJFRklYLCBwcml2YXRlS2V5XSksXG4gICAgZm9ybWF0OiAnZGVyJyxcbiAgICB0eXBlOiAncGtjczgnXG4gIH0pO1xuICBjb25zdCBub2RlUHVibGljS2V5ID0gY3J5cHRvLmNyZWF0ZVB1YmxpY0tleSh7XG4gICAga2V5OiBCdWZmZXIuY29uY2F0KFtQVUJMSUNfS0VZX0RFUl9QUkVGSVgsIHJlbW90ZVB1YmxpY0tleV0pLFxuICAgIGZvcm1hdDogJ2RlcicsXG4gICAgdHlwZTogJ3Nwa2knXG4gIH0pO1xuICByZXR1cm4gY3J5cHRvLmRpZmZpZUhlbGxtYW4oe1xuICAgIHByaXZhdGVLZXk6IG5vZGVQcml2YXRlS2V5LFxuICAgIHB1YmxpY0tleTogbm9kZVB1YmxpY0tleSxcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpck5hdGl2ZSgpIHtcbiAgY29uc3QgZ2VuZXJhdGVLZXlQYWlyQXN5bmMgPSBwcm9taXNpZnkoY3J5cHRvLmdlbmVyYXRlS2V5UGFpcik7XG4gIGNvbnN0IHB1YmxpY0tleUVuY29kaW5nID0ge2Zvcm1hdDogJ2RlcicsIHR5cGU6ICdzcGtpJ307XG4gIGNvbnN0IHByaXZhdGVLZXlFbmNvZGluZyA9IHtmb3JtYXQ6ICdkZXInLCB0eXBlOiAncGtjczgnfTtcbiAgY29uc3Qge3B1YmxpY0tleTogcHVibGljRGVyQnl0ZXMsIHByaXZhdGVLZXk6IHByaXZhdGVEZXJCeXRlc30gPVxuICAgIGF3YWl0IGdlbmVyYXRlS2V5UGFpckFzeW5jKCd4MjU1MTknLCB7XG4gICAgICBwdWJsaWNLZXlFbmNvZGluZywgcHJpdmF0ZUtleUVuY29kaW5nXG4gICAgfSk7XG4gIGNvbnN0IHB1YmxpY0tleSA9IHB1YmxpY0RlckJ5dGVzLnNsaWNlKDEyLCAxMiArIDMyKTtcbiAgY29uc3QgcHJpdmF0ZUtleSA9IHByaXZhdGVEZXJCeXRlcy5zbGljZSgxNiwgMTYgKyAzMik7XG4gIHJldHVybiB7cHVibGljS2V5LCBwcml2YXRlS2V5fTtcbn1cblxubGV0IGRlcml2ZVNlY3JldDtcbmxldCBnZW5lcmF0ZUtleVBhaXI7XG5pZihjcnlwdG8uZGlmZmllSGVsbG1hbikge1xuICBkZXJpdmVTZWNyZXQgPSBkZXJpdmVTZWNyZXROYXRpdmU7XG4gIGdlbmVyYXRlS2V5UGFpciA9IGdlbmVyYXRlS2V5UGFpck5hdGl2ZTtcbn0gZWxzZSB7XG4gIGRlcml2ZVNlY3JldCA9IGNyeXB0b05hY2wuZGVyaXZlU2VjcmV0O1xuICBnZW5lcmF0ZUtleVBhaXIgPSBjcnlwdG9OYWNsLmdlbmVyYXRlS2V5UGFpcjtcbn1cblxuZXhwb3J0IHtkZXJpdmVTZWNyZXQsIGdlbmVyYXRlS2V5UGFpcn07XG5cbmNvbnN0IHtlZDI1NTE5U2VjcmV0S2V5VG9YMjU1MTl9ID0gY3J5cHRvTmFjbDtcbmV4cG9ydCB7ZWQyNTUxOVNlY3JldEtleVRvWDI1NTE5fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X25519KeyAgreementKey2020: () => (/* reexport safe */ _X25519KeyAgreementKey2020_js__WEBPACK_IMPORTED_MODULE_0__.X25519KeyAgreementKey2020)\n/* harmony export */ });\n/* harmony import */ var _X25519KeyAgreementKey2020_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./X25519KeyAgreementKey2020.js */ \"(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/X25519KeyAgreementKey2020.js\");\n/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGRpZ2l0YWxiYXphYXIveDI1NTE5LWtleS1hZ3JlZW1lbnQta2V5LTIwMjAvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3lFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BkaWdpdGFsYmF6YWFyL3gyNTUxOS1rZXktYWdyZWVtZW50LWtleS0yMDIwL2xpYi9pbmRleC5qcz8wZGYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIxIERpZ2l0YWwgQmF6YWFyLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cbmV4cG9ydCB7WDI1NTE5S2V5QWdyZWVtZW50S2V5MjAyMH0gZnJvbSAnLi9YMjU1MTlLZXlBZ3JlZW1lbnRLZXkyMDIwLmpzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@digitalbazaar/x25519-key-agreement-key-2020/lib/index.js\n");

/***/ })

};
;