"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/crypto-ld";
exports.ids = ["vendor-chunks/crypto-ld"];
exports.modules = {

/***/ "(ssr)/./node_modules/crypto-ld/lib/CryptoLD.js":
/*!************************************************!*\
  !*** ./node_modules/crypto-ld/lib/CryptoLD.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CryptoLD: () => (/* binding */ CryptoLD)\n/* harmony export */ });\n/*!\n * Copyright (c) 2020-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * General purpose key generation driver for Linked Data cryptographic key\n * pairs.\n *\n * @param {Map} [suites] - Optional map of supported suites, by suite id.\n */\nclass CryptoLD {\n  constructor({suites} = {}) {\n    this.suites = suites || new Map();\n  }\n\n  /**\n   * Installs support for a key type (suite).\n   *\n   * @param {LDKeyPair} keyPairLib - Conforming key pair library for a suite.\n   */\n  use(keyPairLib) {\n    this.suites.set(keyPairLib.suite, keyPairLib);\n  }\n\n  /**\n   * Generates a public/private LDKeyPair.\n   *\n   * @param {object} options - Suite-specific key options.\n   * @param {string} options.type - Key suite id (for example,\n   *   'Ed25519VerificationKey2020').\n   * @param {string} [options.controller] - Controller DID or URL for the\n   *   generated key pair. If present, used to auto-initialize the key.id.\n   *\n   * @returns {Promise<LDKeyPair>} Generated key pair.\n   */\n  async generate(options = {}) {\n    const Suite = this._suiteForType(options);\n    return Suite.generate(options);\n  }\n\n  /**\n   * Imports a public/private key pair from serialized data.\n   *\n   * @param {object} serialized - Serialized key object.\n   *\n   * @throws {Error} - On missing or invalid serialized key data.\n   *\n   * @returns {Promise<LDKeyPair>} Imported key pair.\n   */\n  async from(serialized = {}) {\n    const Suite = this._suiteForType(serialized);\n\n    if(serialized['@context']) {\n      // presume this may be an untrusted (fetched, etc) key document\n      return Suite.fromKeyDocument({document: serialized});\n    }\n\n    return Suite.from(serialized);\n  }\n\n  /**\n   * Imports a key pair instance from a provided externally fetched key\n   * document (fetched via a secure JSON-LD `documentLoader` or via\n   * `cryptoLd.fromKeyId()`), optionally checking it for revocation and required\n   * context.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.document - Externally fetched key document.\n   * @param {boolean} [options.checkContext=true] - Whether to check that the\n   *   fetched key document contains the context required by the key's crypto\n   *   suite.\n   * @param {boolean} [options.checkRevoked=true] - Whether to check the key\n   *   object for the presence of the `revoked` timestamp.\n   *\n   * @returns {Promise<LDKeyPair>} Resolves with the resulting key pair\n   *   instance.\n   */\n  async fromKeyDocument({\n    document, checkContext = true, checkRevoked = true\n  } = {}) {\n    if(!document) {\n      throw new TypeError('The \"document\" parameter is required.');\n    }\n    const Suite = this._suiteForType(document);\n\n    return Suite.fromKeyDocument({document, checkContext, checkRevoked});\n  }\n\n  /**\n   * Imports a key pair instance via the provided `documentLoader` function,\n   * optionally checking it for revocation and required context.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.id - Key ID or URI.\n   * @param {Function} options.documentLoader - JSON-LD Document Loader.\n   * @param {boolean} [options.checkContext=true] - Whether to check that the\n   *   fetched key document contains the context required by the key's crypto\n   *   suite.\n   * @param {boolean} [options.checkRevoked=true] - Whether to check the key\n   *   object for the presence of the `revoked` timestamp.\n   *\n   * @returns {Promise<LDKeyPair>} Resolves with the appropriate key pair\n   *   instance.\n   */\n  async fromKeyId({\n    id, documentLoader, checkContext = true, checkRevoked = true\n  } = {}) {\n    if(!id) {\n      throw new TypeError('The \"id\" parameter is required.');\n    }\n    if(!documentLoader) {\n      throw new TypeError('The \"documentLoader\" parameter is required.');\n    }\n    let keyDocument;\n    try {\n      ({document: keyDocument} = await documentLoader(id));\n      // the supplied documentLoader may not be properly implemented\n      if(!keyDocument) {\n        throw new Error(\n          'The \"documentLoader\" function must return a \"document\" object.');\n      }\n    } catch(e) {\n      const error = new Error('Error fetching document: ' + e.message);\n      error.cause = e;\n      throw error;\n    }\n    const fetchedType = keyDocument.type;\n    if(!fetchedType) {\n      throw new Error('Key suite type not found in fetched document.');\n    }\n    const keySuite = this.suites.get(fetchedType);\n    if(!keySuite) {\n      throw new Error(`Support for suite \"${fetchedType}\" is not installed.`);\n    }\n\n    return keySuite.fromKeyDocument({document: keyDocument, checkContext,\n      checkRevoked});\n  }\n\n  /**\n   * Tests if a given key type is currently installed.\n   *\n   * @param {string} [type] - Key suite id ('Ed25519VerificationKey2020').\n   * @private\n   *\n   * @returns {boolean} True if key type installed.\n   */\n  _installed({type}) {\n    return this.suites.has(type);\n  }\n\n  /**\n   * Returns the installed crypto suite class for a given document's type.\n   *\n   * @param {object} document - A serialized key document (or options document).\n   * @param {string} document.type - Key suite id (for example,\n   *   'Ed25519VerificationKey2020').\n   *\n   * @returns {object} LDKeyPair (crypto suite) class.\n   */\n  _suiteForType(document) {\n    const type = document && document.type;\n\n    if(!type) {\n      throw new TypeError('Missing key type.');\n    }\n    if(!this._installed({type})) {\n      throw new Error(`Support for key type \"${type}\" is not installed.`);\n    }\n\n    return this.suites.get(type);\n  }\n}\n\n/**\n * @typedef LDKeyPair\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWxkL2xpYi9DcnlwdG9MRC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCO0FBQ087QUFDUCxlQUFlLFFBQVEsSUFBSTtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQSw0QkFBNEI7QUFDNUI7O0FBRUE7QUFDQTtBQUNBLG9DQUFvQyxxQkFBcUI7QUFDekQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBSTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtDQUFrQyxxQ0FBcUM7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxZQUFZO0FBQ3hEOztBQUVBLHFDQUFxQztBQUNyQyxtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQSxjQUFjLEtBQUs7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixLQUFLO0FBQzlCLCtDQUErQyxLQUFLO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWxkL2xpYi9DcnlwdG9MRC5qcz84NjU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDIwLTIwMjIgRGlnaXRhbCBCYXphYXIsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqL1xuXG4vKipcbiAqIEdlbmVyYWwgcHVycG9zZSBrZXkgZ2VuZXJhdGlvbiBkcml2ZXIgZm9yIExpbmtlZCBEYXRhIGNyeXB0b2dyYXBoaWMga2V5XG4gKiBwYWlycy5cbiAqXG4gKiBAcGFyYW0ge01hcH0gW3N1aXRlc10gLSBPcHRpb25hbCBtYXAgb2Ygc3VwcG9ydGVkIHN1aXRlcywgYnkgc3VpdGUgaWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBDcnlwdG9MRCB7XG4gIGNvbnN0cnVjdG9yKHtzdWl0ZXN9ID0ge30pIHtcbiAgICB0aGlzLnN1aXRlcyA9IHN1aXRlcyB8fCBuZXcgTWFwKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFsbHMgc3VwcG9ydCBmb3IgYSBrZXkgdHlwZSAoc3VpdGUpLlxuICAgKlxuICAgKiBAcGFyYW0ge0xES2V5UGFpcn0ga2V5UGFpckxpYiAtIENvbmZvcm1pbmcga2V5IHBhaXIgbGlicmFyeSBmb3IgYSBzdWl0ZS5cbiAgICovXG4gIHVzZShrZXlQYWlyTGliKSB7XG4gICAgdGhpcy5zdWl0ZXMuc2V0KGtleVBhaXJMaWIuc3VpdGUsIGtleVBhaXJMaWIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHB1YmxpYy9wcml2YXRlIExES2V5UGFpci5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBTdWl0ZS1zcGVjaWZpYyBrZXkgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudHlwZSAtIEtleSBzdWl0ZSBpZCAoZm9yIGV4YW1wbGUsXG4gICAqICAgJ0VkMjU1MTlWZXJpZmljYXRpb25LZXkyMDIwJykuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb250cm9sbGVyXSAtIENvbnRyb2xsZXIgRElEIG9yIFVSTCBmb3IgdGhlXG4gICAqICAgZ2VuZXJhdGVkIGtleSBwYWlyLiBJZiBwcmVzZW50LCB1c2VkIHRvIGF1dG8taW5pdGlhbGl6ZSB0aGUga2V5LmlkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMREtleVBhaXI+fSBHZW5lcmF0ZWQga2V5IHBhaXIuXG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBTdWl0ZSA9IHRoaXMuX3N1aXRlRm9yVHlwZShvcHRpb25zKTtcbiAgICByZXR1cm4gU3VpdGUuZ2VuZXJhdGUob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogSW1wb3J0cyBhIHB1YmxpYy9wcml2YXRlIGtleSBwYWlyIGZyb20gc2VyaWFsaXplZCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc2VyaWFsaXplZCAtIFNlcmlhbGl6ZWQga2V5IG9iamVjdC5cbiAgICpcbiAgICogQHRocm93cyB7RXJyb3J9IC0gT24gbWlzc2luZyBvciBpbnZhbGlkIHNlcmlhbGl6ZWQga2V5IGRhdGEuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExES2V5UGFpcj59IEltcG9ydGVkIGtleSBwYWlyLlxuICAgKi9cbiAgYXN5bmMgZnJvbShzZXJpYWxpemVkID0ge30pIHtcbiAgICBjb25zdCBTdWl0ZSA9IHRoaXMuX3N1aXRlRm9yVHlwZShzZXJpYWxpemVkKTtcblxuICAgIGlmKHNlcmlhbGl6ZWRbJ0Bjb250ZXh0J10pIHtcbiAgICAgIC8vIHByZXN1bWUgdGhpcyBtYXkgYmUgYW4gdW50cnVzdGVkIChmZXRjaGVkLCBldGMpIGtleSBkb2N1bWVudFxuICAgICAgcmV0dXJuIFN1aXRlLmZyb21LZXlEb2N1bWVudCh7ZG9jdW1lbnQ6IHNlcmlhbGl6ZWR9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gU3VpdGUuZnJvbShzZXJpYWxpemVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnRzIGEga2V5IHBhaXIgaW5zdGFuY2UgZnJvbSBhIHByb3ZpZGVkIGV4dGVybmFsbHkgZmV0Y2hlZCBrZXlcbiAgICogZG9jdW1lbnQgKGZldGNoZWQgdmlhIGEgc2VjdXJlIEpTT04tTEQgYGRvY3VtZW50TG9hZGVyYCBvciB2aWFcbiAgICogYGNyeXB0b0xkLmZyb21LZXlJZCgpYCksIG9wdGlvbmFsbHkgY2hlY2tpbmcgaXQgZm9yIHJldm9jYXRpb24gYW5kIHJlcXVpcmVkXG4gICAqIGNvbnRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBoYXNobWFwLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5kb2N1bWVudCAtIEV4dGVybmFsbHkgZmV0Y2hlZCBrZXkgZG9jdW1lbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hlY2tDb250ZXh0PXRydWVdIC0gV2hldGhlciB0byBjaGVjayB0aGF0IHRoZVxuICAgKiAgIGZldGNoZWQga2V5IGRvY3VtZW50IGNvbnRhaW5zIHRoZSBjb250ZXh0IHJlcXVpcmVkIGJ5IHRoZSBrZXkncyBjcnlwdG9cbiAgICogICBzdWl0ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGVja1Jldm9rZWQ9dHJ1ZV0gLSBXaGV0aGVyIHRvIGNoZWNrIHRoZSBrZXlcbiAgICogICBvYmplY3QgZm9yIHRoZSBwcmVzZW5jZSBvZiB0aGUgYHJldm9rZWRgIHRpbWVzdGFtcC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8TERLZXlQYWlyPn0gUmVzb2x2ZXMgd2l0aCB0aGUgcmVzdWx0aW5nIGtleSBwYWlyXG4gICAqICAgaW5zdGFuY2UuXG4gICAqL1xuICBhc3luYyBmcm9tS2V5RG9jdW1lbnQoe1xuICAgIGRvY3VtZW50LCBjaGVja0NvbnRleHQgPSB0cnVlLCBjaGVja1Jldm9rZWQgPSB0cnVlXG4gIH0gPSB7fSkge1xuICAgIGlmKCFkb2N1bWVudCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZG9jdW1lbnRcIiBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuJyk7XG4gICAgfVxuICAgIGNvbnN0IFN1aXRlID0gdGhpcy5fc3VpdGVGb3JUeXBlKGRvY3VtZW50KTtcblxuICAgIHJldHVybiBTdWl0ZS5mcm9tS2V5RG9jdW1lbnQoe2RvY3VtZW50LCBjaGVja0NvbnRleHQsIGNoZWNrUmV2b2tlZH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcG9ydHMgYSBrZXkgcGFpciBpbnN0YW5jZSB2aWEgdGhlIHByb3ZpZGVkIGBkb2N1bWVudExvYWRlcmAgZnVuY3Rpb24sXG4gICAqIG9wdGlvbmFsbHkgY2hlY2tpbmcgaXQgZm9yIHJldm9jYXRpb24gYW5kIHJlcXVpcmVkIGNvbnRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBoYXNobWFwLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5pZCAtIEtleSBJRCBvciBVUkkuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdGlvbnMuZG9jdW1lbnRMb2FkZXIgLSBKU09OLUxEIERvY3VtZW50IExvYWRlci5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGVja0NvbnRleHQ9dHJ1ZV0gLSBXaGV0aGVyIHRvIGNoZWNrIHRoYXQgdGhlXG4gICAqICAgZmV0Y2hlZCBrZXkgZG9jdW1lbnQgY29udGFpbnMgdGhlIGNvbnRleHQgcmVxdWlyZWQgYnkgdGhlIGtleSdzIGNyeXB0b1xuICAgKiAgIHN1aXRlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoZWNrUmV2b2tlZD10cnVlXSAtIFdoZXRoZXIgdG8gY2hlY2sgdGhlIGtleVxuICAgKiAgIG9iamVjdCBmb3IgdGhlIHByZXNlbmNlIG9mIHRoZSBgcmV2b2tlZGAgdGltZXN0YW1wLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMREtleVBhaXI+fSBSZXNvbHZlcyB3aXRoIHRoZSBhcHByb3ByaWF0ZSBrZXkgcGFpclxuICAgKiAgIGluc3RhbmNlLlxuICAgKi9cbiAgYXN5bmMgZnJvbUtleUlkKHtcbiAgICBpZCwgZG9jdW1lbnRMb2FkZXIsIGNoZWNrQ29udGV4dCA9IHRydWUsIGNoZWNrUmV2b2tlZCA9IHRydWVcbiAgfSA9IHt9KSB7XG4gICAgaWYoIWlkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJpZFwiIHBhcmFtZXRlciBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG4gICAgaWYoIWRvY3VtZW50TG9hZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJkb2N1bWVudExvYWRlclwiIHBhcmFtZXRlciBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG4gICAgbGV0IGtleURvY3VtZW50O1xuICAgIHRyeSB7XG4gICAgICAoe2RvY3VtZW50OiBrZXlEb2N1bWVudH0gPSBhd2FpdCBkb2N1bWVudExvYWRlcihpZCkpO1xuICAgICAgLy8gdGhlIHN1cHBsaWVkIGRvY3VtZW50TG9hZGVyIG1heSBub3QgYmUgcHJvcGVybHkgaW1wbGVtZW50ZWRcbiAgICAgIGlmKCFrZXlEb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1RoZSBcImRvY3VtZW50TG9hZGVyXCIgZnVuY3Rpb24gbXVzdCByZXR1cm4gYSBcImRvY3VtZW50XCIgb2JqZWN0LicpO1xuICAgICAgfVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0Vycm9yIGZldGNoaW5nIGRvY3VtZW50OiAnICsgZS5tZXNzYWdlKTtcbiAgICAgIGVycm9yLmNhdXNlID0gZTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBjb25zdCBmZXRjaGVkVHlwZSA9IGtleURvY3VtZW50LnR5cGU7XG4gICAgaWYoIWZldGNoZWRUeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleSBzdWl0ZSB0eXBlIG5vdCBmb3VuZCBpbiBmZXRjaGVkIGRvY3VtZW50LicpO1xuICAgIH1cbiAgICBjb25zdCBrZXlTdWl0ZSA9IHRoaXMuc3VpdGVzLmdldChmZXRjaGVkVHlwZSk7XG4gICAgaWYoIWtleVN1aXRlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFN1cHBvcnQgZm9yIHN1aXRlIFwiJHtmZXRjaGVkVHlwZX1cIiBpcyBub3QgaW5zdGFsbGVkLmApO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlTdWl0ZS5mcm9tS2V5RG9jdW1lbnQoe2RvY3VtZW50OiBrZXlEb2N1bWVudCwgY2hlY2tDb250ZXh0LFxuICAgICAgY2hlY2tSZXZva2VkfSk7XG4gIH1cblxuICAvKipcbiAgICogVGVzdHMgaWYgYSBnaXZlbiBrZXkgdHlwZSBpcyBjdXJyZW50bHkgaW5zdGFsbGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGVdIC0gS2V5IHN1aXRlIGlkICgnRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMjAnKS5cbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYga2V5IHR5cGUgaW5zdGFsbGVkLlxuICAgKi9cbiAgX2luc3RhbGxlZCh7dHlwZX0pIHtcbiAgICByZXR1cm4gdGhpcy5zdWl0ZXMuaGFzKHR5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluc3RhbGxlZCBjcnlwdG8gc3VpdGUgY2xhc3MgZm9yIGEgZ2l2ZW4gZG9jdW1lbnQncyB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgLSBBIHNlcmlhbGl6ZWQga2V5IGRvY3VtZW50IChvciBvcHRpb25zIGRvY3VtZW50KS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvY3VtZW50LnR5cGUgLSBLZXkgc3VpdGUgaWQgKGZvciBleGFtcGxlLFxuICAgKiAgICdFZDI1NTE5VmVyaWZpY2F0aW9uS2V5MjAyMCcpLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBMREtleVBhaXIgKGNyeXB0byBzdWl0ZSkgY2xhc3MuXG4gICAqL1xuICBfc3VpdGVGb3JUeXBlKGRvY3VtZW50KSB7XG4gICAgY29uc3QgdHlwZSA9IGRvY3VtZW50ICYmIGRvY3VtZW50LnR5cGU7XG5cbiAgICBpZighdHlwZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWlzc2luZyBrZXkgdHlwZS4nKTtcbiAgICB9XG4gICAgaWYoIXRoaXMuX2luc3RhbGxlZCh7dHlwZX0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFN1cHBvcnQgZm9yIGtleSB0eXBlIFwiJHt0eXBlfVwiIGlzIG5vdCBpbnN0YWxsZWQuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3VpdGVzLmdldCh0eXBlKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIExES2V5UGFpclxuICovXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/crypto-ld/lib/CryptoLD.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/crypto-ld/lib/LDKeyPair.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-ld/lib/LDKeyPair.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LDKeyPair: () => (/* binding */ LDKeyPair)\n/* harmony export */ });\n/*!\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * When adding support for a new suite type for `crypto-ld`, developers should\n * do the following:\n *\n * 1. Create their own npm package / github repo, such as `example-key-pair`.\n * 2. Subclass LDKeyPair.\n * 3. Override relevant methods (such as `export()` and `fingerprint()`).\n * 4. Add to the key type table in the `crypto-ld` README.md (that's this repo).\n */\nclass LDKeyPair {\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates a public/private key pair instance. This is an abstract base class,\n   * actual key material and suite-specific methods are handled in the subclass.\n   *\n   * To generate or import a key pair, use the `cryptoLd` instance.\n   *\n   * @see CryptoLD.js\n   *\n   * @param {object} options - The options to use.\n   * @param {string} options.id - The key id, typically composed of controller\n   *   URL and key fingerprint as hash fragment.\n   * @param {string} options.controller - DID/URL of the person/entity\n   *   controlling this key.\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is\n   *   considered not revoked. (Note that this mechanism is slightly different\n   *   than DID Document key revocation, where a DID controller can revoke a\n   *   key from that DID by removing it from the DID Document.)\n   */\n  /* eslint-enable */\n  constructor({id, controller, revoked} = {}) {\n    this.id = id;\n    this.controller = controller;\n    this.revoked = revoked;\n    // this.type is set in subclass constructor\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Generates a new public/private key pair instance.\n   * Note that this method is not typically called directly by client code,\n   * but instead is used through a `cryptoLd` instance.\n   *\n   * @param {object} options - Suite-specific options for the KeyPair. For\n   *   common options, see the `LDKeyPair.constructor()` docstring.\n   *\n   * @returns {Promise<LDKeyPair>} An LDKeyPair instance.\n   */\n  /* eslint-enable */\n  static async generate(/* options */) {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /**\n   * Imports a key pair instance from a provided externally fetched key\n   * document (fetched via a secure JSON-LD `documentLoader` or via\n   * `cryptoLd.fromKeyId()`), optionally checking it for revocation and required\n   * context.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.document - Externally fetched key document.\n   * @param {boolean} [options.checkContext=true] - Whether to check that the\n   *   fetched key document contains the context required by the key's crypto\n   *   suite.\n   * @param {boolean} [options.checkRevoked=true] - Whether to check the key\n   *   object for the presence of the `revoked` timestamp.\n   *\n   * @returns {Promise<LDKeyPair>} Resolves with the resulting key pair\n   *   instance.\n   */\n  static async fromKeyDocument({\n    document, checkContext = true, checkRevoked = true\n  } = {}) {\n    if(!document) {\n      throw new TypeError('The \"document\" parameter is required.');\n    }\n\n    if(checkContext) {\n      const fetchedDocContexts = [].concat(document['@context']);\n      if(!fetchedDocContexts.includes(this.SUITE_CONTEXT)) {\n        throw new Error('Key document does not contain required context \"' +\n          this.SUITE_CONTEXT + '\".');\n      }\n    }\n    if(checkRevoked && document.revoked) {\n      throw new Error(`Key has been revoked since: \"${document.revoked}\".`);\n    }\n    return this.from(document);\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Generates a KeyPair from some options.\n   *\n   * @param {object} options  - Will generate a key pair in multiple different\n   *   formats.\n   * @example\n   * > const options = {\n   *    type: 'Ed25519VerificationKey2020'\n   *   };\n   * > const edKeyPair = await LDKeyPair.from(options);\n   *\n   * @returns {Promise<LDKeyPair>} A LDKeyPair.\n   * @throws Unsupported Key Type.\n   */\n  /* eslint-enable */\n  static async from(/* options */) {\n    throw new Error('Abstract method from() must be implemented in subclass.');\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair\n   * and other information that json-ld Signatures can use to form a proof.\n   *\n   * NOTE: Subclasses MUST override this method (and add the exporting of\n   * their public and private key material).\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   *\n   * @returns {object} A public key object\n   *   information used in verification methods by signatures.\n   */\n  export({publicKey = false, privateKey = false} = {}) {\n    if(!publicKey && !privateKey) {\n      throw new Error(\n        'Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const key = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller\n    };\n    if(this.revoked) {\n      key.revoked = this.revoked;\n    }\n\n    return key;\n  }\n\n  /**\n   * Returns the public key fingerprint, multibase+multicodec encoded. The\n   * specific fingerprint method is determined by the key suite, and is often\n   * either a hash of the public key material (such as with RSA), or the\n   * full encoded public key (for key types with sufficiently short\n   * representations, such as ed25519).\n   * This is frequently used in initializing the key id, or generating some\n   * types of cryptonym DIDs.\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Verifies that a given key fingerprint matches the public key material\n   * belonging to this key pair.\n   *\n   * @param {string} fingerprint - Public key fingerprint.\n   *\n   * @returns {{verified: boolean}} An object with verified flag.\n   */\n  /* eslint-enable */\n  verifyFingerprint(/* {fingerprint} */) {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a signer object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * NOTE: Applies only to verifier type keys (like ed25519).\n   *\n   * @example\n   * > const signer = keyPair.signer();\n   * > signer\n   * { sign: [AsyncFunction: sign] }\n   * > signer.sign({data});\n   *\n   * @returns {{sign: Function}} A signer for json-ld usage.\n   */\n  /* eslint-enable */\n  signer() {\n    return {\n      async sign({/* data */}) {\n        throw new Error('Abstract method, must be implemented in subclass.');\n      }\n    };\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a verifier object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * NOTE: Applies only to verifier type keys (like ed25519).\n   *\n   * @example\n   * > const verifier = keyPair.verifier();\n   * > verifier\n   * { verify: [AsyncFunction: verify] }\n   * > verifier.verify(key);\n   *\n   * @returns {{verify: Function}} Used to verify jsonld-signatures.\n   */\n  /* eslint-enable */\n  verifier() {\n    return {\n      async verify({/* data, signature */}) {\n        throw new Error('Abstract method, must be implemented in subclass.');\n      }\n    };\n  }\n}\n\n// Implementers must override this in subclasses\nLDKeyPair.SUITE_CONTEXT = 'INVALID LDKeyPair CONTEXT';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/crypto-ld/lib/LDKeyPair.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/crypto-ld/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/crypto-ld/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CryptoLD: () => (/* reexport safe */ _CryptoLD_js__WEBPACK_IMPORTED_MODULE_0__.CryptoLD),\n/* harmony export */   LDKeyPair: () => (/* reexport safe */ _LDKeyPair_js__WEBPACK_IMPORTED_MODULE_1__.LDKeyPair)\n/* harmony export */ });\n/* harmony import */ var _CryptoLD_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CryptoLD.js */ \"(ssr)/./node_modules/crypto-ld/lib/CryptoLD.js\");\n/* harmony import */ var _LDKeyPair_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LDKeyPair.js */ \"(ssr)/./node_modules/crypto-ld/lib/LDKeyPair.js\");\n/*\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWxkL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3VDO0FBQ0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWxkL2xpYi9pbmRleC5qcz81Y2RhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgtMjAyMiBEaWdpdGFsIEJhemFhciwgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG5leHBvcnQge0NyeXB0b0xEfSBmcm9tICcuL0NyeXB0b0xELmpzJztcbmV4cG9ydCB7TERLZXlQYWlyfSBmcm9tICcuL0xES2V5UGFpci5qcyc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/crypto-ld/lib/index.js\n");

/***/ })

};
;